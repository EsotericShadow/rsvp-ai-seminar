generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RSVP {
  id                 String   @id @default(cuid())
  fullName           String
  organization       String?
  email              String   @unique
  phone              String?
  attendanceStatus   String
  attendeeCount      Int
  dietaryPreference  String
  dietaryOther       String?
  accessibilityNeeds String?
  referralSource     String
  referralOther      String?
  wantsResources     Boolean  @default(false)
  wantsAudit         Boolean  @default(false)
  learningGoal       String?
  createdAt          DateTime @default(now())
  visitorId          String?
  sessionId          String?
  referrer           String?
  eid                String?
  utmSource          String?
  utmMedium          String?
  utmCampaign        String?
  utmTerm            String?
  utmContent         String?
  userAgent          String?
  language           String?
  tz                 String?
  country            String?
  region             String?
  city               String?
  ipHash             String?
  screenW            Int?
  screenH            Int?
  dpr                Float?
  platform           String?
  device             String?
  browser            String?
  meta               String?
}

model Visit {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  visitorId           String
  sessionId           String
  path                String
  query               String?
  referrer            String?
  eid                 String?
  utmSource           String?
  utmMedium           String?
  utmCampaign         String?
  utmTerm             String?
  utmContent          String?
  gclid               String?
  fbclid              String?
  msclkid             String?
  userAgent           String?
  language            String?
  tz                  String?
  screenW             Int?
  screenH             Int?
  dpr                 Float?
  platform            String?
  device              String?
  browser             String?
  country             String?
  region              String?
  city                String?
  ipHash              String?
  connection          Json?
  deviceMemory        Float?
  hardwareConcurrency Int?
  interactionCounts   Json?
  languages           Json?
  maxTouchPoints      Int?
  navigation          Json?
  orientation         String?
  paint               Json?
  performance         Json?
  scrollDepth         Int?
  storage             Json?
  timeOnPageMs        Int?
  viewportH           Int?
  viewportW           Int?
  visibility          Json?
}

model CampaignTemplate {
  id        String             @id @default(cuid())
  name      String
  subject   String
  htmlBody  String
  textBody  String?
  // Template variables
  greeting_title      String?
  greeting_message    String?
  signature_name      String?
  signature_title     String?
  signature_company   String?
  signature_location  String?
  main_content_title  String?
  main_content_body   String?
  button_text         String?
  additional_info_title   String?
  additional_info_body    String?
  closing_title       String?
  closing_message     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  schedules CampaignSchedule[]
}

model Campaign {
  id          String             @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus     @default(DRAFT)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  schedules   CampaignSchedule[]
  settings    CampaignSettings?
}

model AudienceGroup {
  id          String             @id @default(cuid())
  name        String
  description String?
  criteria    Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     AudienceMember[]
  schedules   CampaignSchedule[]
}

model AudienceMember {
  id             String        @id @default(cuid())
  groupId        String
  businessId     String
  businessName   String?
  primaryEmail   String
  secondaryEmail String?
  tagsSnapshot   String[]
  inviteToken    String?
  meta           Json?
  createdAt      DateTime      @default(now())
  unsubscribed   Boolean       @default(false)
  group          AudienceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, businessId])
  @@index([groupId])
  @@index([businessId])
}

model CampaignSchedule {
  id                 String           @id @default(cuid())
  name               String
  templateId         String
  groupId            String
  status             CampaignStatus   @default(DRAFT)
  sendAt             DateTime?
  timeZone           String?          @default("America/Vancouver")
  throttlePerMinute  Int?             @default(60)
  repeatIntervalMins Int?
  lastRunAt          DateTime?
  nextRunAt          DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  campaignId         String?
  smartWindowEnd     DateTime?
  smartWindowStart   DateTime?
  stepOrder          Int              @default(1)
  meta               Json?
  campaign           Campaign?        @relation(fields: [campaignId], references: [id])
  group              AudienceGroup    @relation(fields: [groupId], references: [id])
  template           CampaignTemplate @relation(fields: [templateId], references: [id])
  sends              CampaignSend[]

  @@index([status])
  @@index([groupId])
  @@index([templateId])
  @@index([nextRunAt])
  @@index([campaignId, stepOrder])
}

model CampaignSend {
  id              String             @id @default(cuid())
  scheduleId      String
  groupId         String
  templateId      String
  businessId      String
  businessName    String?
  email           String
  inviteToken     String?
  inviteLink      String?
  resendMessageId String?
  status          CampaignSendStatus @default(PENDING)
  error           String?
  meta            Json?
  sentAt          DateTime?
  openedAt        DateTime?
  visitedAt       DateTime?
  rsvpAt          DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  schedule        CampaignSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, businessId])
  @@index([scheduleId])
  @@index([groupId])
  @@index([templateId])
  @@index([businessId])
  @@index([status])
}

model CampaignSettings {
  campaignId        String   @id
  windows           Json
  throttlePerMinute Int      @default(60)
  maxConcurrent     Int      @default(50)
  perDomain         Json?
  quietHours        Json?
  updatedAt         DateTime @updatedAt
  paused            Boolean  @default(false)
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailJob {
  id                  String         @id @default(cuid())
  campaignId          String
  recipientEmail      String
  recipientId         String?
  sendAt              DateTime
  status              EmailJobStatus @default(scheduled)
  attempts            Int            @default(0)
  error               String?
  processingStartedAt DateTime?
  sentAt              DateTime?
  providerMessageId   String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  events              EmailEvent[]

  @@index([campaignId, status, sendAt])
}

model EmailEvent {
  id        String         @id @default(cuid())
  jobId     String
  type      EmailEventType
  meta      Json?
  createdAt DateTime       @default(now())
  job       EmailJob       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, type, createdAt])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  PAUSED
  COMPLETED
  CANCELLED
}

model GlobalTemplateSettings {
  id                      String   @id @default(cuid())
  global_hero_title       String   @default("Welcome to Evergreen AI")
  global_hero_message     String   @default("Thank you for your interest in our upcoming informational session about practical AI tools for Northern BC businesses.")
  global_signature_name   String   @default("Gabriel Lacroix")
  global_signature_title  String   @default("AI Solutions Specialist")
  global_signature_company String  @default("Evergreen Web Solutions")
  global_signature_location String @default("Terrace, BC")
  global_event_title      String   @default("Event Details")
  global_event_date       String   @default("October 23rd, 2025")
  global_event_time       String   @default("6:00 PM - 8:00 PM")
  global_event_location   String   @default("Terrace, BC")
  global_event_cost       String   @default("Free")
  global_event_includes   String   @default("Coffee, refreshments, networking, and actionable AI insights")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("global_template_settings")
}

model GlobalHTMLTemplate {
  id        String   @id @default(cuid())
  html      String   @db.Text
  version   Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("global_html_template")
}

enum CampaignSendStatus {
  PENDING
  SENDING
  SENT
  FAILED
  SKIPPED
}

enum EmailJobStatus {
  scheduled
  processing
  sent
  failed
}

enum EmailEventType {
  send_attempt
  sent
  failed
  bounce
  complaint
  opened
  clicked
  paused
  resumed
  schedule_updated
}
