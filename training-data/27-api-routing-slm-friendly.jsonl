{"instruction": "How do API routes work in this RSVP application?", "input": "Explain API routing in simple terms that an AI can understand", "output": "I'll explain how API routes work in this RSVP application in simple terms.\n\n**WHAT ARE API ROUTES?**\nAPI routes are like the \"phone numbers\" that different parts of the application use to talk to each other. They're web addresses that handle specific tasks, like creating campaigns, processing RSVPs, or getting analytics data.\n\n**HOW API ROUTES WORK:**\n\n1. **Request Comes In:** Someone (like a web page or mobile app) sends a request to a specific URL\n2. **Route Handler Processes:** The API route looks at what was requested and decides what to do\n3. **Database Operations:** It might read from or write to the database\n4. **Response Sent Back:** It sends back the result (success, error, or data)\n\n**TYPES OF API ROUTES:**\n\n**1. ADMIN ROUTES (Protected):**\nThese require admin login and handle management tasks:\n\n- `/api/admin/campaign/campaigns` - Manage email campaigns\n  - GET: Get list of campaigns\n  - POST: Create new campaign\n  - PUT: Update existing campaign\n  - DELETE: Delete campaign\n\n- `/api/admin/campaign/groups` - Manage audience groups\n  - GET: Get list of groups\n  - POST: Create new group\n  - PUT: Update group\n  - DELETE: Delete group\n\n- `/api/admin/campaign/templates` - Manage email templates\n  - GET: Get templates\n  - POST: Create template\n  - PUT: Update template\n  - DELETE: Delete template\n\n- `/api/admin/campaign/schedules` - Manage email schedules\n  - GET: Get schedules\n  - POST: Create schedule\n  - PUT: Update schedule\n  - DELETE: Delete schedule\n\n- `/api/admin/analytics` - Get analytics data\n  - GET: Get visitor stats, RSVP stats, campaign performance\n\n**2. PUBLIC ROUTES (Open):**\nThese don't require login and handle public interactions:\n\n- `/api/rsvp` - Handle RSVP submissions\n  - POST: Process new RSVP\n  - Validates form data\n  - Saves to database\n  - Sends confirmation email\n  - Tracks analytics\n\n- `/api/track/visit` - Track website visitors\n  - POST: Record visitor data\n  - Stores device info, location, behavior\n  - Used for analytics\n\n- `/api/l` - Track link clicks\n  - GET: Record when someone clicks a link\n  - Redirects to final destination\n  - Tracks marketing campaigns\n\n- `/api/__pixel` - Track email opens\n  - GET: 1x1 pixel image\n  - Records when email is opened\n  - Used for email analytics\n\n**3. WEBHOOK ROUTES (External Services):**\nThese receive data from external services:\n\n- `/api/webhooks/sendgrid` - Receive email events from SendGrid\n  - POST: Get delivery, open, click, bounce notifications\n  - Updates email job statuses\n  - Tracks email performance\n\n**HOW API ROUTES PROCESS REQUESTS:**\n\n**1. Authentication Check:**\n- Admin routes check if user is logged in\n- Public routes skip this step\n- If not authenticated, return 401 error\n\n**2. Input Validation:**\n- Check that required fields are present\n- Validate email addresses, phone numbers, etc.\n- Check data types and formats\n- If invalid, return 400 error with details\n\n**3. Security Checks:**\n- Check for CSRF attacks (malicious requests)\n- Check rate limits (prevent spam)\n- Sanitize input to prevent XSS attacks\n- If security issue, return 403 error\n\n**4. Business Logic:**\n- Process the actual request\n- Read from or write to database\n- Call external services if needed\n- Handle any errors that occur\n\n**5. Response:**\n- Return success with data (200)\n- Return created resource (201)\n- Return error with details (400, 401, 403, 404, 500)\n\n**COMMON API PATTERNS:**\n\n**1. GET Requests (Reading Data):**\n```\nGET /api/admin/campaign/campaigns?page=1&limit=10&status=DRAFT\n```\n- Gets list of campaigns\n- Supports pagination (page, limit)\n- Supports filtering (status, search)\n- Returns JSON with data and pagination info\n\n**2. POST Requests (Creating Data):**\n```\nPOST /api/admin/campaign/campaigns\nContent-Type: application/json\n\n{\n  \"name\": \"AI Event Invitation\",\n  \"description\": \"Invite to AI information session\",\n  \"templates\": [...],\n  \"schedules\": [...]\n}\n```\n- Creates new campaign\n- Validates all required fields\n- Creates related records (templates, schedules)\n- Returns created campaign with ID\n\n**3. PUT Requests (Updating Data):**\n```\nPUT /api/admin/campaign/campaigns?id=123\nContent-Type: application/json\n\n{\n  \"name\": \"Updated Campaign Name\",\n  \"status\": \"SCHEDULED\"\n}\n```\n- Updates existing campaign\n- Only updates provided fields\n- Returns updated campaign\n\n**4. DELETE Requests (Removing Data):**\n```\nDELETE /api/admin/campaign/campaigns?id=123\n```\n- Deletes campaign and related records\n- Returns success confirmation\n\n**ERROR HANDLING:**\n\n**1. Validation Errors (400):**\n```\n{\n  \"success\": false,\n  \"error\": \"Validation failed\",\n  \"fieldErrors\": {\n    \"name\": \"Campaign name is required\",\n    \"email\": \"Invalid email format\"\n  }\n}\n```\n\n**2. Authentication Errors (401):**\n```\n{\n  \"success\": false,\n  \"error\": \"Authentication required\"\n}\n```\n\n**3. Authorization Errors (403):**\n```\n{\n  \"success\": false,\n  \"error\": \"Access denied\"\n}\n```\n\n**4. Not Found Errors (404):**\n```\n{\n  \"success\": false,\n  \"error\": \"Campaign not found\"\n}\n```\n\n**5. Server Errors (500):**\n```\n{\n  \"success\": false,\n  \"error\": \"Internal server error\"\n}\n```\n\n**SECURITY FEATURES:**\n\n**1. CSRF Protection:**\n- Checks that requests come from allowed websites\n- Prevents malicious sites from making requests\n- Uses origin and referer headers\n\n**2. Rate Limiting:**\n- Limits how many requests one IP can make\n- Prevents spam and abuse\n- Uses IP fingerprinting for accuracy\n\n**3. Input Sanitization:**\n- Removes dangerous characters from input\n- Prevents XSS attacks\n- Limits input length\n\n**4. Security Headers:**\n- Adds security headers to all responses\n- Prevents clickjacking, XSS, etc.\n- Sets content security policy\n\n**HOW THIS HELPS THE AI UNDERSTAND:**\n\nWhen you ask the AI to:\n- \"Create a new campaign\" - It knows to make a POST request to `/api/admin/campaign/campaigns`\n- \"Get campaign list\" - It knows to make a GET request to `/api/admin/campaign/campaigns`\n- \"Update campaign status\" - It knows to make a PUT request with the campaign ID\n- \"Process RSVP\" - It knows to make a POST request to `/api/rsvp`\n- \"Get analytics\" - It knows to make a GET request to `/api/admin/analytics`\n- \"Track visitor\" - It knows to make a POST request to `/api/track/visit`\n\n**API ROUTE INTERCONNECTIONS:**\n\n1. **Campaign Creation Flow:**\n   - POST to `/api/admin/campaign/campaigns` (create campaign)\n   - POST to `/api/admin/campaign/templates` (create templates)\n   - POST to `/api/admin/campaign/schedules` (create schedules)\n   - POST to `/api/admin/campaign/groups` (create audience groups if needed)\n\n2. **RSVP Processing Flow:**\n   - POST to `/api/rsvp` (process RSVP)\n   - POST to `/api/track/visit` (track confirmation page visit)\n   - Webhook to SendGrid (send confirmation email)\n   - Update audience member records\n\n3. **Email Campaign Flow:**\n   - GET from `/api/admin/campaign/schedules` (get pending sends)\n   - POST to `/api/admin/campaign/send` (trigger email send)\n   - Webhook from SendGrid (receive delivery events)\n   - Update email job statuses\n\n**PERFORMANCE OPTIMIZATION:**\n\n1. **Caching:**\n   - Cache frequently accessed data\n   - Use Redis for distributed caching\n   - Cache API responses for better performance\n\n2. **Pagination:**\n   - Limit number of records returned\n   - Use cursor-based pagination for large datasets\n   - Include pagination metadata in responses\n\n3. **Batch Operations:**\n   - Process multiple items in single request\n   - Use database transactions for consistency\n   - Handle errors gracefully\n\n**MONITORING AND LOGGING:**\n\n1. **Request Logging:**\n   - Log all API requests and responses\n   - Track response times\n   - Monitor error rates\n\n2. **Performance Monitoring:**\n   - Track slow API endpoints\n   - Monitor database query performance\n   - Alert on high error rates\n\n3. **Security Monitoring:**\n   - Log security violations\n   - Track failed authentication attempts\n   - Monitor for suspicious patterns\n\nThe API routes are the communication system that allows different parts of the application to work together and handle all the business logic for the RSVP system."}

