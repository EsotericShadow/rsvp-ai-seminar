{"instruction": "How does admin authentication work?", "input": "Explain the admin login and session management system", "output": "I'll explain the complete admin authentication system. Here's how admin login and session management works:\n\n**ADMIN AUTHENTICATION SYSTEM**\n\n**1. ADMIN CONFIGURATION**\n```typescript\n// Admin configuration management\n// src/lib/admin-auth.ts\ntype Config = {\n  username: string;\n  passwordHash: string;\n  sessionSecret: string;\n}\n\nexport function getAdminConfig(): Config | null {\n  const username = process.env.ADMIN_USER;\n  const passwordHash = process.env.ADMIN_PASSWORD_HASH;\n  const sessionSecret = process.env.ADMIN_SESSION_SECRET;\n  \n  if (!username || !passwordHash || !sessionSecret) {\n    return null;\n  }\n  \n  return {\n    username,\n    passwordHash,\n    sessionSecret\n  };\n}\n```\n\n**2. SESSION TOKEN MANAGEMENT**\n```typescript\n// JWT session token creation and verification\nimport jwt from 'jsonwebtoken';\n\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}\n\nexport function verifySessionToken(token: string | undefined, secret: string) {\n  if (!token) return null;\n  \n  try {\n    const decoded = jwt.verify(token, secret, { algorithms: ['HS256'] }) as any;\n    \n    // Check if token is expired\n    if (decoded.exp && decoded.exp < Date.now() / 1000) {\n      return null;\n    }\n    \n    return { username: decoded.username, expiresAt: decoded.exp };\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function getNewExpiry() {\n  return Date.now() + (30 * 60 * 1000); // 30 minutes\n}\n\nexport function getSessionCookieName() {\n  return 'admin_session';\n}\n```\n\n**3. ADMIN LOGIN PAGE**\n```typescript\n// Admin login page with form handling\n// src/app/admin/login/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport bcrypt from 'bcryptjs';\nimport { getAdminConfig, createSessionToken, getNewExpiry, getSessionCookieName } from '@/lib/admin-auth';\n\ntype SearchParams = { [key: string]: string | string[] | undefined }\n\nasync function loginAction(formData: FormData) {\n  'use server'\n\n  const config = getAdminConfig()\n  if (!config) {\n    redirect('/admin/login?error=config')\n  }\n\n  const { username: expectedUsername, passwordHash, sessionSecret } = config\n\n  const username = String(formData.get('username') || '')\n  const password = String(formData.get('password') || '')\n  const nextRaw = String(formData.get('next') || '/admin/analytics')\n  const next = nextRaw.startsWith('/') ? nextRaw : '/admin/analytics'\n\n  if (username !== expectedUsername) {\n    redirect(`/admin/login?error=invalid&next=${encodeURIComponent(next)}`)\n  }\n\n  const ok = await bcrypt.compare(password, passwordHash)\n\n  if (!ok) {\n    redirect(`/admin/login?error=invalid&next=${encodeURIComponent(next)}`)\n  }\n\n  const expiresAt = getNewExpiry()\n  const token = createSessionToken(expectedUsername, sessionSecret, expiresAt)\n\n  cookies().set({\n    name: getSessionCookieName(),\n    value: token,\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: process.env.NODE_ENV === 'production',\n    expires: new Date(expiresAt),\n  })\n\n  redirect(next)\n}\n\nexport default function AdminLoginPage({ searchParams }: { searchParams: SearchParams }) {\n  const { error, next, loggedOut } = normalizeParams(searchParams)\n\n  const config = getAdminConfig()\n  if (!config) {\n    return (\n      <div className=\"min-h-[100svh] grid place-items-center bg-neutral-950 text-neutral-100 p-6\">\n        <div className=\"w-full max-w-lg glass rounded-2xl p-6\">\n          <h1 className=\"text-xl font-semibold mb-2\">Admin login not configured</h1>\n          <p className=\"text-sm text-neutral-400\">\n            Set <code>ADMIN_USER</code>, <code>ADMIN_PASSWORD_HASH</code>, and <code>ADMIN_SESSION_SECRET</code> in your environment.\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-[100svh] grid place-items-center bg-neutral-950 text-neutral-100 p-6\">\n      <div className=\"w-full max-w-sm glass rounded-2xl p-6\">\n        <h1 className=\"text-xl font-semibold mb-4 text-center\">Admin Login</h1>\n        {loggedOut ? (\n          <div className=\"mb-4 rounded-lg bg-emerald-500/10 text-emerald-300 px-3 py-2 text-sm\">\n            Signed out successfully.\n          </div>\n        ) : null}\n        {error ? (\n          <div className=\"mb-4 rounded-lg bg-red-500/10 text-red-300 px-3 py-2 text-sm\">\n            {error === 'invalid' && 'Invalid username or password.'}\n            {error === 'config' && 'Admin credentials are not configured.'}\n          </div>\n        ) : null}\n        <form action={loginAction} className=\"space-y-4\">\n          <input type=\"hidden\" name=\"next\" value={next} />\n          <div>\n            <label className=\"text-sm text-neutral-400 block mb-1\" htmlFor=\"username\">Username</label>\n            <input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              autoComplete=\"username\"\n              className=\"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-3 text-white placeholder:text-neutral-400 outline-none focus:ring-2 ring-brand-sage focus:border-brand-sage transition-colors duration-200 min-h-[44px]\"\n              placeholder=\"Enter username\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"text-sm text-neutral-400 block mb-1\" htmlFor=\"password\">Password</label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"current-password\"\n              className=\"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-3 text-white placeholder:text-neutral-400 outline-none focus:ring-2 ring-brand-sage focus:border-brand-sage transition-colors duration-200 min-h-[44px]\"\n              placeholder=\"Enter password\"\n              required\n            />\n          </div>\n          <button \n            type=\"submit\"\n            className=\"w-full rounded-lg bg-brand-ink hover:bg-brand-mid active:bg-brand-mid px-3 py-3 font-medium text-white transition-all duration-200 active:scale-95 touch-manipulation min-h-[44px] focus:outline-none focus:ring-2 focus:ring-brand-sage focus:ring-offset-2 focus:ring-offset-neutral-950\"\n          >\n            <span className=\"flex items-center justify-center\">\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\" />\n              </svg>\n              Sign In\n            </span>\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}\n```\n\n**4. SESSION VERIFICATION MIDDLEWARE**\n```typescript\n// Admin session verification\n// src/lib/adminSession.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\n\nexport function requireAdminSession() {\n  const token = cookies().get(getSessionCookieName())?.value;\n  const config = getAdminConfig();\n  \n  if (!config) {\n    return { response: NextResponse.json({ error: 'Admin not configured' }, { status: 500 }) };\n  }\n  \n  const session = verifySessionToken(token, config.sessionSecret);\n  if (!session) {\n    return { response: NextResponse.json({ error: 'Unauthorized' }, { status: 401 }) };\n  }\n  \n  return { session };\n}\n```\n\n**5. ADMIN LOGOUT**\n```typescript\n// Admin logout endpoint\n// src/app/admin/logout/route.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getSessionCookieName } from '@/lib/admin-auth';\n\nexport async function POST(request: Request) {\n  try {\n    // Clear the session cookie\n    cookies().set({\n      name: getSessionCookieName(),\n      value: '',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: process.env.NODE_ENV === 'production',\n      expires: new Date(0), // Expire immediately\n    });\n    \n    return NextResponse.json({ success: true, message: 'Logged out successfully' });\n  } catch (error) {\n    console.error('Logout error:', error);\n    return NextResponse.json({ error: 'Logout failed' }, { status: 500 });\n  }\n}\n```\n\n**6. ADMIN ROUTE PROTECTION**\n```typescript\n// Admin route protection in middleware\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Admin route protection\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    const token = req.cookies.get(getSessionCookieName())?.value;\n    const config = getAdminConfig();\n    \n    if (!config) {\n      return NextResponse.redirect(new URL('/admin/login?error=config', req.url));\n    }\n    \n    const session = verifySessionToken(token, config.sessionSecret);\n    if (!session) {\n      const loginUrl = new URL('/admin/login', req.url);\n      loginUrl.searchParams.set('next', req.nextUrl.pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n  \n  return res;\n}\n```\n\n**7. ADMIN API ROUTE PROTECTION**\n```typescript\n// Admin API route protection\n// src/app/api/admin/campaign/dashboard/route.ts\nimport { NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport { listCampaignData } from '@/lib/campaigns';\n\nexport async function GET() {\n  const auth = requireAdminSession();\n  if ('response' in auth) return auth.response;\n\n  const data = await listCampaignData();\n  return NextResponse.json(data);\n}\n```\n\n**8. ADMIN CAMPAIGN PAGE PROTECTION**\n```typescript\n// Admin campaign page with session verification\n// src/app/admin/campaign/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\nimport { listCampaignData } from '@/lib/campaigns';\n\nexport const dynamic = \"force-dynamic\";\nexport const runtime = \"nodejs\";\n\nexport default async function AdminCampaignPage() {\n  const adminConfig = getAdminConfig();\n  if (!adminConfig) {\n    redirect('/admin/login?error=config');\n  }\n\n  const token = cookies().get(getSessionCookieName())?.value;\n  const session = token ? verifySessionToken(token, adminConfig.sessionSecret) : null;\n\n  if (!session) {\n    redirect(`/admin/login?next=${encodeURIComponent('/admin/campaign')}`);\n  }\n\n  const defaults = {\n    batchSize: Number.parseInt(process.env.CAMPAIGN_EMAIL_BATCH_SIZE || '50', 10) || 50,\n    minHoursBetween: Number.parseInt(process.env.CAMPAIGN_MIN_HOURS_BETWEEN_EMAILS || '72', 10) || 72,\n    linkBase: process.env.CAMPAIGN_LINK_BASE || 'https://rsvp-ai-seminar.vercel.app/rsvp',\n    fromEmail: process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <team@evergreen.ai>',\n    cronSecretConfigured: Boolean(process.env.CAMPAIGN_CRON_SECRET?.trim()),\n    resendConfigured: Boolean(process.env.RESEND_API_KEY?.trim()),\n    leadMineConfigured:\n      Boolean(process.env.LEADMINE_API_BASE?.trim()) && Boolean(process.env.LEADMINE_API_KEY?.trim()),\n  };\n\n  const initialData = await listCampaignData();\n\n  return (\n    <AdminLayout\n      title=\"Campaign Control Center\"\n      subtitle=\"Configure outreach settings, preview invite batches, and trigger Resend deliveries for Lead Mine businesses.\"\n      badge=\"Evergreen Admin\"\n    >\n      <CampaignControls defaults={defaults} initialData={initialData} />\n    </AdminLayout>\n  );\n}\n```\n\n**9. SESSION EXPIRY MANAGEMENT**\n```typescript\n// Session expiry and renewal\n// src/lib/admin-auth.ts\nexport function isSessionExpired(session: { expiresAt: number }): boolean {\n  return session.expiresAt < Date.now() / 1000;\n}\n\nexport function refreshSession(token: string, secret: string): string | null {\n  const session = verifySessionToken(token, secret);\n  if (!session) return null;\n  \n  // Check if session is close to expiry (within 5 minutes)\n  const fiveMinutesFromNow = (Date.now() / 1000) + (5 * 60);\n  if (session.expiresAt < fiveMinutesFromNow) {\n    const newExpiry = getNewExpiry();\n    return createSessionToken(session.username, secret, newExpiry);\n  }\n  \n  return token; // No refresh needed\n}\n```\n\n**10. ADMIN AUTHENTICATION FLOW**\n```typescript\n// Complete admin authentication flow\nconst adminAuthFlow = {\n  // 1. User visits admin page\n  // 2. Middleware checks for valid session\n  // 3. If no session, redirect to login\n  // 4. User enters credentials\n  // 5. Server validates credentials\n  // 6. Server creates JWT session token\n  // 7. Server sets secure HTTP-only cookie\n  // 8. User is redirected to admin dashboard\n  // 9. Subsequent requests include session cookie\n  // 10. Server verifies session on each request\n  // 11. Session expires after 30 minutes\n  // 12. User must re-authenticate\n};\n```\n\n**11. PASSWORD HASHING**\n```typescript\n// Password hashing for admin credentials\n// To generate password hash:\n// const bcrypt = require('bcryptjs');\n// const hash = await bcrypt.hash('your-password', 12);\n// console.log(hash);\n\n// Environment variables needed:\n// ADMIN_USER=your-username\n// ADMIN_PASSWORD_HASH=$2a$12$... (bcrypt hash)\n// ADMIN_SESSION_SECRET=your-secret-key\n```\n\n**12. SECURITY CONSIDERATIONS**\n```typescript\n// Security features of admin authentication\nconst securityFeatures = {\n  // JWT tokens with expiration\n  tokenExpiry: '30 minutes',\n  \n  // HTTP-only cookies (prevents XSS)\n  cookieSecurity: 'httpOnly, secure, sameSite=lax',\n  \n  // Password hashing with bcrypt\n  passwordHashing: 'bcrypt with salt rounds 12',\n  \n  // Session verification on every request\n  sessionVerification: 'required for all admin routes',\n  \n  // Automatic logout on token expiry\n  autoLogout: 'enabled',\n  \n  // Secure redirects\n  redirectSecurity: 'validated next parameter'\n};\n```\n\nThis admin authentication system provides secure session management with JWT tokens, HTTP-only cookies, password hashing, and comprehensive route protection for your RSVP application's admin interface."}

