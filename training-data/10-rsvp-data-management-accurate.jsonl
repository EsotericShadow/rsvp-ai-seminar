{"instruction": "How does the RSVP form processing work?", "input": "Explain the multi-step RSVP form system", "output": "I'll explain the complete RSVP form processing system. Here's how the multi-step form works:\n\n**RSVP FORM PROCESSING SYSTEM**\n\n**1. FORM STRUCTURE**\nThe RSVP form is a 5-step process:\n- **Step 1**: Contact Information (firstName, lastName, email, phone)\n- **Step 2**: Attendance Status (attendanceStatus, attendeeCount if YES)\n- **Step 3**: Dietary & Accessibility (dietaryPreference, dietaryOther, accessibilityNeeds)\n- **Step 4**: Referral Source (referralSource, referralOther)\n- **Step 5**: Additional Options (wantsResources, wantsAudit, learningGoal)\n\n**2. VALIDATION SCHEMA**\n```typescript\n// Core RSVP form schema with validation\nexport const coreRsvpFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  email: z.string().email('Valid email is required'),\n  phone: z.string().optional(),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE']),\n  attendeeCount: z.number().min(1).max(10),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER']),\n  dietaryOther: z.string().optional(),\n  accessibilityNeeds: z.string().optional(),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER']),\n  referralOther: z.string().optional(),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: z.string().optional()\n});\n```\n\n**3. STEP-BY-STEP VALIDATION**\n```typescript\n// Progressive validation for each step\nconst validateStep = async (idx: number) => {\n  if (idx === 0) {\n    // Contact validation\n    return form.trigger(['firstName', 'lastName', 'email', 'phone']);\n  }\n  if (idx === 1) {\n    // Attendance validation\n    const keys = ['attendanceStatus'];\n    if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n    return form.trigger(keys);\n  }\n  if (idx === 2) {\n    // Dietary validation\n    const keys = ['dietaryPreference', 'accessibilityNeeds'];\n    if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n    return form.trigger(keys);\n  }\n  if (idx === 3) {\n    // Referral validation\n    const keys = ['referralSource'];\n    if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n    return form.trigger(keys);\n  }\n  if (idx === 4) {\n    // Additional options validation\n    return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal']);\n  }\n  return true;\n};\n```\n\n**4. FORM SUBMISSION PROCESS**\n```typescript\n// Complete form submission with analytics\nexport async function POST(req: Request) {\n  try {\n    // Security checks\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Rate limiting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse({ message: 'Rate limit exceeded' }, 429);\n    }\n    \n    // Parse and validate form data\n    const body = await req.json();\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data\n        visitorId: cookies().get('vid')?.value,\n        sessionId: cookies().get('sid')?.value,\n        referrer: headers().get('referer'),\n        eid: cookies().get('eid')?.value,\n        utmSource: cookies().get('utm_source')?.value,\n        utmMedium: cookies().get('utm_medium')?.value,\n        utmCampaign: cookies().get('utm_campaign')?.value,\n        utmTerm: cookies().get('utm_term')?.value,\n        utmContent: cookies().get('utm_content')?.value,\n        userAgent: headers().get('user-agent'),\n        language: headers().get('accept-language'),\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        country: headers().get('x-vercel-ip-country'),\n        region: headers().get('x-vercel-ip-country-region'),\n        city: headers().get('x-vercel-ip-city'),\n        ipHash: crypto.createHash('sha256').update(clientIP).digest('hex')\n      }\n    });\n    \n    // Send confirmation email\n    const emailResult = await sendRSVPConfirmation({\n      to: validatedData.email,\n      name: `${validatedData.firstName} ${validatedData.lastName}`,\n      rsvpId: rsvp.id\n    });\n    \n    // Post to LeadMine\n    await postLeadMineEvent({\n      token: 'rsvp-submission',\n      businessId: rsvp.id,\n      type: 'rsvp_submitted',\n      meta: {\n        rsvpId: rsvp.id,\n        email: validatedData.email,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        submittedAt: new Date().toISOString()\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    console.error('RSVP submission error:', error);\n    return NextResponse.json({ \n      error: 'Failed to submit RSVP'\n    }, { status: 500 });\n  }\n}\n```\n\n**5. DATABASE SCHEMA**\n```sql\n-- RSVP table with comprehensive analytics\nCREATE TABLE \"RSVP\" (\n  \"id\" TEXT PRIMARY KEY,\n  \"fullName\" TEXT NOT NULL,\n  \"organization\" TEXT,\n  \"email\" TEXT UNIQUE NOT NULL,\n  \"phone\" TEXT,\n  \"attendanceStatus\" TEXT NOT NULL,\n  \"attendeeCount\" INTEGER NOT NULL,\n  \"dietaryPreference\" TEXT NOT NULL,\n  \"dietaryOther\" TEXT,\n  \"accessibilityNeeds\" TEXT,\n  \"referralSource\" TEXT NOT NULL,\n  \"referralOther\" TEXT,\n  \"wantsResources\" BOOLEAN DEFAULT false,\n  \"wantsAudit\" BOOLEAN DEFAULT false,\n  \"learningGoal\" TEXT,\n  \"createdAt\" TIMESTAMP DEFAULT NOW(),\n  -- Analytics fields\n  \"visitorId\" TEXT,\n  \"sessionId\" TEXT,\n  \"referrer\" TEXT,\n  \"eid\" TEXT,\n  \"utmSource\" TEXT,\n  \"utmMedium\" TEXT,\n  \"utmCampaign\" TEXT,\n  \"utmTerm\" TEXT,\n  \"utmContent\" TEXT,\n  \"userAgent\" TEXT,\n  \"language\" TEXT,\n  \"tz\" TEXT,\n  \"country\" TEXT,\n  \"region\" TEXT,\n  \"city\" TEXT,\n  \"ipHash\" TEXT,\n  \"screenW\" INTEGER,\n  \"screenH\" INTEGER,\n  \"dpr\" DOUBLE PRECISION,\n  \"platform\" TEXT,\n  \"device\" TEXT,\n  \"browser\" TEXT,\n  \"meta\" TEXT\n);\n```\n\n**6. FORM COMPONENTS**\n```typescript\n// Phone field with formatting\nexport function PhoneField({ value, onChange, onBlur, id = \"phone\" }) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```\n\n**7. ERROR HANDLING**\n```typescript\n// Comprehensive error handling\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n```\n\n**8. ANALYTICS INTEGRATION**\n```typescript\n// Analytics data collection\nconst collectAnalyticsData = (req: Request) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex')\n  };\n};\n```\n\nThis RSVP form processing system provides comprehensive data collection, validation, security, and analytics integration for your event management application."}

{"instruction": "What analytics data is collected for RSVPs?", "input": "Show me all the tracking fields", "output": "I'll show you all the analytics and tracking data collected for RSVPs. Here's the comprehensive list:\n\n**RSVP ANALYTICS DATA COLLECTION**\n\n**1. IDENTIFICATION TRACKING**\n```typescript\n// Visitor and session identification\nvisitorId: string;        // Unique visitor ID (2-year cookie)\nsessionId: string;        // Session ID (30-minute rolling)\nreferrer: string;         // Page referrer URL\neid: string;             // Engagement ID from URL/cookie\n```\n\n**2. MARKETING ATTRIBUTION**\n```typescript\n// UTM parameters for campaign tracking\nutmSource: string;        // Traffic source (e.g., 'google', 'facebook')\nutmMedium: string;        // Marketing medium (e.g., 'cpc', 'email')\nutmCampaign: string;      // Campaign name (e.g., 'ai-event-2025')\nutmTerm: string;          // Paid search keywords\nutmContent: string;       // Ad content variation\n\n// Ad click IDs\ngclid: string;            // Google Ads click ID\nfbclid: string;           // Facebook click ID\nmsclkid: string;          // Microsoft Ads click ID\n```\n\n**3. DEVICE & BROWSER INFORMATION**\n```typescript\n// Browser and device details\nuserAgent: string;        // Full user agent string\nlanguage: string;         // User's preferred language\nlanguages: string[];      // Array of preferred languages\ntz: string;              // User's timezone (e.g., 'America/Vancouver')\nplatform: string;        // Operating system (e.g., 'MacOS', 'Windows')\ndevice: string;          // Device type (e.g., 'desktop', 'mobile')\nbrowser: string;         // Browser name (e.g., 'Chrome', 'Safari')\n```\n\n**4. SCREEN & DISPLAY INFORMATION**\n```typescript\n// Screen and viewport dimensions\nscreenW: number;          // Screen width in pixels\nscreenH: number;          // Screen height in pixels\nviewportW: number;        // Viewport width in pixels\nviewportH: number;        // Viewport height in pixels\ndpr: number;             // Device pixel ratio\norientation: string;      // Screen orientation ('portrait', 'landscape')\n```\n\n**5. DEVICE CAPABILITIES**\n```typescript\n// Hardware and performance info\ndeviceMemory: number;     // Device memory in GB\nhardwareConcurrency: number; // Number of CPU cores\nmaxTouchPoints: number;   // Maximum touch points supported\nconnection: object;       // Network connection info\n```\n\n**6. GEOLOCATION DATA**\n```typescript\n// Location information (from IP)\ncountry: string;          // Country code (e.g., 'CA', 'US')\nregion: string;           // Region/state (e.g., 'BC', 'CA')\ncity: string;             // City name (e.g., 'Vancouver')\nipHash: string;           // Hashed IP address for privacy\n```\n\n**7. USER INTERACTION TRACKING**\n```typescript\n// Behavioral analytics\ninteractionCounts: object; // Click, scroll, form interaction counts\nscrollDepth: number;      // Maximum scroll percentage\npaint: object;            // Page paint timing metrics\nperformance: object;      // Performance timing data\ntimeOnPageMs: number;     // Time spent on page in milliseconds\nvisibility: object;       // Page visibility timeline\n```\n\n**8. FORM-SPECIFIC ANALYTICS**\n```typescript\n// RSVP form specific data\nformInteractions: number; // Number of form field interactions\nerrorCount: number;       // Number of validation errors\nresizeCount: number;      // Number of window resize events\nbeforeUnloadCount: number; // Number of beforeunload events\n```\n\n**9. COMPLETE ANALYTICS SCHEMA**\n```typescript\n// Full analytics data structure\nexport const analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```\n\n**10. DATA COLLECTION PROCESS**\n```typescript\n// How analytics data is collected\nconst collectRSVPAnalytics = (req: Request, formData: any) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    // Identification\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    \n    // Marketing attribution\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    gclid: cookies.get('gclid')?.value,\n    fbclid: cookies.get('fbclid')?.value,\n    msclkid: cookies.get('msclkid')?.value,\n    \n    // Device info\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    \n    // Geolocation\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex'),\n    \n    // Form-specific data\n    meta: JSON.stringify({\n      formStep: formData.currentStep,\n      validationErrors: formData.errors,\n      submissionTime: Date.now()\n    })\n  };\n};\n```\n\n**11. PRIVACY CONSIDERATIONS**\n```typescript\n// Privacy-preserving data collection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\n// Only collect analytics if user hasn't opted out\nif (!hasDoNotTrack()) {\n  // Collect analytics data\n  const analyticsData = collectRSVPAnalytics(req, formData);\n  await prisma.rsvp.create({ data: { ...formData, ...analyticsData } });\n}\n```\n\nThis comprehensive analytics system tracks every aspect of user interaction with your RSVP form, providing detailed insights into user behavior, marketing attribution, and technical performance while respecting user privacy preferences."}

