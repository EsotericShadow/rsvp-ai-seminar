{"instruction": "How does the analytics and tracking system work?", "input": "Explain the comprehensive visitor tracking system", "output": "I'll explain the comprehensive analytics and tracking system. Here's how visitor data is collected and processed:\n\n**ANALYTICS & TRACKING SYSTEM**\n\n**1. VISITOR IDENTIFICATION**\n```typescript\n// Visitor ID management (2-year cookie)\nlet vid = req.cookies.get('vid')?.value;\nif (!vid) {\n  vid = crypto.randomUUID();\n  res.cookies.set('vid', vid, {\n    path: '/',\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: true,\n    maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n  });\n}\n\n// Session ID management (30-minute rolling)\nconst SESSION_MS = 30 * 60 * 1000;\nconst now = Date.now();\nlet sid = req.cookies.get('sid')?.value;\nconst sidTs = Number(req.cookies.get('sid_ts')?.value || 0);\nif (!sid || now - sidTs > SESSION_MS) {\n  sid = crypto.randomUUID();\n  res.cookies.set('sid', sid, { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n  res.cookies.set('sid_ts', String(now), { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n}\n```\n\n**2. UTM PARAMETER TRACKING**\n```typescript\n// UTM and marketing parameter persistence (90 days)\nconst utmKeys = [\n  'utm_source', 'utm_medium', 'utm_campaign', \n  'utm_term', 'utm_content', 'eid',\n  'gclid', 'fbclid', 'msclkid'\n];\n\nfor (const k of utmKeys) {\n  const v = url.searchParams.get(k);\n  if (v) {\n    res.cookies.set(k, v, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 90, // 90 days\n    });\n  }\n}\n```\n\n**3. COMPREHENSIVE VISITOR DATA COLLECTION**\n```typescript\n// AnalyticsBeacon component collects detailed visitor data\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return;\n\n    let sent = false;\n    let pointerMoves = 0;\n    let clickCount = 0;\n    let keypressCount = 0;\n    let copyCount = 0;\n    let maxScrollPercent = 0;\n    let focusEvents = 0;\n    let blurEvents = 0;\n    let formInteractions = 0;\n    let errorCount = 0;\n    let resizeCount = 0;\n    let beforeUnloadCount = 0;\n\n    const startTime = performance.now();\n    const visibilityTimeline: VisibilityEvent[] = [\n      { state: document.visibilityState, at: Date.now() },\n    ];\n\n    // Scroll depth tracking\n    const computeScroll = () => {\n      const totalScrollable = document.documentElement.scrollHeight - window.innerHeight;\n      if (totalScrollable <= 0) {\n        maxScrollPercent = 100;\n        return;\n      }\n      const current = window.scrollY;\n      const percent = Math.round((current / totalScrollable) * 100);\n      if (percent > maxScrollPercent) {\n        maxScrollPercent = Math.min(percent, 100);\n      }\n    };\n\n    // Event listeners for user interactions\n    window.addEventListener('scroll', computeScroll, { passive: true });\n    document.addEventListener('click', () => clickCount++);\n    document.addEventListener('keydown', () => keypressCount++);\n    document.addEventListener('copy', () => copyCount++);\n    document.addEventListener('pointermove', () => {\n      pointerMoves++;\n      if (pointerMoves > 5000) pointerMoves = 5000; // Cap to avoid runaway counts\n    }, { passive: true });\n\n    // Visibility change tracking\n    const onVisibility = () => {\n      const state = document.visibilityState;\n      visibilityTimeline.push({ state, at: Date.now() });\n      if (state === 'hidden') {\n        send('visibilityhidden');\n      }\n    };\n    document.addEventListener('visibilitychange', onVisibility);\n\n    // Performance and connection tracking\n    const conn = (navigator as any).connection;\n    const onConnectionChange = () => {\n      // Track connection changes\n    };\n    if (conn?.addEventListener) {\n      conn.addEventListener('change', onConnectionChange);\n    } else if (conn) {\n      conn.onchange = onConnectionChange;\n    }\n\n    // Build comprehensive payload\n    const buildPayload = async () => {\n      const doc = document.documentElement;\n      const nav = navigator as any;\n      \n      return {\n        path: window.location.pathname,\n        query: window.location.search,\n        referrer: document.referrer,\n        \n        // Device and browser info\n        userAgent: navigator.userAgent,\n        language: navigator.language,\n        languages: navigator.languages,\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        \n        // Screen and viewport\n        screenW: window.screen.width,\n        screenH: window.screen.height,\n        viewportW: window.innerWidth,\n        viewportH: window.innerHeight,\n        dpr: window.devicePixelRatio,\n        orientation: window.screen.orientation?.type,\n        \n        // Device capabilities\n        deviceMemory: nav.deviceMemory,\n        hardwareConcurrency: navigator.hardwareConcurrency,\n        maxTouchPoints: nav.maxTouchPoints,\n        \n        // Network info\n        connection: conn ? {\n          downlink: conn.downlink,\n          effectiveType: conn.effectiveType,\n          rtt: conn.rtt\n        } : undefined,\n        \n        // Performance metrics\n        paint: {\n          firstContentfulPaint: performance.getEntriesByType('paint')\n            .find(entry => entry.name === 'first-contentful-paint')?.startTime,\n          largestContentfulPaint: performance.getEntriesByType('largest-contentful-paint')\n            .pop()?.startTime\n        },\n        \n        performance: {\n          navigationStart: performance.timing.navigationStart,\n          loadEventEnd: performance.timing.loadEventEnd,\n          domContentLoadedEventEnd: performance.timing.domContentLoadedEventEnd\n        },\n        \n        // User interactions\n        interactionCounts: {\n          clicks: clickCount,\n          keypresses: keypressCount,\n          copies: copyCount,\n          pointerMoves,\n        },\n        \n        // Page metrics\n        scrollDepth: maxScrollPercent,\n        timeOnPageMs: Math.round(performance.now() - startTime),\n        visibility: visibilityTimeline,\n        \n        // Storage info\n        storage: {\n          localStorage: JSON.stringify(localStorage).length,\n          sessionStorage: JSON.stringify(sessionStorage).length\n        },\n        \n        // Navigation info\n        navigation: {\n          type: nav.connection?.type,\n          redirectCount: performance.navigation.redirectCount\n        }\n      };\n    };\n\n    // Send analytics data\n    const send = async (reason: string) => {\n      if (sent) return;\n      sent = true;\n\n      try {\n        const payload = await buildPayload();\n        const serialized = JSON.stringify(payload, (_key, value) => \n          value === undefined ? undefined : value\n        );\n        \n        if (navigator.sendBeacon) {\n          const blob = new Blob([serialized], { type: 'application/json' });\n          navigator.sendBeacon('/api/track/visit', blob);\n        } else {\n          await fetch('/api/track/visit', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            keepalive: true,\n            cache: 'no-store',\n            body: serialized,\n          });\n        }\n      } catch (err) {\n        // Ignore errors\n      }\n    };\n\n    // Send on page unload\n    window.addEventListener('pagehide', () => send('pagehide'));\n    window.addEventListener('beforeunload', () => send('beforeunload'));\n    \n    // Fallback timeout\n    const fallbackTimeout = window.setTimeout(() => send('timeout'), 10000);\n\n    return () => {\n      window.clearTimeout(fallbackTimeout);\n      // Cleanup event listeners\n    };\n  }, []);\n\n  return null;\n}\n```\n\n**4. VISIT TRACKING API**\n```typescript\n// API endpoint for processing visit data\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { path, query, referrer, userAgent, language, languages, tz, \n            screenW, screenH, viewportW, viewportH, dpr, orientation,\n            deviceMemory, hardwareConcurrency, maxTouchPoints, connection,\n            paint, performance, interactionCounts, scrollDepth, \n            timeOnPageMs, visibility, storage, navigation } = body;\n\n    // Get visitor and session IDs from cookies\n    const cookies = req.cookies;\n    const headers = req.headers;\n    \n    const visitorId = cookies.get('vid')?.value ?? 'unknown';\n    const sessionId = cookies.get('sid')?.value ?? 'unknown';\n    \n    // Get UTM parameters\n    const eid = cookies.get('eid')?.value;\n    const utmSource = cookies.get('utm_source')?.value;\n    const utmMedium = cookies.get('utm_medium')?.value;\n    const utmCampaign = cookies.get('utm_campaign')?.value;\n    const utmTerm = cookies.get('utm_term')?.value;\n    const utmContent = cookies.get('utm_content')?.value;\n    const gclid = cookies.get('gclid')?.value;\n    const fbclid = cookies.get('fbclid')?.value;\n    const msclkid = cookies.get('msclkid')?.value;\n    \n    // Get geolocation data\n    const country = headers.get('x-vercel-ip-country');\n    const region = headers.get('x-vercel-ip-country-region');\n    const city = headers.get('x-vercel-ip-city');\n    const ip = headers.get('x-forwarded-for')?.split(',')[0]?.trim();\n    const ipHash = ip ? crypto.createHash('sha256').update(ip).digest('hex') : undefined;\n    \n    // Parse user agent for device info\n    const ua = userAgent || undefined;\n    const parsed = ua ? new UAParser(ua).getResult() : undefined;\n    const browser = parsed?.browser?.name;\n    const device = parsed?.device?.type || 'desktop';\n    const platform = parsed?.os?.name;\n\n    // Create visit record\n    await prisma.visit.create({\n      data: {\n        visitorId,\n        sessionId,\n        path,\n        query,\n        referrer,\n        eid,\n        utmSource,\n        utmMedium,\n        utmCampaign,\n        utmTerm,\n        utmContent,\n        gclid,\n        fbclid,\n        msclkid,\n        userAgent: ua,\n        language,\n        languages: languages ? JSON.stringify(languages) : undefined,\n        tz,\n        screenW,\n        screenH,\n        viewportW,\n        viewportH,\n        dpr,\n        platform,\n        device,\n        browser,\n        country,\n        region,\n        city,\n        ipHash,\n        connection: connection ? JSON.stringify(connection) : undefined,\n        deviceMemory,\n        hardwareConcurrency,\n        maxTouchPoints,\n        interactionCounts: interactionCounts ? JSON.stringify(interactionCounts) : undefined,\n        languages: languages ? JSON.stringify(languages) : undefined,\n        navigation: navigation ? JSON.stringify(navigation) : undefined,\n        orientation,\n        paint: paint ? JSON.stringify(paint) : undefined,\n        performance: performance ? JSON.stringify(performance) : undefined,\n        scrollDepth,\n        storage: storage ? JSON.stringify(storage) : undefined,\n        timeOnPageMs,\n        visibility: visibility ? JSON.stringify(visibility) : undefined\n      }\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Visit tracking error:', error);\n    return NextResponse.json({ error: 'Failed to track visit' }, { status: 500 });\n  }\n}\n```\n\n**5. LINK TRACKING SYSTEM**\n```typescript\n// Link tracking for campaign attribution\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });\n\n  const c = cookies();\n  const h = (k: string) => headers().get(k);\n  const vid = c.get('vid')?.value ?? 'unknown';\n  const sid = c.get('sid')?.value ?? 'unknown';\n\n  // Prefer explicit eid in the link; fallback to cookie\n  const eid = url.searchParams.get('eid') ?? c.get('eid')?.value ?? undefined;\n\n  // Get UTM parameters\n  const utmSource = c.get('utm_source')?.value;\n  const utmMedium = c.get('utm_medium')?.value;\n  const utmCampaign = c.get('utm_campaign')?.value;\n  const utmTerm = c.get('utm_term')?.value;\n  const utmContent = c.get('utm_content')?.value;\n\n  // Parse user agent\n  const ua = h('user-agent') || undefined;\n  const parsed = ua ? new UAParser(ua).getResult() : undefined;\n  const browser = parsed?.browser?.name;\n  const device = parsed?.device?.type || 'desktop';\n  const platform = parsed?.os?.name;\n\n  // Get geolocation\n  const referer = h('referer') || undefined;\n  const country = h('x-vercel-ip-country') || undefined;\n  const region = h('x-vercel-ip-country-region') || undefined;\n  const city = h('x-vercel-ip-city') || undefined;\n  const ip = h('x-forwarded-for')?.split(',')[0]?.trim();\n  const ipHash = ip ? crypto.createHash('sha256').update(ip).digest('hex') : undefined;\n\n  // Track the link click\n  try {\n    await prisma.visit.create({\n      data: {\n        visitorId: vid,\n        sessionId: sid,\n        path: '/api/l',\n        query: url.search,\n        referrer: referer,\n        eid, utmSource, utmMedium, utmCampaign, utmTerm, utmContent,\n        userAgent: ua, browser, device, platform,\n        country, region, city, ipHash,\n      },\n    });\n  } catch {\n    // Stay silent on errors\n  }\n\n  return NextResponse.redirect(to, { status: 302 });\n}\n```\n\n**6. PRIVACY COMPLIANCE**\n```typescript\n// Do Not Track detection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\n// Only collect analytics if user hasn't opted out\nif (!hasDoNotTrack()) {\n  // Collect analytics data\n  const analyticsData = collectVisitorData();\n  await prisma.visit.create({ data: analyticsData });\n}\n```\n\n**7. ANALYTICS DASHBOARD**\n```typescript\n// Admin analytics page with comprehensive metrics\nexport default async function AdminAnalyticsPage({ searchParams }) {\n  const [visits, rsvps, campaigns, audienceGroups] = await Promise.all([\n    prisma.visit.findMany({\n      include: {\n        _count: { select: { id: true } }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: 1000\n    }),\n    prisma.rsvp.findMany({\n      orderBy: { createdAt: 'desc' }\n    }),\n    prisma.campaign.findMany({\n      include: {\n        schedules: {\n          include: {\n            template: true,\n            group: true,\n          },\n        },\n        _count: {\n          select: {\n            schedules: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n    prisma.audienceGroup.findMany({\n      include: {\n        members: true,\n        _count: {\n          select: {\n            members: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n  ]);\n\n  // Calculate overview statistics\n  const totalVisits = visits.length;\n  const totalRSVPs = rsvps.length;\n  const conversionRate = totalVisits > 0 ? (totalRSVPs / totalVisits) * 100 : 0;\n  \n  // Calculate average session duration\n  const avgSessionDuration = visits.reduce((sum, visit) => {\n    if (visit.timeOnPageMs) {\n      return sum + visit.timeOnPageMs;\n    }\n    return sum;\n  }, 0) / Math.max(visits.length, 1);\n\n  // Calculate bounce rate\n  const bounceRate = visits.reduce((sum, visit) => {\n    if (visit.timeOnPageMs && visit.timeOnPageMs < 5000) {\n      return sum + 1;\n    }\n    return sum;\n  }, 0) / Math.max(visits.length, 1) * 100;\n\n  // Top countries\n  const countryCounts = visits.reduce((acc, visit) => {\n    if (visit.country) {\n      acc[visit.country] = (acc[visit.country] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Analytics dashboard with comprehensive metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total Visits</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">{totalVisits.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total RSVPs</h3>\n          <p className=\"text-3xl font-bold text-green-600\">{totalRSVPs.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Conversion Rate</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">{conversionRate.toFixed(1)}%</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Avg Session Duration</h3>\n          <p className=\"text-3xl font-bold text-orange-600\">\n            {Math.round(avgSessionDuration / 1000)}s\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\nThis comprehensive analytics system provides detailed insights into visitor behavior, marketing attribution, technical performance, and user engagement while respecting privacy preferences and providing actionable data for optimization."}


