{"instruction": "How does the security system work in this application?", "input": "Explain all security features including CSRF, rate limiting, and validation", "output": "I'll explain the comprehensive security system. Here's how all security features work:\n\n**SECURITY FEATURES SYSTEM**\n\n**1. CSRF PROTECTION**\n```typescript\n// CSRF Protection in RSVP API\nexport async function POST(req: Request) {\n  try {\n    // Get client IP for security logging\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection - Check origin and referer headers\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Allow requests from allowed origins or if both origin and referer are missing (direct API calls)\n    const isValidOrigin = !origin || allowedOrigins.some(allowed => origin.startsWith(allowed));\n    const isValidReferer = !referer || allowedOrigins.some(allowed => referer.startsWith(allowed));\n    \n    if (!isValidOrigin && !isValidReferer) {\n      logCSRFViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Invalid request origin' }, \n        403\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}\n```\n\n**2. RATE LIMITING SYSTEM**\n```typescript\n// Rate limiting with IP fingerprinting\nimport { checkRSVPRateLimit } from '@/lib/rate-limiter';\n\nexport async function POST(req: Request) {\n  try {\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    const userAgent = headers().get('user-agent') || '';\n    const acceptLanguage = headers().get('accept-language') || '';\n    const acceptEncoding = headers().get('accept-encoding') || '';\n    \n    // Rate limiting check with fingerprinting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Rate limit exceeded' }, \n        429\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}\n```\n\n**3. INPUT SANITIZATION**\n```typescript\n// Input sanitization to prevent XSS\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}\n```\n\n**4. SECURITY HEADERS**\n```typescript\n// Security headers implementation\nexport function createSecureResponse(\n  data: any, \n  status: number = 200,\n  headers: Record<string, string> = {}\n) {\n  const response = NextResponse.json(data, { status });\n  \n  // Security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  return response;\n}\n```\n\n**5. ADMIN SESSION SECURITY**\n```typescript\n// Admin session security\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}\n\nexport function verifySessionToken(token: string | undefined, secret: string) {\n  if (!token) return null;\n  \n  try {\n    const decoded = jwt.verify(token, secret, { algorithms: ['HS256'] }) as any;\n    \n    // Check if token is expired\n    if (decoded.exp && decoded.exp < Date.now() / 1000) {\n      return null;\n    }\n    \n    return { username: decoded.username, expiresAt: decoded.exp };\n  } catch (error) {\n    return null;\n  }\n}\n```\n\nThis comprehensive security system provides multiple layers of protection including CSRF prevention, rate limiting, input sanitization, security headers, and session management to ensure your RSVP application is secure against common attacks."}
