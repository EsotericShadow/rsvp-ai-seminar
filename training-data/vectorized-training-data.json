[
  {
    "id": "19-form-validation-accurate_1",
    "category": "Form Validation",
    "subcategory": "General",
    "title": "Form validation",
    "description": "How does form validation work? - Explain Zod schemas and input sanitization",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Input sanitization to prevent XSS attacks\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}\n\n// Custom string validation with sanitization\nconst sanitizedString = (minLength?: number) => {\n  if (minLength !== undefined) {\n    return z.string()\n      .min(minLength, `Minimum length is ${minLength} characters`)\n      .transform(sanitizeString);\n  }\n  return z.string().transform(sanitizeString);\n};\n\n// Phone number validation and formatting\nexport const phoneRegex = /^\\d{3}-\\d{3}-\\d{4}$/;\nconst phoneSchema = z.string()\n  .optional()\n  .refine((val) => !val || phoneRegex.test(val), {\n    message: 'Phone number must be in format 123-456-7890'\n  })\n  .transform((val) => val ? sanitizeString(val) : val);",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Complete RSVP form validation schema\n// src/lib/validators.ts\nexport const coreRsvpFormSchema = z.object({\n  firstName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'First name must be between 1 and 50 characters' }\n  ),\n  lastName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'Last name must be between 1 and 50 characters' }\n  ),\n  email: z.string()\n    .email('Valid email is required')\n    .max(254, 'Email must be less than 254 characters')\n    .transform(sanitizeString),\n  phone: phoneSchema,\n  organization: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 100,\n    { message: 'Organization name must be less than 100 characters' }\n  ),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE'], {\n    errorMap: () => ({ message: 'Please select an attendance status' })\n  }),\n  attendeeCount: z.number()\n    .int('Attendee count must be a whole number')\n    .min(1, 'At least 1 attendee is required')\n    .max(10, 'Maximum 10 attendees allowed'),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a dietary preference' })\n  }),\n  dietaryOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Dietary other must be less than 200 characters' }\n  ),\n  accessibilityNeeds: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 500,\n    { message: 'Accessibility needs must be less than 500 characters' }\n  ),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a referral source' })\n  }),\n  referralOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Referral other must be less than 200 characters' }\n  ),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 1000,\n    { message: 'Learning goal must be less than 1000 characters' }\n  )\n});\n\n// Conditional validation for RSVP form\nexport const rsvpSchema = coreRsvpFormSchema\n  .refine((data) => {\n    // If dietary preference is OTHER, dietaryOther is required\n    if (data.dietaryPreference === 'OTHER' && !data.dietaryOther) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Please specify dietary requirements when selecting OTHER',\n    path: ['dietaryOther']\n  })\n  .refine((data) => {\n    // If referral source is OTHER, referralOther is required\n    if (data.referralSource === 'OTHER' && !data.referralOther) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Please specify referral source when selecting OTHER',\n    path: ['referralOther']\n  })\n  .refine((data) => {\n    // If attendance status is YES, attendeeCount must be at least 1\n    if (data.attendanceStatus === 'YES' && data.attendeeCount < 1) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Attendee count must be at least 1 when attending',\n    path: ['attendeeCount']\n  });",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Analytics data validation schema\nconst analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});",
        "context": "Code snippet 3",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// React Hook Form integration with Zod\n// src/components/RsvpForm.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { coreRsvpFormSchema } from '@/lib/validators';\n\nexport function RsvpForm() {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const form = useForm<RsvpFormValues>({\n    resolver: zodResolver(coreRsvpFormSchema),\n    mode: 'onTouched', // Show errors on blur\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      attendanceStatus: 'YES',\n      attendeeCount: 1,\n      dietaryPreference: 'NONE',\n      accessibilityNeeds: '',\n      referralSource: 'WORD_OF_MOUTH',\n      wantsResources: false,\n      wantsAudit: false,\n      learningGoal: '',\n    },\n  });\n\n  // Step-by-step validation\n  const validateStep = async (idx: number) => {\n    if (idx === 0) {\n      // Contact information validation\n      return form.trigger(['firstName', 'lastName', 'email', 'phone'] as (keyof RsvpFormValues)[]);\n    }\n    if (idx === 1) {\n      // Attendance validation\n      const keys: (keyof RsvpFormValues)[] = ['attendanceStatus'];\n      if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n      return form.trigger(keys);\n    }\n    if (idx === 2) {\n      // Dietary & accessibility validation\n      const keys: (keyof RsvpFormValues)[] = ['dietaryPreference', 'accessibilityNeeds'];\n      if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n      return form.trigger(keys);\n    }\n    if (idx === 3) {\n      // Referral validation\n      const keys: (keyof RsvpFormValues)[] = ['referralSource'];\n      if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n      return form.trigger(keys);\n    }\n    if (idx === 4) {\n      // Additional options validation\n      return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal'] as (keyof RsvpFormValues)[]);\n    }\n    return true;\n  };\n\n  const onNext = async () => {\n    const ok = await validateStep(currentStep);\n    if (ok) {\n      setCurrentStep(prev => Math.min(prev + 1, 4));\n    }\n  };\n\n  const onSubmit = async (data: RsvpFormValues) => {\n    try {\n      // Validate complete form\n      const validatedData = rsvpSchema.parse(data);\n      \n      // Submit to API\n      const response = await fetch('/api/rsvp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(validatedData)\n      });\n      \n      if (response.ok) {\n        // Success handling\n        setCurrentStep(5); // Success step\n      } else {\n        // Error handling\n        const error = await response.json();\n        console.error('RSVP submission error:', error);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        // Handle validation errors\n        error.errors.forEach(err => {\n          form.setError(err.path[0] as keyof RsvpFormValues, {\n            message: err.message\n          });\n        });\n      } else {\n        console.error('Unexpected error:', error);\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Form steps and validation */}\n      {currentStep === 0 && (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              First Name *\n            </label>\n            <input\n              {...form.register('firstName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.firstName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your first name\"\n            />\n            {form.formState.errors.firstName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.firstName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Last Name *\n            </label>\n            <input\n              {...form.register('lastName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.lastName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your last name\"\n            />\n            {form.formState.errors.lastName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.lastName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email Address *\n            </label>\n            <input\n              {...form.register('email')}\n              type=\"email\"\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.email ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your email address\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Phone Number\n            </label>\n            <PhoneField\n              value={form.watch('phone')}\n              onChange={(value) => form.setValue('phone', value)}\n              onBlur={() => form.trigger('phone')}\n            />\n            {form.formState.errors.phone && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.phone.message}\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Other form steps... */}\n      \n      <div className=\"flex justify-between\">\n        <button\n          type=\"button\"\n          onClick={() => setCurrentStep(prev => Math.max(prev - 1, 0))}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n          disabled={currentStep === 0}\n        >\n          Previous\n        </button>\n        \n        {currentStep < 4 ? (\n          <button\n            type=\"button\"\n            onClick={onNext}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Next\n          </button>\n        ) : (\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={form.formState.isSubmitting}\n          >\n            {form.formState.isSubmitting ? 'Submitting...' : 'Submit RSVP'}\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}",
        "context": "Code snippet 4",
        "purpose": "Module import/export"
      },
      {
        "language": "typescript",
        "code": "// API endpoint validation\n// src/app/api/rsvp/route.ts\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    \n    // Validate with Zod schema\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Additional security checks\n    if (validatedData.email.length > 254) {\n      logInvalidInput(clientIP, '/api/rsvp', { email: 'too long' });\n      return createSecureResponse(\n        { message: 'Invalid email format' }, \n        400\n      );\n    }\n    \n    // Check for potential XSS in text fields\n    const textFields = ['firstName', 'lastName', 'organization', 'learningGoal'];\n    for (const field of textFields) {\n      if (validatedData[field] && /<script|javascript:|on\\w+=/i.test(validatedData[field])) {\n        logXSSAttempt(clientIP, '/api/rsvp', validatedData[field]);\n        return createSecureResponse(\n          { message: 'Invalid input detected' }, \n          400\n        );\n      }\n    }\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data...\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors = error.errors.reduce((acc, err) => {\n        acc[err.path[0]] = err.message;\n        return acc;\n      }, {} as Record<string, string>);\n      \n      return NextResponse.json({\n        error: 'Validation failed',\n        fieldErrors\n      }, { status: 400 });\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json({\n        error: 'Email already exists',\n        fieldErrors: { email: 'This email has already been used for an RSVP' }\n      }, { status: 409 });\n    }\n    \n    console.error('RSVP processing error:', error);\n    return NextResponse.json({\n      error: 'Internal server error'\n    }, { status: 500 });\n  }\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Phone field with formatting and validation\n// src/components/RsvpForm.tsx\nfunction PhoneField({\n  value,\n  onChange,\n  onBlur,\n  id = \"phone\",\n}: {\n  value?: string;\n  onChange: (v: string) => void;\n  onBlur?: () => void;\n  id?: string;\n}) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Comprehensive error handling for validation\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n\n// Client-side error display\nconst ErrorMessage = ({ error }: { error: string }) => (\n  <div className=\"mt-1 text-sm text-red-600\">\n    {error}\n  </div>\n);\n\n// Field error display\nconst FieldError = ({ field, errors }: { field: string; errors: any }) => {\n  if (errors[field]) {\n    return <ErrorMessage error={errors[field]} />;\n  }\n  return null;\n};",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. RSVP FORM SCHEMA**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. ANALYTICS VALIDATION**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. FORM VALIDATION IN REACT**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. API VALIDATION**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. PHONE FIELD COMPONENT**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. VALIDATION ERROR HANDLING**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. INPUT SANITIZATION**\n```typescript\n// Input sanitization to prevent XSS attacks\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. RSVP FORM SCHEMA**\n```typescript\n// Complete RSVP form validation schema\n// src/lib/validators.ts\nexport const coreRsvpFormSchema = z.object({\n  firstName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'First name must be between 1 and 50 characters' }\n  ),\n  lastName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'Last name must be between 1 and 50 characters' }\n  ),\n  email: z.string()\n    .email('Valid email is required')\n    .max(254, 'Email must be less than 254 characters')\n    .transform(sanitizeString),\n  phone: phoneSchema,\n  organization: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 100,\n    { message: 'Organization name must be less than 100 characters' }\n  ),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE'], {\n    errorMap: () => ({ message: 'Please select an attendance status' })\n  }),\n  attendeeCount: z.number()\n    .int('Attendee count must be a whole number')\n    .min(1, 'At least 1 attendee is required')\n    .max(10, 'Maximum 10 attendees allowed'),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a dietary preference' })\n  }),\n  dietaryOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Dietary other must be less than 200 characters' }\n  ),\n  accessibilityNeeds: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 500,\n    { message: 'Accessibility needs must be less than 500 characters' }\n  ),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a referral source' })\n  }),\n  referralOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Referral other must be less than 200 characters' }\n  ),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 1000,\n    { message: 'Learning goal must be less than 1000 characters' }\n  )\n});",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "3. ANALYTICS VALIDATION**\n```typescript\n// Analytics data validation schema\nconst analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. FORM VALIDATION IN REACT**\n```typescript\n// React Hook Form integration with Zod\n// src/components/RsvpForm.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { coreRsvpFormSchema } from '@/lib/validators';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. API VALIDATION**\n```typescript\n// API endpoint validation\n// src/app/api/rsvp/route.ts\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    \n    // Validate with Zod schema\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Additional security checks\n    if (validatedData.email.length > 254) {\n      logInvalidInput(clientIP, '/api/rsvp', { email: 'too long' });\n      return createSecureResponse(\n        { message: 'Invalid email format' }, \n        400\n      );\n    }\n    \n    // Check for potential XSS in text fields\n    const textFields = ['firstName', 'lastName', 'organization', 'learningGoal'];\n    for (const field of textFields) {\n      if (validatedData[field] && /<script|javascript:|on\\w+=/i.test(validatedData[field])) {\n        logXSSAttempt(clientIP, '/api/rsvp', validatedData[field]);\n        return createSecureResponse(\n          { message: 'Invalid input detected' }, \n          400\n        );\n      }\n    }\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data...\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors = error.errors.reduce((acc, err) => {\n        acc[err.path[0]] = err.message;\n        return acc;\n      }, {} as Record<string, string>);\n      \n      return NextResponse.json({\n        error: 'Validation failed',\n        fieldErrors\n      }, { status: 400 });\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json({\n        error: 'Email already exists',\n        fieldErrors: { email: 'This email has already been used for an RSVP' }\n      }, { status: 409 });\n    }\n    \n    console.error('RSVP processing error:', error);\n    return NextResponse.json({\n      error: 'Internal server error'\n    }, { status: 500 });\n  }\n}\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "6. PHONE FIELD COMPONENT**\n```typescript\n// Phone field with formatting and validation\n// src/components/RsvpForm.tsx\nfunction PhoneField({\n  value,\n  onChange,\n  onBlur,\n  id = \"phone\",\n}: {\n  value?: string;\n  onChange: (v: string) => void;\n  onBlur?: () => void;\n  id?: string;\n}) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "7. VALIDATION ERROR HANDLING**\n```typescript\n// Comprehensive error handling for validation\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**1. INPUT SANITIZATION**\n```typescript\n// Input sanitization to prevent XSS attacks\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Complete RSVP form validation schema\n// src/lib/validators.ts\nexport const coreRsvpFormSchema = z.object({\n  firstName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'First name must be between 1 and 50 characters' }\n  ),\n  lastName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'Last name must be between 1 and 50 characters' }\n  ),\n  email: z.string()\n    .email('Valid email is required')\n    .max(254, 'Email must be less than 254 characters')\n    .transform(sanitizeString),\n  phone: phoneSchema,\n  organization: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 100,\n    { message: 'Organization name must be less than 100 characters' }\n  ),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE'], {\n    errorMap: () => ({ message: 'Please select an attendance status' })\n  }),\n  attendeeCount: z.number()\n    .int('Attendee count must be a whole number')\n    .min(1, 'At least 1 attendee is required')\n    .max(10, 'Maximum 10 attendees allowed'),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a dietary preference' })\n  }),\n  dietaryOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Dietary other must be less than 200 characters' }\n  ),\n  accessibilityNeeds: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 500,\n    { message: 'Accessibility needs must be less than 500 characters' }\n  ),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a referral source' })\n  }),\n  referralOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Referral other must be less than 200 characters' }\n  ),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 1000,\n    { message: 'Learning goal must be less than 1000 characters' }\n  )\n});",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Analytics data validation schema\nconst analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// React Hook Form integration with Zod\n// src/components/RsvpForm.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { coreRsvpFormSchema } from '@/lib/validators';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Form steps and validation */}\n      {currentStep === 0 && (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              First Name *\n            </label>\n            <input\n              {...form.register('firstName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.firstName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your first name\"\n            />\n            {form.formState.errors.firstName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.firstName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Last Name *\n            </label>\n            <input\n              {...form.register('lastName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.lastName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your last name\"\n            />\n            {form.formState.errors.lastName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.lastName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email Address *\n            </label>\n            <input\n              {...form.register('email')}\n              type=\"email\"\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.email ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your email address\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Phone Number\n            </label>\n            <PhoneField\n              value={form.watch('phone')}\n              onChange={(value) => form.setValue('phone', value)}\n              onBlur={() => form.trigger('phone')}\n            />\n            {form.formState.errors.phone && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.phone.message}\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Other form steps... */}\n      \n      <div className=\"flex justify-between\">\n        <button\n          type=\"button\"\n          onClick={() => setCurrentStep(prev => Math.max(prev - 1, 0))}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n          disabled={currentStep === 0}\n        >\n          Previous\n        </button>\n        \n        {currentStep < 4 ? (\n          <button\n            type=\"button\"\n            onClick={onNext}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Next\n          </button>\n        ) : (\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={form.formState.isSubmitting}\n          >\n            {form.formState.isSubmitting ? 'Submitting...' : 'Submit RSVP'}\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// API endpoint validation\n// src/app/api/rsvp/route.ts\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    \n    // Validate with Zod schema\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Additional security checks\n    if (validatedData.email.length > 254) {\n      logInvalidInput(clientIP, '/api/rsvp', { email: 'too long' });\n      return createSecureResponse(\n        { message: 'Invalid email format' }, \n        400\n      );\n    }\n    \n    // Check for potential XSS in text fields\n    const textFields = ['firstName', 'lastName', 'organization', 'learningGoal'];\n    for (const field of textFields) {\n      if (validatedData[field] && /<script|javascript:|on\\w+=/i.test(validatedData[field])) {\n        logXSSAttempt(clientIP, '/api/rsvp', validatedData[field]);\n        return createSecureResponse(\n          { message: 'Invalid input detected' }, \n          400\n        );\n      }\n    }\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data...\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors = error.errors.reduce((acc, err) => {\n        acc[err.path[0]] = err.message;\n        return acc;\n      }, {} as Record<string, string>);\n      \n      return NextResponse.json({\n        error: 'Validation failed',\n        fieldErrors\n      }, { status: 400 });\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json({\n        error: 'Email already exists',\n        fieldErrors: { email: 'This email has already been used for an RSVP' }\n      }, { status: 409 });\n    }\n    \n    console.error('RSVP processing error:', error);\n    return NextResponse.json({\n      error: 'Internal server error'\n    }, { status: 500 });\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Phone field with formatting and validation\n// src/components/RsvpForm.tsx\nfunction PhoneField({\n  value,\n  onChange,\n  onBlur,\n  id = \"phone\",\n}: {\n  value?: string;\n  onChange: (v: string) => void;\n  onBlur?: () => void;\n  id?: string;\n}) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```typescript\n// Comprehensive error handling for validation\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- 1, 0))}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n          disabled={currentStep === 0}\n        >\n          Previous\n        </button>\n        \n        {currentStep < 4 ? (\n          <button\n            type=\"button\"\n            onClick={onNext}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Next\n          </button>\n        ) : (\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={form.formState.isSubmitting}\n          >\n            {form.formState.isSubmitting ? 'Submitting...' : 'Submit RSVP'}\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}\n```",
        "type": "item",
        "category": "transmission"
      }
    ],
    "interconnections": [
      "RSVP Data Management",
      "Security Features"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        // Handle validation errors\n        error.errors.forEach(err => {\n          form.setError(err.path[0] as keyof RsvpFormValues, {\n            message: err.message\n          });\n        });\n      } else {\n        console.error('Unexpected error:', error);\n      }\n    }\n  };",
      "'Validation failed',\n        fieldErrors\n      }, { status: 400 });\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json({\n        error: 'Email already exists',\n        fieldErrors: { email: 'This email has already been used for an RSVP' }\n      }, { status: 409 });\n    }\n    \n    console.error('RSVP processing error:', error);\n    return NextResponse.json({\n      error: 'Internal server error'\n    }, { status: 500 });\n  }\n}\n```",
      "any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};",
      "string }) => (\n  <div className=\"mt-1 text-sm text-red-600\">\n    {error}\n  </div>\n);"
    ],
    "related_apis": [
      "/api/rsvp',",
      "/api/rsvp/route.ts"
    ],
    "related_components": [
      "RsvpForm.tsx",
      "validators.ts",
      "RsvpForm.ts",
      "route.ts",
      "response.js",
      "req.js",
      "NextResponse.js",
      "src/lib/validators.ts",
      "src/components/RsvpForm.tsx",
      "src/app/api/rsvp/route.ts",
      "components/RsvpForm.tsx"
    ],
    "tags": [
      "zod",
      "prisma",
      "form-validation",
      "weaviate",
      "analytics",
      "typescript",
      "authentication",
      "tailwind",
      "react",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "12-security-features-accurate_1",
    "category": "Security Features",
    "subcategory": "General",
    "title": "The security system work in this application",
    "description": "How does the security system work in this application? - Explain all security features including CSRF, rate limiting, and validation",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// CSRF Protection in RSVP API\nexport async function POST(req: Request) {\n  try {\n    // Get client IP for security logging\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection - Check origin and referer headers\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Allow requests from allowed origins or if both origin and referer are missing (direct API calls)\n    const isValidOrigin = !origin || allowedOrigins.some(allowed => origin.startsWith(allowed));\n    const isValidReferer = !referer || allowedOrigins.some(allowed => referer.startsWith(allowed));\n    \n    if (!isValidOrigin && !isValidReferer) {\n      logCSRFViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Invalid request origin' }, \n        403\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}",
        "context": "Code snippet 1",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Rate limiting with IP fingerprinting\nimport { checkRSVPRateLimit } from '@/lib/rate-limiter';\n\nexport async function POST(req: Request) {\n  try {\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    const userAgent = headers().get('user-agent') || '';\n    const acceptLanguage = headers().get('accept-language') || '';\n    const acceptEncoding = headers().get('accept-encoding') || '';\n    \n    // Rate limiting check with fingerprinting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Rate limit exceeded' }, \n        429\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Input sanitization to prevent XSS\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}",
        "context": "Code snippet 3",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Security headers implementation\nexport function createSecureResponse(\n  data: any, \n  status: number = 200,\n  headers: Record<string, string> = {}\n) {\n  const response = NextResponse.json(data, { status });\n  \n  // Security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  return response;\n}",
        "context": "Code snippet 4",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Admin session security\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}\n\nexport function verifySessionToken(token: string | undefined, secret: string) {\n  if (!token) return null;\n  \n  try {\n    const decoded = jwt.verify(token, secret, { algorithms: ['HS256'] }) as any;\n    \n    // Check if token is expired\n    if (decoded.exp && decoded.exp < Date.now() / 1000) {\n      return null;\n    }\n    \n    return { username: decoded.username, expiresAt: decoded.exp };\n  } catch (error) {\n    return null;\n  }\n}",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. RATE LIMITING SYSTEM**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. INPUT SANITIZATION**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. SECURITY HEADERS**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. ADMIN SESSION SECURITY**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. CSRF PROTECTION**\n```typescript\n// CSRF Protection in RSVP API\nexport async function POST(req: Request) {\n  try {\n    // Get client IP for security logging\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection - Check origin and referer headers\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Allow requests from allowed origins or if both origin and referer are missing (direct API calls)\n    const isValidOrigin = !origin || allowedOrigins.some(allowed => origin.startsWith(allowed));\n    const isValidReferer = !referer || allowedOrigins.some(allowed => referer.startsWith(allowed));\n    \n    if (!isValidOrigin && !isValidReferer) {\n      logCSRFViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Invalid request origin' }, \n        403\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "2. RATE LIMITING SYSTEM**\n```typescript\n// Rate limiting with IP fingerprinting\nimport { checkRSVPRateLimit } from '@/lib/rate-limiter';",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "3. INPUT SANITIZATION**\n```typescript\n// Input sanitization to prevent XSS\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. SECURITY HEADERS**\n```typescript\n// Security headers implementation\nexport function createSecureResponse(\n  data: any, \n  status: number = 200,\n  headers: Record<string, string> = {}\n) {\n  const response = NextResponse.json(data, { status });\n  \n  // Security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  return response;\n}\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "5. ADMIN SESSION SECURITY**\n```typescript\n// Admin session security\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. CSRF PROTECTION**\n```typescript\n// CSRF Protection in RSVP API\nexport async function POST(req: Request) {\n  try {\n    // Get client IP for security logging\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection - Check origin and referer headers\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Allow requests from allowed origins or if both origin and referer are missing (direct API calls)\n    const isValidOrigin = !origin || allowedOrigins.some(allowed => origin.startsWith(allowed));\n    const isValidReferer = !referer || allowedOrigins.some(allowed => referer.startsWith(allowed));\n    \n    if (!isValidOrigin && !isValidReferer) {\n      logCSRFViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Invalid request origin' }, \n        403\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Rate limiting with IP fingerprinting\nimport { checkRSVPRateLimit } from '@/lib/rate-limiter';",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Input sanitization to prevent XSS\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Security headers implementation\nexport function createSecureResponse(\n  data: any, \n  status: number = 200,\n  headers: Record<string, string> = {}\n) {\n  const response = NextResponse.json(data, { status });\n  \n  // Security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  return response;\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Admin session security\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Check origin and referer headers\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Allow requests from allowed origins or if both origin and referer are missing (direct API calls)\n    const isValidOrigin = !origin || allowedOrigins.some(allowed => origin.startsWith(allowed));\n    const isValidReferer = !referer || allowedOrigins.some(allowed => referer.startsWith(allowed));\n    \n    if (!isValidOrigin && !isValidReferer) {\n      logCSRFViolation(clientIP, '/api/rsvp');\n      return createSecureResponse(\n        { message: 'Invalid request origin' }, \n        403\n      );\n    }\n    \n    // Continue with request processing...\n  } catch (error) {\n    // Error handling\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      }
    ],
    "interconnections": [
      "Admin Authentication",
      "Middleware Features",
      "Form Validation"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/rsvp');"
    ],
    "related_components": [
      "validators.ts",
      "NextResponse.js",
      "src/lib/validators.ts"
    ],
    "tags": [
      "zod",
      "weaviate",
      "analytics",
      "typescript",
      "authentication",
      "security",
      "security-features"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_1",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to draft",
    "description": "Change campaign status to DRAFT - Set campaign-123 status to DRAFT",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"DRAFT\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign is not ready to send\n- Can be edited freely\n- No active schedules\n- Safe to modify steps and configuration\n- No emails will be sent",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Initial campaign creation\n- Making changes to campaign configuration\n- Testing campaign setup\n- Preparing campaign for scheduling",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- **DRAFT → SCHEDULED**: When ready to send at specific time\n- **DRAFT → SENDING**: When ready to send immediately\n- **DRAFT → CANCELLED**: When campaign is no longer needed",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Campaign is not ready to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Can be edited freely",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- No active schedules",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Safe to modify steps and configuration",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- No emails will be sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Initial campaign creation",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Making changes to campaign configuration",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Testing campaign setup",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Preparing campaign for scheduling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **DRAFT → SCHEDULED**: When ready to send at specific time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **DRAFT → SENDING**: When ready to send immediately",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **DRAFT → CANCELLED**: When campaign is no longer needed",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_3",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to scheduled",
    "description": "Change campaign status to SCHEDULED - Schedule campaign-123 to send tomorrow at 9 AM",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"SCHEDULED\",\n  \"steps\": [\n    {\n      \"templateId\": \"template-456\",\n      \"groupId\": \"group-789\",\n      \"sendAt\": \"2025-01-16T09:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"SCHEDULED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"SCHEDULED\",\n        \"sendAt\": \"2025-01-16T09:00:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign is ready to send at specified time\n- Cannot be edited (must change to DRAFT first)\n- Has active schedules with send times\n- Will automatically start sending at scheduled time",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Campaign must have valid steps\n- Steps must have templateId and groupId\n- Send times must be in the future\n- All required fields must be complete",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `sendAt`: \"2025-01-16T09:00:00Z\" (tomorrow at 9 AM UTC)\n- `timeZone`: \"America/Vancouver\" (local timezone)\n- `throttlePerMinute`: 60 (sending rate)",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Campaign is ready to send at specified time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Cannot be edited (must change to DRAFT first)",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Has active schedules with send times",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Will automatically start sending at scheduled time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Campaign must have valid steps",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Steps must have templateId and groupId",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Send times must be in the future",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- All required fields must be complete",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `sendAt`: \"2025-01-16T09:00:00Z\" (tomorrow at 9 AM UTC)",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `timeZone`: \"America/Vancouver\" (local timezone)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute`: 60 (sending rate)",
        "type": "item",
        "category": "transmission"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_5",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to sending",
    "description": "Change campaign status to SENDING - Start sending campaign-123 immediately",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"SENDING\"\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"SENDING\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"SENDING\",\n        \"sendAt\": \"2025-01-15T11:30:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign is actively being sent\n- Cannot be edited (must pause first)\n- Emails are being sent according to throttling rules\n- Progress can be monitored",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Emails are sent at the specified throttle rate\n- Each email is processed individually\n- Delivery status is tracked\n- Errors are logged and handled",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `throttlePerMinute`: 60 emails per minute\n- Sending is distributed evenly across the minute\n- Rate limiting prevents overwhelming email servers",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- Check delivery status\n- Monitor bounce rates\n- Track open and click rates\n- Handle delivery errors",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Campaign is actively being sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Cannot be edited (must pause first)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Emails are being sent according to throttling rules",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Progress can be monitored",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Emails are sent at the specified throttle rate",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Each email is processed individually",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Delivery status is tracked",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Errors are logged and handled",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute`: 60 emails per minute",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Sending is distributed evenly across the minute",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Rate limiting prevents overwhelming email servers",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Check delivery status",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Monitor bounce rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Track open and click rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Handle delivery errors",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "typescript",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_7",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to paused",
    "description": "Change campaign status to PAUSED - Pause campaign-123 temporarily",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"PAUSED\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"PAUSED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"PAUSED\",\n        \"sendAt\": \"2025-01-15T11:30:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign is temporarily stopped\n- No new emails are sent\n- Can be resumed later\n- Progress is preserved\n- Can be edited (change to DRAFT first)",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Temporary issues with email delivery\n- Need to make quick changes\n- Rate limiting concerns\n- Manual review required",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- **PAUSED → SENDING**: Resume sending from where it stopped\n- **PAUSED → DRAFT**: Make changes to campaign\n- **PAUSED → CANCELLED**: Stop campaign permanently",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Change status back to SENDING\n- Sending continues from last position\n- No duplicate emails are sent\n- Throttling rules still apply",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Campaign is temporarily stopped",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- No new emails are sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be resumed later",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Progress is preserved",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be edited (change to DRAFT first)",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Temporary issues with email delivery",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Need to make quick changes",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Rate limiting concerns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Manual review required",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **PAUSED → SENDING**: Resume sending from where it stopped",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **PAUSED → DRAFT**: Make changes to campaign",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- **PAUSED → CANCELLED**: Stop campaign permanently",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Change status back to SENDING",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Sending continues from last position",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- No duplicate emails are sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Throttling rules still apply",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_9",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to completed",
    "description": "Change campaign status to COMPLETED - Mark campaign-123 as completed",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"COMPLETED\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"COMPLETED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"COMPLETED\",\n        \"sendAt\": \"2025-01-15T11:30:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign has finished sending\n- All scheduled emails have been sent\n- Cannot be edited or resumed\n- Final status for successful campaigns",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- All scheduled steps have been sent\n- No more emails to send\n- Campaign has reached its end\n- Successfully delivered to all recipients",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- Final delivery statistics\n- Total emails sent\n- Success/failure rates\n- Performance metrics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Review delivery statistics\n- Analyze performance metrics\n- Archive campaign data\n- Plan follow-up campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Campaigns are typically marked as COMPLETED automatically when all scheduled steps are finished. Manual completion is usually for administrative purposes.",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign has finished sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- All scheduled emails have been sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Cannot be edited or resumed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Final status for successful campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- All scheduled steps have been sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- No more emails to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Campaign has reached its end",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Successfully delivered to all recipients",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Final delivery statistics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Success/failure rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Performance metrics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Review delivery statistics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Analyze performance metrics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Archive campaign data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Plan follow-up campaigns",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid",
      "typescript"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "04-campaign-status-accurate_11",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Change campaign status to cancelled",
    "description": "Change campaign status to CANCELLED - Cancel campaign-123 permanently",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"CANCELLED\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"CANCELLED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"CANCELLED\",\n        \"sendAt\": \"2025-01-15T11:30:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Campaign is permanently stopped\n- No emails will be sent\n- Cannot be resumed or edited\n- Final status for cancelled campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Campaign is no longer needed\n- Event has been cancelled\n- Content is outdated\n- Administrative decision to stop",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **CANCELLED vs PAUSED**: CANCELLED is permanent, PAUSED is temporary\n- **CANCELLED vs COMPLETED**: CANCELLED means stopped, COMPLETED means finished\n- **CANCELLED vs DRAFT**: CANCELLED means abandoned, DRAFT means in progress",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Campaign data is preserved\n- No further actions are taken\n- Can be used for reference\n- May be archived or deleted",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "* Cancelling a campaign is irreversible. Make sure this is the intended action before proceeding.",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign is permanently stopped",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- No emails will be sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Cannot be resumed or edited",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Final status for cancelled campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign is no longer needed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Event has been cancelled",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Content is outdated",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Administrative decision to stop",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **CANCELLED vs PAUSED**: CANCELLED is permanent, PAUSED is temporary",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **CANCELLED vs COMPLETED**: CANCELLED means stopped, COMPLETED means finished",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **CANCELLED vs DRAFT**: CANCELLED means abandoned, DRAFT means in progress",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign data is preserved",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- No further actions are taken",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be used for reference",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- May be archived or deleted",
        "type": "item",
        "category": "deletion"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "13-admin-authentication-accurate_1",
    "category": "Admin Authentication",
    "subcategory": "Authentication",
    "title": "Admin authentication",
    "description": "How does admin authentication work? - Explain the admin login and session management system",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Admin configuration management\n// src/lib/admin-auth.ts\ntype Config = {\n  username: string;\n  passwordHash: string;\n  sessionSecret: string;\n}\n\nexport function getAdminConfig(): Config | null {\n  const username = process.env.ADMIN_USER;\n  const passwordHash = process.env.ADMIN_PASSWORD_HASH;\n  const sessionSecret = process.env.ADMIN_SESSION_SECRET;\n  \n  if (!username || !passwordHash || !sessionSecret) {\n    return null;\n  }\n  \n  return {\n    username,\n    passwordHash,\n    sessionSecret\n  };\n}",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// JWT session token creation and verification\nimport jwt from 'jsonwebtoken';\n\nexport function createSessionToken(username: string, secret: string, expiresAt: number) {\n  const payload = { username, exp: expiresAt };\n  return jwt.sign(payload, secret, { algorithm: 'HS256' });\n}\n\nexport function verifySessionToken(token: string | undefined, secret: string) {\n  if (!token) return null;\n  \n  try {\n    const decoded = jwt.verify(token, secret, { algorithms: ['HS256'] }) as any;\n    \n    // Check if token is expired\n    if (decoded.exp && decoded.exp < Date.now() / 1000) {\n      return null;\n    }\n    \n    return { username: decoded.username, expiresAt: decoded.exp };\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function getNewExpiry() {\n  return Date.now() + (30 * 60 * 1000); // 30 minutes\n}\n\nexport function getSessionCookieName() {\n  return 'admin_session';\n}",
        "context": "Code snippet 2",
        "purpose": "Module import/export"
      },
      {
        "language": "typescript",
        "code": "// Admin login page with form handling\n// src/app/admin/login/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport bcrypt from 'bcryptjs';\nimport { getAdminConfig, createSessionToken, getNewExpiry, getSessionCookieName } from '@/lib/admin-auth';\n\ntype SearchParams = { [key: string]: string | string[] | undefined }\n\nasync function loginAction(formData: FormData) {\n  'use server'\n\n  const config = getAdminConfig()\n  if (!config) {\n    redirect('/admin/login?error=config')\n  }\n\n  const { username: expectedUsername, passwordHash, sessionSecret } = config\n\n  const username = String(formData.get('username') || '')\n  const password = String(formData.get('password') || '')\n  const nextRaw = String(formData.get('next') || '/admin/analytics')\n  const next = nextRaw.startsWith('/') ? nextRaw : '/admin/analytics'\n\n  if (username !== expectedUsername) {\n    redirect(`/admin/login?error=invalid&next=${encodeURIComponent(next)}`)\n  }\n\n  const ok = await bcrypt.compare(password, passwordHash)\n\n  if (!ok) {\n    redirect(`/admin/login?error=invalid&next=${encodeURIComponent(next)}`)\n  }\n\n  const expiresAt = getNewExpiry()\n  const token = createSessionToken(expectedUsername, sessionSecret, expiresAt)\n\n  cookies().set({\n    name: getSessionCookieName(),\n    value: token,\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: process.env.NODE_ENV === 'production',\n    expires: new Date(expiresAt),\n  })\n\n  redirect(next)\n}\n\nexport default function AdminLoginPage({ searchParams }: { searchParams: SearchParams }) {\n  const { error, next, loggedOut } = normalizeParams(searchParams)\n\n  const config = getAdminConfig()\n  if (!config) {\n    return (\n      <div className=\"min-h-[100svh] grid place-items-center bg-neutral-950 text-neutral-100 p-6\">\n        <div className=\"w-full max-w-lg glass rounded-2xl p-6\">\n          <h1 className=\"text-xl font-semibold mb-2\">Admin login not configured</h1>\n          <p className=\"text-sm text-neutral-400\">\n            Set <code>ADMIN_USER</code>, <code>ADMIN_PASSWORD_HASH</code>, and <code>ADMIN_SESSION_SECRET</code> in your environment.\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-[100svh] grid place-items-center bg-neutral-950 text-neutral-100 p-6\">\n      <div className=\"w-full max-w-sm glass rounded-2xl p-6\">\n        <h1 className=\"text-xl font-semibold mb-4 text-center\">Admin Login</h1>\n        {loggedOut ? (\n          <div className=\"mb-4 rounded-lg bg-emerald-500/10 text-emerald-300 px-3 py-2 text-sm\">\n            Signed out successfully.\n          </div>\n        ) : null}\n        {error ? (\n          <div className=\"mb-4 rounded-lg bg-red-500/10 text-red-300 px-3 py-2 text-sm\">\n            {error === 'invalid' && 'Invalid username or password.'}\n            {error === 'config' && 'Admin credentials are not configured.'}\n          </div>\n        ) : null}\n        <form action={loginAction} className=\"space-y-4\">\n          <input type=\"hidden\" name=\"next\" value={next} />\n          <div>\n            <label className=\"text-sm text-neutral-400 block mb-1\" htmlFor=\"username\">Username</label>\n            <input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              autoComplete=\"username\"\n              className=\"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-3 text-white placeholder:text-neutral-400 outline-none focus:ring-2 ring-brand-sage focus:border-brand-sage transition-colors duration-200 min-h-[44px]\"\n              placeholder=\"Enter username\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"text-sm text-neutral-400 block mb-1\" htmlFor=\"password\">Password</label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"current-password\"\n              className=\"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-3 text-white placeholder:text-neutral-400 outline-none focus:ring-2 ring-brand-sage focus:border-brand-sage transition-colors duration-200 min-h-[44px]\"\n              placeholder=\"Enter password\"\n              required\n            />\n          </div>\n          <button \n            type=\"submit\"\n            className=\"w-full rounded-lg bg-brand-ink hover:bg-brand-mid active:bg-brand-mid px-3 py-3 font-medium text-white transition-all duration-200 active:scale-95 touch-manipulation min-h-[44px] focus:outline-none focus:ring-2 focus:ring-brand-sage focus:ring-offset-2 focus:ring-offset-neutral-950\"\n          >\n            <span className=\"flex items-center justify-center\">\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1\" />\n              </svg>\n              Sign In\n            </span>\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}",
        "context": "Code snippet 3",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// Admin session verification\n// src/lib/adminSession.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\n\nexport function requireAdminSession() {\n  const token = cookies().get(getSessionCookieName())?.value;\n  const config = getAdminConfig();\n  \n  if (!config) {\n    return { response: NextResponse.json({ error: 'Admin not configured' }, { status: 500 }) };\n  }\n  \n  const session = verifySessionToken(token, config.sessionSecret);\n  if (!session) {\n    return { response: NextResponse.json({ error: 'Unauthorized' }, { status: 401 }) };\n  }\n  \n  return { session };\n}",
        "context": "Code snippet 4",
        "purpose": "Module import/export"
      },
      {
        "language": "typescript",
        "code": "// Admin logout endpoint\n// src/app/admin/logout/route.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getSessionCookieName } from '@/lib/admin-auth';\n\nexport async function POST(request: Request) {\n  try {\n    // Clear the session cookie\n    cookies().set({\n      name: getSessionCookieName(),\n      value: '',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: process.env.NODE_ENV === 'production',\n      expires: new Date(0), // Expire immediately\n    });\n    \n    return NextResponse.json({ success: true, message: 'Logged out successfully' });\n  } catch (error) {\n    console.error('Logout error:', error);\n    return NextResponse.json({ error: 'Logout failed' }, { status: 500 });\n  }\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Admin route protection in middleware\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Admin route protection\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    const token = req.cookies.get(getSessionCookieName())?.value;\n    const config = getAdminConfig();\n    \n    if (!config) {\n      return NextResponse.redirect(new URL('/admin/login?error=config', req.url));\n    }\n    \n    const session = verifySessionToken(token, config.sessionSecret);\n    if (!session) {\n      const loginUrl = new URL('/admin/login', req.url);\n      loginUrl.searchParams.set('next', req.nextUrl.pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n  \n  return res;\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Admin API route protection\n// src/app/api/admin/campaign/dashboard/route.ts\nimport { NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport { listCampaignData } from '@/lib/campaigns';\n\nexport async function GET() {\n  const auth = requireAdminSession();\n  if ('response' in auth) return auth.response;\n\n  const data = await listCampaignData();\n  return NextResponse.json(data);\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Admin campaign page with session verification\n// src/app/admin/campaign/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\nimport { listCampaignData } from '@/lib/campaigns';\n\nexport const dynamic = \"force-dynamic\";\nexport const runtime = \"nodejs\";\n\nexport default async function AdminCampaignPage() {\n  const adminConfig = getAdminConfig();\n  if (!adminConfig) {\n    redirect('/admin/login?error=config');\n  }\n\n  const token = cookies().get(getSessionCookieName())?.value;\n  const session = token ? verifySessionToken(token, adminConfig.sessionSecret) : null;\n\n  if (!session) {\n    redirect(`/admin/login?next=${encodeURIComponent('/admin/campaign')}`);\n  }\n\n  const defaults = {\n    batchSize: Number.parseInt(process.env.CAMPAIGN_EMAIL_BATCH_SIZE || '50', 10) || 50,\n    minHoursBetween: Number.parseInt(process.env.CAMPAIGN_MIN_HOURS_BETWEEN_EMAILS || '72', 10) || 72,\n    linkBase: process.env.CAMPAIGN_LINK_BASE || 'https://rsvp-ai-seminar.vercel.app/rsvp',\n    fromEmail: process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <team@evergreen.ai>',\n    cronSecretConfigured: Boolean(process.env.CAMPAIGN_CRON_SECRET?.trim()),\n    resendConfigured: Boolean(process.env.RESEND_API_KEY?.trim()),\n    leadMineConfigured:\n      Boolean(process.env.LEADMINE_API_BASE?.trim()) && Boolean(process.env.LEADMINE_API_KEY?.trim()),\n  };\n\n  const initialData = await listCampaignData();\n\n  return (\n    <AdminLayout\n      title=\"Campaign Control Center\"\n      subtitle=\"Configure outreach settings, preview invite batches, and trigger Resend deliveries for Lead Mine businesses.\"\n      badge=\"Evergreen Admin\"\n    >\n      <CampaignControls defaults={defaults} initialData={initialData} />\n    </AdminLayout>\n  );\n}",
        "context": "Code snippet 8",
        "purpose": "Module import/export"
      },
      {
        "language": "typescript",
        "code": "// Session expiry and renewal\n// src/lib/admin-auth.ts\nexport function isSessionExpired(session: { expiresAt: number }): boolean {\n  return session.expiresAt < Date.now() / 1000;\n}\n\nexport function refreshSession(token: string, secret: string): string | null {\n  const session = verifySessionToken(token, secret);\n  if (!session) return null;\n  \n  // Check if session is close to expiry (within 5 minutes)\n  const fiveMinutesFromNow = (Date.now() / 1000) + (5 * 60);\n  if (session.expiresAt < fiveMinutesFromNow) {\n    const newExpiry = getNewExpiry();\n    return createSessionToken(session.username, secret, newExpiry);\n  }\n  \n  return token; // No refresh needed\n}",
        "context": "Code snippet 9",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Complete admin authentication flow\nconst adminAuthFlow = {\n  // 1. User visits admin page\n  // 2. Middleware checks for valid session\n  // 3. If no session, redirect to login\n  // 4. User enters credentials\n  // 5. Server validates credentials\n  // 6. Server creates JWT session token\n  // 7. Server sets secure HTTP-only cookie\n  // 8. User is redirected to admin dashboard\n  // 9. Subsequent requests include session cookie\n  // 10. Server verifies session on each request\n  // 11. Session expires after 30 minutes\n  // 12. User must re-authenticate\n};",
        "context": "Code snippet 10",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Password hashing for admin credentials\n// To generate password hash:\n// const bcrypt = require('bcryptjs');\n// const hash = await bcrypt.hash('your-password', 12);\n// console.log(hash);\n\n// Environment variables needed:\n// ADMIN_USER=your-username\n// ADMIN_PASSWORD_HASH=$2a$12$... (bcrypt hash)\n// ADMIN_SESSION_SECRET=your-secret-key",
        "context": "Code snippet 11",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Security features of admin authentication\nconst securityFeatures = {\n  // JWT tokens with expiration\n  tokenExpiry: '30 minutes',\n  \n  // HTTP-only cookies (prevents XSS)\n  cookieSecurity: 'httpOnly, secure, sameSite=lax',\n  \n  // Password hashing with bcrypt\n  passwordHashing: 'bcrypt with salt rounds 12',\n  \n  // Session verification on every request\n  sessionVerification: 'required for all admin routes',\n  \n  // Automatic logout on token expiry\n  autoLogout: 'enabled',\n  \n  // Secure redirects\n  redirectSecurity: 'validated next parameter'\n};",
        "context": "Code snippet 12",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. SESSION TOKEN MANAGEMENT**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. ADMIN LOGIN PAGE**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. SESSION VERIFICATION MIDDLEWARE**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. ADMIN LOGOUT**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. ADMIN ROUTE PROTECTION**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. ADMIN API ROUTE PROTECTION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. ADMIN CAMPAIGN PAGE PROTECTION**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. SESSION EXPIRY MANAGEMENT**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**10. ADMIN AUTHENTICATION FLOW**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**11. PASSWORD HASHING**",
        "context": "Code snippet 10",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**12. SECURITY CONSIDERATIONS**",
        "context": "Code snippet 11",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. ADMIN CONFIGURATION**\n```typescript\n// Admin configuration management\n// src/lib/admin-auth.ts\ntype Config = {\n  username: string;\n  passwordHash: string;\n  sessionSecret: string;\n}",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. SESSION TOKEN MANAGEMENT**\n```typescript\n// JWT session token creation and verification\nimport jwt from 'jsonwebtoken';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. ADMIN LOGIN PAGE**\n```typescript\n// Admin login page with form handling\n// src/app/admin/login/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport bcrypt from 'bcryptjs';\nimport { getAdminConfig, createSessionToken, getNewExpiry, getSessionCookieName } from '@/lib/admin-auth';",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "4. SESSION VERIFICATION MIDDLEWARE**\n```typescript\n// Admin session verification\n// src/lib/adminSession.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "5. ADMIN LOGOUT**\n```typescript\n// Admin logout endpoint\n// src/app/admin/logout/route.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getSessionCookieName } from '@/lib/admin-auth';",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "6. ADMIN ROUTE PROTECTION**\n```typescript\n// Admin route protection in middleware\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Admin route protection\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    const token = req.cookies.get(getSessionCookieName())?.value;\n    const config = getAdminConfig();\n    \n    if (!config) {\n      return NextResponse.redirect(new URL('/admin/login?error=config', req.url));\n    }\n    \n    const session = verifySessionToken(token, config.sessionSecret);\n    if (!session) {\n      const loginUrl = new URL('/admin/login', req.url);\n      loginUrl.searchParams.set('next', req.nextUrl.pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n  \n  return res;\n}\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "7. ADMIN API ROUTE PROTECTION**\n```typescript\n// Admin API route protection\n// src/app/api/admin/campaign/dashboard/route.ts\nimport { NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport { listCampaignData } from '@/lib/campaigns';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. ADMIN CAMPAIGN PAGE PROTECTION**\n```typescript\n// Admin campaign page with session verification\n// src/app/admin/campaign/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\nimport { listCampaignData } from '@/lib/campaigns';",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "9. SESSION EXPIRY MANAGEMENT**\n```typescript\n// Session expiry and renewal\n// src/lib/admin-auth.ts\nexport function isSessionExpired(session: { expiresAt: number }): boolean {\n  return session.expiresAt < Date.now() / 1000;\n}",
        "type": "step",
        "category": "general"
      },
      {
        "description": "10. ADMIN AUTHENTICATION FLOW**\n```typescript\n// Complete admin authentication flow\nconst adminAuthFlow = {\n  // 1. User visits admin page\n  // 2. Middleware checks for valid session\n  // 3. If no session, redirect to login\n  // 4. User enters credentials\n  // 5. Server validates credentials\n  // 6. Server creates JWT session token\n  // 7. Server sets secure HTTP-only cookie\n  // 8. User is redirected to admin dashboard\n  // 9. Subsequent requests include session cookie\n  // 10. Server verifies session on each request\n  // 11. Session expires after 30 minutes\n  // 12. User must re-authenticate\n};\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "11. PASSWORD HASHING**\n```typescript\n// Password hashing for admin credentials\n// To generate password hash:\n// const bcrypt = require('bcryptjs');\n// const hash = await bcrypt.hash('your-password', 12);\n// console.log(hash);",
        "type": "step",
        "category": "general"
      },
      {
        "description": "12. SECURITY CONSIDERATIONS**\n```typescript\n// Security features of admin authentication\nconst securityFeatures = {\n  // JWT tokens with expiration\n  tokenExpiry: '30 minutes',\n  \n  // HTTP-only cookies (prevents XSS)\n  cookieSecurity: 'httpOnly, secure, sameSite=lax',\n  \n  // Password hashing with bcrypt\n  passwordHashing: 'bcrypt with salt rounds 12',\n  \n  // Session verification on every request\n  sessionVerification: 'required for all admin routes',\n  \n  // Automatic logout on token expiry\n  autoLogout: 'enabled',\n  \n  // Secure redirects\n  redirectSecurity: 'validated next parameter'\n};\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "*\n\n**1. ADMIN CONFIGURATION**\n```typescript\n// Admin configuration management\n// src/lib/admin-auth.ts\ntype Config = {\n  username: string;\n  passwordHash: string;\n  sessionSecret: string;\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// JWT session token creation and verification\nimport jwt from 'jsonwebtoken';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 1000); // 30 minutes\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Admin login page with form handling\n// src/app/admin/login/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport bcrypt from 'bcryptjs';\nimport { getAdminConfig, createSessionToken, getNewExpiry, getSessionCookieName } from '@/lib/admin-auth';",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Admin session verification\n// src/lib/adminSession.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Admin logout endpoint\n// src/app/admin/logout/route.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { getSessionCookieName } from '@/lib/admin-auth';",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Admin route protection in middleware\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Admin route protection\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    const token = req.cookies.get(getSessionCookieName())?.value;\n    const config = getAdminConfig();\n    \n    if (!config) {\n      return NextResponse.redirect(new URL('/admin/login?error=config', req.url));\n    }\n    \n    const session = verifySessionToken(token, config.sessionSecret);\n    if (!session) {\n      const loginUrl = new URL('/admin/login', req.url);\n      loginUrl.searchParams.set('next', req.nextUrl.pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n  \n  return res;\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Admin API route protection\n// src/app/api/admin/campaign/dashboard/route.ts\nimport { NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport { listCampaignData } from '@/lib/campaigns';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Admin campaign page with session verification\n// src/app/admin/campaign/page.tsx\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { getAdminConfig, verifySessionToken, getSessionCookieName } from '@/lib/admin-auth';\nimport { listCampaignData } from '@/lib/campaigns';",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Session expiry and renewal\n// src/lib/admin-auth.ts\nexport function isSessionExpired(session: { expiresAt: number }): boolean {\n  return session.expiresAt < Date.now() / 1000;\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60);\n  if (session.expiresAt < fiveMinutesFromNow) {\n    const newExpiry = getNewExpiry();\n    return createSessionToken(session.username, secret, newExpiry);\n  }\n  \n  return token; // No refresh needed\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Complete admin authentication flow\nconst adminAuthFlow = {\n  // 1. User visits admin page\n  // 2. Middleware checks for valid session\n  // 3. If no session, redirect to login\n  // 4. User enters credentials\n  // 5. Server validates credentials\n  // 6. Server creates JWT session token\n  // 7. Server sets secure HTTP-only cookie\n  // 8. User is redirected to admin dashboard\n  // 9. Subsequent requests include session cookie\n  // 10. Server verifies session on each request\n  // 11. Session expires after 30 minutes\n  // 12. User must re-authenticate\n};\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Password hashing for admin credentials\n// To generate password hash:\n// const bcrypt = require('bcryptjs');\n// const hash = await bcrypt.hash('your-password', 12);\n// console.log(hash);",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Security features of admin authentication\nconst securityFeatures = {\n  // JWT tokens with expiration\n  tokenExpiry: '30 minutes',\n  \n  // HTTP-only cookies (prevents XSS)\n  cookieSecurity: 'httpOnly, secure, sameSite=lax',\n  \n  // Password hashing with bcrypt\n  passwordHashing: 'bcrypt with salt rounds 12',\n  \n  // Session verification on every request\n  sessionVerification: 'required for all admin routes',\n  \n  // Automatic logout on token expiry\n  autoLogout: 'enabled',\n  \n  // Secure redirects\n  redirectSecurity: 'validated next parameter'\n};\n```",
        "type": "item",
        "category": "validation"
      }
    ],
    "interconnections": [
      "Middleware Features",
      "Security Features"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "'Admin not configured' }, { status: 500 }) };\n  }\n  \n  const session = verifySessionToken(token, config.sessionSecret);\n  if (!session) {\n    return { response: NextResponse.json({ error: 'Unauthorized' }, { status: 401 }) };\n  }\n  \n  return { session };\n}\n```",
      "', error);\n    return NextResponse.json({ error: 'Logout failed' }, { status: 500 });\n  }\n}\n```"
    ],
    "related_apis": [
      "/api/admin/campaign/dashboard/route.ts"
    ],
    "related_components": [
      "Session.ts",
      "auth.ts",
      "page.ts",
      "adminSession.ts",
      "route.ts",
      "middleware.ts",
      "NextResponse.js",
      "src/lib/admin-auth.ts",
      "src/app/admin/login/page.tsx",
      "src/lib/adminSession.ts",
      "src/app/admin/logout/route.ts",
      "src/app/api/admin/campaign/dashboard/route.ts",
      "src/app/admin/campaign/page.tsx"
    ],
    "tags": [
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "nextjs",
      "react",
      "security",
      "sendgrid",
      "admin-authentication"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "16-webhook-handling-accurate_1",
    "category": "Webhook Handling",
    "subcategory": "General",
    "title": "Webhook handling",
    "description": "How does webhook handling work? - Explain webhook processing for SendGrid and external events",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// SendGrid webhook endpoint\n// src/app/api/webhooks/sendgrid/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { handleSendGridWebhook } from '@/lib/sendgrid-email';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Validate webhook signature (if configured)\n    const signature = req.headers.get('x-twilio-email-event-webhook-signature');\n    const timestamp = req.headers.get('x-twilio-email-event-webhook-timestamp');\n    \n    if (signature && timestamp) {\n      const isValid = verifySendGridSignature(body, signature, timestamp);\n      if (!isValid) {\n        return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });\n      }\n    }\n    \n    // Process webhook events\n    const result = await handleSendGridWebhook(body);\n    \n    return NextResponse.json({ success: true, processed: result.processed });\n  } catch (error) {\n    console.error('SendGrid webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n\n// SendGrid webhook signature verification\nfunction verifySendGridSignature(\n  payload: any,\n  signature: string,\n  timestamp: string\n): boolean {\n  const webhookSecret = process.env.SENDGRID_WEBHOOK_SECRET;\n  if (!webhookSecret) {\n    // If no secret configured, allow all webhooks (not recommended for production)\n    return true;\n  }\n  \n  const crypto = require('crypto');\n  const expectedSignature = crypto\n    .createHmac('sha256', webhookSecret)\n    .update(timestamp + JSON.stringify(payload))\n    .digest('base64');\n  \n  return signature === expectedSignature;\n}",
        "context": "Code snippet 1",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// SendGrid webhook event processing\n// src/lib/sendgrid-email.ts\nexport async function handleSendGridWebhook(events: any[]): Promise<{\n  processed: number;\n  errors: number;\n}> {\n  const results = {\n    processed: 0,\n    errors: 0\n  };\n\n  for (const event of events) {\n    try {\n      await processSendGridEvent(event);\n      results.processed++;\n    } catch (error) {\n      console.error('Error processing SendGrid event:', error);\n      results.errors++;\n    }\n  }\n\n  return results;\n}\n\nasync function processSendGridEvent(event: any) {\n  const {\n    event: eventType,\n    email,\n    timestamp,\n    sg_message_id,\n    reason,\n    url,\n    useragent,\n    ip,\n    category,\n    unique_args,\n    ...otherData\n  } = event;\n\n  // Find corresponding email job or RSVP\n  let emailJob = null;\n  let rsvp = null;\n\n  // Try to find by SendGrid message ID\n  if (sg_message_id) {\n    emailJob = await prisma.emailJob.findFirst({\n      where: {\n        providerMessageId: sg_message_id\n      }\n    });\n  }\n\n  // Try to find by email address\n  if (!emailJob) {\n    rsvp = await prisma.rsvp.findUnique({\n      where: { email }\n    });\n  }\n\n  // Process based on event type\n  switch (eventType) {\n    case 'delivered':\n      await handleEmailDelivered(emailJob, rsvp, event);\n      break;\n    case 'bounce':\n      await handleEmailBounce(emailJob, rsvp, event);\n      break;\n    case 'dropped':\n      await handleEmailDropped(emailJob, rsvp, event);\n      break;\n    case 'open':\n      await handleEmailOpen(emailJob, rsvp, event);\n      break;\n    case 'click':\n      await handleEmailClick(emailJob, rsvp, event);\n      break;\n    case 'spam_report':\n      await handleSpamReport(emailJob, rsvp, event);\n      break;\n    case 'unsubscribe':\n      await handleUnsubscribe(emailJob, rsvp, event);\n      break;\n    case 'group_unsubscribe':\n      await handleGroupUnsubscribe(emailJob, rsvp, event);\n      break;\n    case 'processed':\n      await handleEmailProcessed(emailJob, rsvp, event);\n      break;\n    default:\n      console.log('Unknown SendGrid event type:', eventType);\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Individual email event handlers\nasync function handleEmailDelivered(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job status\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        status: 'delivered',\n        meta: {\n          ...emailJob.meta,\n          deliveredAt: new Date(event.timestamp * 1000).toISOString(),\n          deliveryData: event\n        }\n      }\n    });\n\n    // Create email event record\n    await prisma.emailEvent.create({\n      data: {\n        jobId: emailJob.id,\n        type: 'delivered',\n        meta: event\n      }\n    });\n  }\n\n  // Post to LeadMine if applicable\n  if (emailJob?.meta?.inviteToken) {\n    await postLeadMineEvent({\n      token: emailJob.meta.inviteToken,\n      businessId: emailJob.meta.businessId,\n      type: 'email_delivered',\n      meta: {\n        messageId: event.sg_message_id,\n        deliveredAt: new Date(event.timestamp * 1000).toISOString()\n      }\n    });\n  }\n}\n\nasync function handleEmailBounce(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job status\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        status: 'bounced',\n        error: event.reason,\n        meta: {\n          ...emailJob.meta,\n          bouncedAt: new Date(event.timestamp * 1000).toISOString(),\n          bounceData: event\n        }\n      }\n    });\n\n    // Create email event record\n    await prisma.emailEvent.create({\n      data: {\n        jobId: emailJob.id,\n        type: 'bounced',\n        meta: event\n      }\n    });\n  }\n\n  // Mark audience member as unsubscribed for hard bounces\n  if (event.type === 'bounce' && event.reason?.includes('hard')) {\n    await prisma.audienceMember.updateMany({\n      where: {\n        primaryEmail: event.email\n      },\n      data: {\n        unsubscribed: true,\n        meta: {\n          unsubscribedAt: new Date().toISOString(),\n          unsubscribedReason: 'hard_bounce',\n          bounceReason: event.reason\n        }\n      }\n    });\n  }\n}\n\nasync function handleEmailOpen(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job with open tracking\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        meta: {\n          ...emailJob.meta,\n          openedAt: new Date(event.timestamp * 1000).toISOString(),\n          openData: event\n        }\n      }\n    });\n\n    // Create email event record\n    await prisma.emailEvent.create({\n      data: {\n        jobId: emailJob.id,\n        type: 'opened',\n        meta: event\n      }\n    });\n  }\n\n  // Post to LeadMine\n  if (emailJob?.meta?.inviteToken) {\n    await postLeadMineEvent({\n      token: emailJob.meta.inviteToken,\n      businessId: emailJob.meta.businessId,\n      type: 'email_opened',\n      meta: {\n        messageId: event.sg_message_id,\n        openedAt: new Date(event.timestamp * 1000).toISOString(),\n        userAgent: event.useragent,\n        ip: event.ip\n      }\n    });\n  }\n}\n\nasync function handleEmailClick(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job with click tracking\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        meta: {\n          ...emailJob.meta,\n          clickedAt: new Date(event.timestamp * 1000).toISOString(),\n          clickData: event\n        }\n      }\n    });\n\n    // Create email event record\n    await prisma.emailEvent.create({\n      data: {\n        jobId: emailJob.id,\n        type: 'clicked',\n        meta: event\n      }\n    });\n  }\n\n  // Post to LeadMine\n  if (emailJob?.meta?.inviteToken) {\n    await postLeadMineEvent({\n      token: emailJob.meta.inviteToken,\n      businessId: emailJob.meta.businessId,\n      type: 'email_clicked',\n      meta: {\n        messageId: event.sg_message_id,\n        clickedAt: new Date(event.timestamp * 1000).toISOString(),\n        url: event.url,\n        userAgent: event.useragent,\n        ip: event.ip\n      }\n    });\n  }\n}\n\nasync function handleUnsubscribe(emailJob: any, rsvp: any, event: any) {\n  // Mark audience member as unsubscribed\n  await prisma.audienceMember.updateMany({\n    where: {\n      primaryEmail: event.email\n    },\n    data: {\n      unsubscribed: true,\n      meta: {\n        unsubscribedAt: new Date().toISOString(),\n        unsubscribedReason: 'user_request',\n        unsubscribeData: event\n      }\n    }\n  });\n\n  // Create email event record if email job exists\n  if (emailJob) {\n    await prisma.emailEvent.create({\n      data: {\n        jobId: emailJob.id,\n        type: 'unsubscribed',\n        meta: event\n      }\n    });\n  }\n\n  // Post to LeadMine\n  if (emailJob?.meta?.inviteToken) {\n    await postLeadMineEvent({\n      token: emailJob.meta.inviteToken,\n      businessId: emailJob.meta.businessId,\n      type: 'unsubscribed',\n      meta: {\n        messageId: event.sg_message_id,\n        unsubscribedAt: new Date(event.timestamp * 1000).toISOString()\n      }\n    });\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "Control flow logic"
      },
      {
        "language": "typescript",
        "code": "// ImprovMX webhook for email receiving\n// src/app/api/webhooks/improvmx/route.ts\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Process incoming email\n    const { from, to, subject, body: emailBody, headers } = body;\n    \n    // Determine email type and route accordingly\n    if (to.includes('bounces@')) {\n      await handleBounceEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('unsubscribe@')) {\n      await handleUnsubscribeEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('support@')) {\n      await handleSupportEmail({ from, subject, emailBody, headers });\n    } else {\n      await handleReplyEmail({ from, subject, emailBody, headers });\n    }\n    \n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('ImprovMX webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n\n// Bounce email handling\nasync function handleBounceEmail({ from, subject, emailBody, headers }) {\n  try {\n    // Extract original recipient from bounce email\n    const recipientMatch = emailBody.match(/Original-Recipient: (.+)/i);\n    const recipient = recipientMatch ? recipientMatch[1] : null;\n    \n    if (recipient) {\n      // Update database to mark email as bounced\n      await prisma.audienceMember.updateMany({\n        where: { primaryEmail: recipient },\n        data: { \n          unsubscribed: true,\n          meta: {\n            bounceReason: 'Hard bounce',\n            bouncedAt: new Date().toISOString(),\n            bounceSubject: subject,\n            bounceFrom: from\n          }\n        }\n      });\n      \n      // Log bounce event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'bounce',\n          meta: {\n            recipient,\n            bounceType: 'hard',\n            bounceReason: subject,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Bounce processing failed:', error);\n  }\n}\n\n// Unsubscribe email handling\nasync function handleUnsubscribeEmail({ from, subject, emailBody, headers }) {\n  try {\n    // Extract email address from unsubscribe request\n    const emailMatch = from.match(/<(.+)>/);\n    const email = emailMatch ? emailMatch[1] : from;\n    \n    // Update database to mark as unsubscribed\n    await prisma.audienceMember.updateMany({\n      where: { primaryEmail: email },\n      data: { \n        unsubscribed: true,\n        meta: {\n          unsubscribedAt: new Date().toISOString(),\n          unsubscribeMethod: 'email',\n          unsubscribeSubject: subject\n        }\n      }\n    });\n    \n    // Log unsubscribe event\n    await prisma.emailEvent.create({\n      data: {\n        type: 'unsubscribe',\n        meta: {\n          email,\n          unsubscribeMethod: 'email',\n          processedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send confirmation email\n    await sendUnsubscribeConfirmation(email);\n  } catch (error) {\n    console.error('Unsubscribe processing failed:', error);\n  }\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Webhook security and validation\nfunction validateWebhookRequest(req: NextRequest, webhookSecret?: string): boolean {\n  // Check IP whitelist (if configured)\n  const allowedIPs = process.env.WEBHOOK_ALLOWED_IPS?.split(',') || [];\n  if (allowedIPs.length > 0) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim();\n    if (!allowedIPs.includes(clientIP)) {\n      return false;\n    }\n  }\n  \n  // Check webhook secret\n  if (webhookSecret) {\n    const signature = req.headers.get('x-webhook-signature');\n    if (!signature) {\n      return false;\n    }\n    \n    const expectedSignature = crypto\n      .createHmac('sha256', webhookSecret)\n      .update(JSON.stringify(req.body))\n      .digest('hex');\n    \n    return signature === expectedSignature;\n  }\n  \n  return true;\n}\n\n// Rate limiting for webhooks\nexport async function checkWebhookRateLimit(\n  webhookType: string,\n  clientIP: string\n): Promise<boolean> {\n  const rateLimitKey = `webhook:${webhookType}:${clientIP}`;\n  const rateLimit = await getRateLimit(rateLimitKey);\n  \n  if (rateLimit.count >= 100) { // 100 requests per hour\n    return false;\n  }\n  \n  await incrementRateLimit(rateLimitKey, 3600); // 1 hour\n  return true;\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Webhook monitoring and logging\nexport class WebhookMonitor {\n  private static instance: WebhookMonitor;\n  private webhookStats: Map<string, any> = new Map();\n  \n  static getInstance(): WebhookMonitor {\n    if (!WebhookMonitor.instance) {\n      WebhookMonitor.instance = new WebhookMonitor();\n    }\n    return WebhookMonitor.instance;\n  }\n  \n  recordWebhookEvent(webhookType: string, eventType: string, success: boolean) {\n    const key = `${webhookType}:${eventType}`;\n    const stats = this.webhookStats.get(key) || {\n      total: 0,\n      success: 0,\n      errors: 0,\n      lastProcessed: null\n    };\n    \n    stats.total++;\n    if (success) {\n      stats.success++;\n    } else {\n      stats.errors++;\n    }\n    stats.lastProcessed = new Date().toISOString();\n    \n    this.webhookStats.set(key, stats);\n  }\n  \n  getWebhookStats(): Record<string, any> {\n    return Object.fromEntries(this.webhookStats);\n  }\n  \n  getWebhookHealth(): {\n    healthy: boolean;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    \n    for (const [key, stats] of this.webhookStats) {\n      const errorRate = stats.errors / stats.total;\n      if (errorRate > 0.1) { // More than 10% error rate\n        issues.push(`${key} has high error rate: ${(errorRate * 100).toFixed(1)}%`);\n      }\n      \n      const lastProcessed = new Date(stats.lastProcessed);\n      const timeSinceLastProcessed = Date.now() - lastProcessed.getTime();\n      if (timeSinceLastProcessed > 24 * 60 * 60 * 1000) { // 24 hours\n        issues.push(`${key} hasn't processed events in 24+ hours`);\n      }\n    }\n    \n    return {\n      healthy: issues.length === 0,\n      issues\n    };\n  }\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Webhook configuration and setup\nexport const webhookConfig = {\n  sendgrid: {\n    enabled: Boolean(process.env.SENDGRID_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/sendgrid',\n    events: [\n      'delivered', 'bounce', 'dropped', 'open', 'click',\n      'spam_report', 'unsubscribe', 'group_unsubscribe', 'processed'\n    ],\n    secret: process.env.SENDGRID_WEBHOOK_SECRET\n  },\n  \n  improvmx: {\n    enabled: Boolean(process.env.IMPROVMX_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/improvmx',\n    events: ['email_received'],\n    secret: process.env.IMPROVMX_WEBHOOK_SECRET\n  },\n  \n  leadmine: {\n    enabled: Boolean(process.env.LEADMINE_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/leadmine',\n    events: ['business_updated', 'business_deleted', 'invite_token_generated'],\n    secret: process.env.LEADMINE_WEBHOOK_SECRET\n  }\n};\n\n// Webhook health check\nexport async function checkWebhookHealth(): Promise<{\n  sendgrid: boolean;\n  improvmx: boolean;\n  leadmine: boolean;\n}> {\n  return {\n    sendgrid: webhookConfig.sendgrid.enabled,\n    improvmx: webhookConfig.improvmx.enabled,\n    leadmine: webhookConfig.leadmine.enabled\n  };\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "**2. SENDGRID WEBHOOK HANDLER**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. EMAIL EVENT HANDLERS**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. IMPROVMX WEBHOOK HANDLING**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. WEBHOOK SECURITY**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. WEBHOOK MONITORING**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. WEBHOOK CONFIGURATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. SENDGRID WEBHOOK PROCESSING**\n```typescript\n// SendGrid webhook endpoint\n// src/app/api/webhooks/sendgrid/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { handleSendGridWebhook } from '@/lib/sendgrid-email';",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "2. SENDGRID WEBHOOK HANDLER**\n```typescript\n// SendGrid webhook event processing\n// src/lib/sendgrid-email.ts\nexport async function handleSendGridWebhook(events: any[]): Promise<{\n  processed: number;\n  errors: number;\n}> {\n  const results = {\n    processed: 0,\n    errors: 0\n  };",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. EMAIL EVENT HANDLERS**\n```typescript\n// Individual email event handlers\nasync function handleEmailDelivered(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job status\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        status: 'delivered',\n        meta: {\n          ...emailJob.meta,\n          deliveredAt: new Date(event.timestamp * 1000).toISOString(),\n          deliveryData: event\n        }\n      }\n    });",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "4. IMPROVMX WEBHOOK HANDLING**\n```typescript\n// ImprovMX webhook for email receiving\n// src/app/api/webhooks/improvmx/route.ts\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Process incoming email\n    const { from, to, subject, body: emailBody, headers } = body;\n    \n    // Determine email type and route accordingly\n    if (to.includes('bounces@')) {\n      await handleBounceEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('unsubscribe@')) {\n      await handleUnsubscribeEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('support@')) {\n      await handleSupportEmail({ from, subject, emailBody, headers });\n    } else {\n      await handleReplyEmail({ from, subject, emailBody, headers });\n    }\n    \n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('ImprovMX webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "5. WEBHOOK SECURITY**\n```typescript\n// Webhook security and validation\nfunction validateWebhookRequest(req: NextRequest, webhookSecret?: string): boolean {\n  // Check IP whitelist (if configured)\n  const allowedIPs = process.env.WEBHOOK_ALLOWED_IPS?.split(',') || [];\n  if (allowedIPs.length > 0) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim();\n    if (!allowedIPs.includes(clientIP)) {\n      return false;\n    }\n  }\n  \n  // Check webhook secret\n  if (webhookSecret) {\n    const signature = req.headers.get('x-webhook-signature');\n    if (!signature) {\n      return false;\n    }\n    \n    const expectedSignature = crypto\n      .createHmac('sha256', webhookSecret)\n      .update(JSON.stringify(req.body))\n      .digest('hex');\n    \n    return signature === expectedSignature;\n  }\n  \n  return true;\n}",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "6. WEBHOOK MONITORING**\n```typescript\n// Webhook monitoring and logging\nexport class WebhookMonitor {\n  private static instance: WebhookMonitor;\n  private webhookStats: Map<string, any> = new Map();\n  \n  static getInstance(): WebhookMonitor {\n    if (!WebhookMonitor.instance) {\n      WebhookMonitor.instance = new WebhookMonitor();\n    }\n    return WebhookMonitor.instance;\n  }\n  \n  recordWebhookEvent(webhookType: string, eventType: string, success: boolean) {\n    const key = `${webhookType}:${eventType}`;\n    const stats = this.webhookStats.get(key) || {\n      total: 0,\n      success: 0,\n      errors: 0,\n      lastProcessed: null\n    };\n    \n    stats.total++;\n    if (success) {\n      stats.success++;\n    } else {\n      stats.errors++;\n    }\n    stats.lastProcessed = new Date().toISOString();\n    \n    this.webhookStats.set(key, stats);\n  }\n  \n  getWebhookStats(): Record<string, any> {\n    return Object.fromEntries(this.webhookStats);\n  }\n  \n  getWebhookHealth(): {\n    healthy: boolean;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    \n    for (const [key, stats] of this.webhookStats) {\n      const errorRate = stats.errors / stats.total;\n      if (errorRate > 0.1) { // More than 10% error rate\n        issues.push(`${key} has high error rate: ${(errorRate * 100).toFixed(1)}%`);\n      }\n      \n      const lastProcessed = new Date(stats.lastProcessed);\n      const timeSinceLastProcessed = Date.now() - lastProcessed.getTime();\n      if (timeSinceLastProcessed > 24 * 60 * 60 * 1000) { // 24 hours\n        issues.push(`${key} hasn't processed events in 24+ hours`);\n      }\n    }\n    \n    return {\n      healthy: issues.length === 0,\n      issues\n    };\n  }\n}\n```",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "7. WEBHOOK CONFIGURATION**\n```typescript\n// Webhook configuration and setup\nexport const webhookConfig = {\n  sendgrid: {\n    enabled: Boolean(process.env.SENDGRID_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/sendgrid',\n    events: [\n      'delivered', 'bounce', 'dropped', 'open', 'click',\n      'spam_report', 'unsubscribe', 'group_unsubscribe', 'processed'\n    ],\n    secret: process.env.SENDGRID_WEBHOOK_SECRET\n  },\n  \n  improvmx: {\n    enabled: Boolean(process.env.IMPROVMX_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/improvmx',\n    events: ['email_received'],\n    secret: process.env.IMPROVMX_WEBHOOK_SECRET\n  },\n  \n  leadmine: {\n    enabled: Boolean(process.env.LEADMINE_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/leadmine',\n    events: ['business_updated', 'business_deleted', 'invite_token_generated'],\n    secret: process.env.LEADMINE_WEBHOOK_SECRET\n  }\n};",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "*\n\n**1. SENDGRID WEBHOOK PROCESSING**\n```typescript\n// SendGrid webhook endpoint\n// src/app/api/webhooks/sendgrid/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { handleSendGridWebhook } from '@/lib/sendgrid-email';",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```typescript\n// SendGrid webhook event processing\n// src/lib/sendgrid-email.ts\nexport async function handleSendGridWebhook(events: any[]): Promise<{\n  processed: number;\n  errors: number;\n}> {\n  const results = {\n    processed: 0,\n    errors: 0\n  };",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```typescript\n// Individual email event handlers\nasync function handleEmailDelivered(emailJob: any, rsvp: any, event: any) {\n  if (emailJob) {\n    // Update email job status\n    await prisma.emailJob.update({\n      where: { id: emailJob.id },\n      data: {\n        status: 'delivered',\n        meta: {\n          ...emailJob.meta,\n          deliveredAt: new Date(event.timestamp * 1000).toISOString(),\n          deliveryData: event\n        }\n      }\n    });",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "* 1000).toISOString()\n      }\n    });\n  }\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString(),\n          bounceData: event\n        }\n      }\n    });",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString(),\n          openData: event\n        }\n      }\n    });",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString(),\n        userAgent: event.useragent,\n        ip: event.ip\n      }\n    });\n  }\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString(),\n          clickData: event\n        }\n      }\n    });",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString(),\n        url: event.url,\n        userAgent: event.useragent,\n        ip: event.ip\n      }\n    });\n  }\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 1000).toISOString()\n      }\n    });\n  }\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// ImprovMX webhook for email receiving\n// src/app/api/webhooks/improvmx/route.ts\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Process incoming email\n    const { from, to, subject, body: emailBody, headers } = body;\n    \n    // Determine email type and route accordingly\n    if (to.includes('bounces@')) {\n      await handleBounceEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('unsubscribe@')) {\n      await handleUnsubscribeEmail({ from, subject, emailBody, headers });\n    } else if (to.includes('support@')) {\n      await handleSupportEmail({ from, subject, emailBody, headers });\n    } else {\n      await handleReplyEmail({ from, subject, emailBody, headers });\n    }\n    \n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('ImprovMX webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```typescript\n// Webhook security and validation\nfunction validateWebhookRequest(req: NextRequest, webhookSecret?: string): boolean {\n  // Check IP whitelist (if configured)\n  const allowedIPs = process.env.WEBHOOK_ALLOWED_IPS?.split(',') || [];\n  if (allowedIPs.length > 0) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim();\n    if (!allowedIPs.includes(clientIP)) {\n      return false;\n    }\n  }\n  \n  // Check webhook secret\n  if (webhookSecret) {\n    const signature = req.headers.get('x-webhook-signature');\n    if (!signature) {\n      return false;\n    }\n    \n    const expectedSignature = crypto\n      .createHmac('sha256', webhookSecret)\n      .update(JSON.stringify(req.body))\n      .digest('hex');\n    \n    return signature === expectedSignature;\n  }\n  \n  return true;\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Webhook monitoring and logging\nexport class WebhookMonitor {\n  private static instance: WebhookMonitor;\n  private webhookStats: Map<string, any> = new Map();\n  \n  static getInstance(): WebhookMonitor {\n    if (!WebhookMonitor.instance) {\n      WebhookMonitor.instance = new WebhookMonitor();\n    }\n    return WebhookMonitor.instance;\n  }\n  \n  recordWebhookEvent(webhookType: string, eventType: string, success: boolean) {\n    const key = `${webhookType}:${eventType}`;\n    const stats = this.webhookStats.get(key) || {\n      total: 0,\n      success: 0,\n      errors: 0,\n      lastProcessed: null\n    };\n    \n    stats.total++;\n    if (success) {\n      stats.success++;\n    } else {\n      stats.errors++;\n    }\n    stats.lastProcessed = new Date().toISOString();\n    \n    this.webhookStats.set(key, stats);\n  }\n  \n  getWebhookStats(): Record<string, any> {\n    return Object.fromEntries(this.webhookStats);\n  }\n  \n  getWebhookHealth(): {\n    healthy: boolean;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    \n    for (const [key, stats] of this.webhookStats) {\n      const errorRate = stats.errors / stats.total;\n      if (errorRate > 0.1) { // More than 10% error rate\n        issues.push(`${key} has high error rate: ${(errorRate * 100).toFixed(1)}%`);\n      }\n      \n      const lastProcessed = new Date(stats.lastProcessed);\n      const timeSinceLastProcessed = Date.now() - lastProcessed.getTime();\n      if (timeSinceLastProcessed > 24 * 60 * 60 * 1000) { // 24 hours\n        issues.push(`${key} hasn't processed events in 24+ hours`);\n      }\n    }\n    \n    return {\n      healthy: issues.length === 0,\n      issues\n    };\n  }\n}\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Webhook configuration and setup\nexport const webhookConfig = {\n  sendgrid: {\n    enabled: Boolean(process.env.SENDGRID_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/sendgrid',\n    events: [\n      'delivered', 'bounce', 'dropped', 'open', 'click',\n      'spam_report', 'unsubscribe', 'group_unsubscribe', 'processed'\n    ],\n    secret: process.env.SENDGRID_WEBHOOK_SECRET\n  },\n  \n  improvmx: {\n    enabled: Boolean(process.env.IMPROVMX_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/improvmx',\n    events: ['email_received'],\n    secret: process.env.IMPROVMX_WEBHOOK_SECRET\n  },\n  \n  leadmine: {\n    enabled: Boolean(process.env.LEADMINE_WEBHOOK_SECRET),\n    endpoint: '/api/webhooks/leadmine',\n    events: ['business_updated', 'business_deleted', 'invite_token_generated'],\n    secret: process.env.LEADMINE_WEBHOOK_SECRET\n  }\n};",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- lastProcessed.getTime();\n      if (timeSinceLastProcessed > 24 * 60 * 60 * 1000) { // 24 hours\n        issues.push(`${key} hasn't processed events in 24+ hours`);\n      }\n    }\n    \n    return {\n      healthy: issues.length === 0,\n      issues\n    };\n  }\n}\n```",
        "type": "item",
        "category": "retrieval"
      }
    ],
    "interconnections": [
      "LeadMine Integration",
      "SendGrid API",
      "Email Sending System"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "'Invalid signature' }, { status: 401 });\n      }\n    }\n    \n    // Process webhook events\n    const result = await handleSendGridWebhook(body);\n    \n    return NextResponse.json({ success: true, processed: result.processed });\n  } catch (error) {\n    console.error('SendGrid webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}",
      "event.reason,\n        meta: {\n          ...emailJob.meta,\n          bouncedAt: new Date(event.timestamp * 1000).toISOString(),\n          bounceData: event\n        }\n      }\n    });",
      "', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}"
    ],
    "related_apis": [
      "/api/webhooks/sendgrid/route.ts",
      "/api/webhooks/improvmx/route.ts",
      "/api/webhooks/sendgrid',",
      "/api/webhooks/improvmx',",
      "/api/webhooks/leadmine',"
    ],
    "related_components": [
      "route.ts",
      "email.ts",
      "req.js",
      "NextResponse.js",
      "src/app/api/webhooks/sendgrid/route.ts",
      "src/lib/sendgrid-email.ts",
      "src/app/api/webhooks/improvmx/route.ts"
    ],
    "tags": [
      "zod",
      "prisma",
      "weaviate",
      "analytics",
      "typescript",
      "webhook-handling",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "18-event-management-accurate_1",
    "category": "Event Management",
    "subcategory": "General",
    "title": "Event management",
    "description": "How does event management work? - Explain ICS generation and event details management",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Event data constants and configuration\n// src/components/EventLanding.tsx\nconst VENUE_ADDRESS = \"4812 Hwy 16, Terrace, BC, Canada\";\nconst VENUE_NAME = \"Sunshine Inn Terrace — Jasmine Room\";\nconst EVENT_NAME = \"AI in Northern BC: Information Session\";\nconst START_ISO = \"2025-10-23T18:00:00-07:00\";\nconst END_ISO = \"2025-10-23T20:30:00-07:00\";\nconst EVENT_DESCRIPTION = \"A plain-language evening for Northern BC businesses: real local examples and clear first steps for adopting AI.\";\n\n// Event details for display\nconst detailItems: Array<{ label: string; value: string; href?: string }> = [\n  {\n    label: \"When\",\n    value: \"Thu, Oct 23 · Doors 6:00 PM · 6:30–8:30 PM\",\n    href: `/api/ics?title=${encodeURIComponent(EVENT_NAME)}&start=${encodeURIComponent(START_ISO)}&end=${encodeURIComponent(END_ISO)}&location=${encodeURIComponent(`${VENUE_NAME}, ${VENUE_ADDRESS}`)}&desc=${encodeURIComponent(EVENT_DESCRIPTION)}`\n  },\n  {\n    label: \"Where\",\n    value: VENUE_NAME,\n    href: \"https://www.google.com/maps/search/?api=1&query=\" + encodeURIComponent(`${VENUE_NAME} ${VENUE_ADDRESS}`)\n  },\n  {\n    label: \"Hosted by\",\n    value: \"Gabriel Lacroix • Evergreen Web Solutions\"\n  }\n];\n\n// Event takeaways and highlights\nconst takeaways = [\n  \"Real local examples of AI automation, machine learning, and custom AI integrations that worked — and what they cost.\",\n  \"Clear first steps for adopting AI in your business, tailored to Northern BC's unique challenges and opportunities.\",\n  \"Networking with other local business owners who are exploring AI solutions.\",\n  \"Q&A session with Gabriel Lacroix, who has implemented AI solutions for Northern BC businesses.\"\n];",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// ICS calendar file generation\n// src/app/api/ics/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createEvent } from 'ics';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const url = new URL(req.url);\n    const title = url.searchParams.get('title') || 'Event';\n    const start = url.searchParams.get('start') || new Date().toISOString();\n    const end = url.searchParams.get('end') || new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString();\n    const location = url.searchParams.get('location') || '';\n    const description = url.searchParams.get('desc') || '';\n    \n    // Parse dates\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    \n    // Create ICS event\n    const { error, value } = createEvent({\n      title,\n      description,\n      location,\n      start: [\n        startDate.getFullYear(),\n        startDate.getMonth() + 1,\n        startDate.getDate(),\n        startDate.getHours(),\n        startDate.getMinutes()\n      ],\n      end: [\n        endDate.getFullYear(),\n        endDate.getMonth() + 1,\n        endDate.getDate(),\n        endDate.getHours(),\n        endDate.getMinutes()\n      ],\n      startInputType: 'utc',\n      endInputType: 'utc',\n      duration: { hours: 2, minutes: 30 },\n      organizer: {\n        name: 'Gabriel Lacroix',\n        email: 'gabriel@evergreenwebsolutions.ca'\n      },\n      url: 'https://rsvp.evergreenwebsolutions.ca',\n      status: 'CONFIRMED',\n      busyStatus: 'BUSY',\n      categories: ['Business', 'AI', 'Information Session'],\n      alarms: [\n        {\n          action: 'display',\n          trigger: { hours: 24, minutes: 0, before: true },\n          description: 'Reminder: AI in Northern BC Information Session tomorrow'\n        },\n        {\n          action: 'display',\n          trigger: { hours: 1, minutes: 0, before: true },\n          description: 'Reminder: AI in Northern BC Information Session in 1 hour'\n        }\n      ]\n    });\n    \n    if (error) {\n      console.error('ICS generation error:', error);\n      return NextResponse.json({ error: 'Failed to generate calendar event' }, { status: 500 });\n    }\n    \n    // Return ICS file\n    return new NextResponse(value, {\n      headers: {\n        'Content-Type': 'text/calendar; charset=utf-8',\n        'Content-Disposition': 'attachment; filename=\"ai-event-2025.ics\"',\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      }\n    });\n  } catch (error) {\n    console.error('ICS API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Event landing page component\n// src/components/EventLanding.tsx\nexport default function EventLanding() {\n  return (\n    <div className=\"relative min-h-[100svh] bg-white text-gray-900\">\n      {/* Structured Data */}\n      <StructuredData type=\"event\" />\n      <StructuredData type=\"breadcrumb\" />\n\n      {/* Header / Logo */}\n      <motion.header \n        initial={{ opacity: 0 }} \n        animate={{ opacity: 1 }} \n        transition={{ duration: 0.7, ease: EASE }} \n        className=\"w-full h-auto\"\n      >\n        <Link\n          href=\"https://evergreenwebsolutions.ca\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"block w-full\"\n        >\n          <Image\n            src=\"/AI_in_terrace.svg\"\n            alt=\"AI in Northern BC\"\n            width={1000}\n            height={500}\n            priority\n            sizes=\"(max-width: 768px) 100vw, 100vw\"\n            className=\"w-full h-auto object-cover\"\n          />\n        </Link>\n      </motion.header>\n\n      {/* Main Content */}\n      <main className=\"px-4 sm:px-6 lg:px-8\">\n        {/* Hero Section */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-[68ch] py-10 sm:py-16 md:py-20 text-center space-y-5 sm:space-y-6\"\n        >\n          <motion.span\n            variants={itemVariants}\n            className=\"inline-flex items-center justify-center rounded-lg border border-gray-200 bg-gray-50 px-3 py-1 text-[10px] sm:text-[11px] font-medium uppercase tracking-[0.3em] sm:tracking-[0.35em] text-gray-600\"\n          >\n            Limited seats · RSVP closes Thu, Oct 16\n          </motion.span>\n\n          <motion.h1 \n            variants={itemVariants}\n            className=\"text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight text-gray-900\"\n          >\n            {EVENT_NAME}\n          </motion.h1>\n\n          <motion.p \n            variants={itemVariants}\n            className=\"text-lg sm:text-xl text-gray-600 max-w-2xl mx-auto\"\n          >\n            {EVENT_DESCRIPTION}\n          </motion.p>\n        </motion.section>\n\n        {/* Event Details */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-4xl py-16\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {/* Event Information */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Event Details</h2>\n              \n              {detailItems.map((item, index) => (\n                <motion.div\n                  key={index}\n                  variants={itemVariants}\n                  className=\"flex items-start space-x-3\"\n                >\n                  <div className=\"flex-shrink-0 w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{item.label}</h3>\n                    {item.href ? (\n                      <a\n                        href={item.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:text-blue-800 underline\"\n                      >\n                        {item.value}\n                      </a>\n                    ) : (\n                      <p className=\"text-gray-600\">{item.value}</p>\n                    )}\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n\n            {/* Event Takeaways */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">What You'll Learn</h2>\n              \n              <ul className=\"space-y-4\">\n                {takeaways.map((takeaway, index) => (\n                  <motion.li\n                    key={index}\n                    variants={itemVariants}\n                    className=\"flex items-start space-x-3\"\n                  >\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-3 h-3 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                    <p className=\"text-gray-700\">{takeaway}</p>\n                  </motion.li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </motion.section>\n\n        {/* RSVP Form */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-2xl py-16\"\n        >\n          <div className=\"bg-gray-50 rounded-2xl p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">\n              Reserve Your Spot\n            </h2>\n            <RsvpForm />\n          </div>\n        </motion.section>\n      </main>\n    </div>\n  );\n}",
        "context": "Code snippet 3",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// Structured data for search engines\n// src/components/StructuredData.tsx\nexport default function StructuredData({ type }: { type: 'event' | 'breadcrumb' }) {\n  if (type === 'event') {\n    const eventData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Event\",\n      \"name\": EVENT_NAME,\n      \"description\": EVENT_DESCRIPTION,\n      \"startDate\": START_ISO,\n      \"endDate\": END_ISO,\n      \"location\": {\n        \"@type\": \"Place\",\n        \"name\": VENUE_NAME,\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"streetAddress\": \"4812 Hwy 16\",\n          \"addressLocality\": \"Terrace\",\n          \"addressRegion\": \"BC\",\n          \"addressCountry\": \"CA\"\n        }\n      },\n      \"organizer\": {\n        \"@type\": \"Person\",\n        \"name\": \"Gabriel Lacroix\",\n        \"email\": \"gabriel@evergreenwebsolutions.ca\"\n      },\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": \"0\",\n        \"priceCurrency\": \"CAD\",\n        \"availability\": \"https://schema.org/InStock\"\n      },\n      \"eventStatus\": \"https://schema.org/EventScheduled\",\n      \"eventAttendanceMode\": \"https://schema.org/OfflineEventAttendanceMode\"\n    };\n\n    return (\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(eventData) }}\n      />\n    );\n  }\n\n  if (type === 'breadcrumb') {\n    const breadcrumbData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": \"https://evergreenwebsolutions.ca\"\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 2,\n          \"name\": \"Events\",\n          \"item\": \"https://evergreenwebsolutions.ca/events\"\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 3,\n          \"name\": EVENT_NAME,\n          \"item\": \"https://rsvp.evergreenwebsolutions.ca\"\n        }\n      ]\n    };\n\n    return (\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbData) }}\n      />\n    );\n  }\n\n  return null;\n}",
        "context": "Code snippet 4",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// Event confirmation email generation\n// src/lib/sendgrid-email.ts\nexport async function sendRSVPConfirmation({\n  to,\n  name,\n  rsvpId\n}: {\n  to: string;\n  name: string;\n  rsvpId: string;\n}) {\n  const eventDetails = {\n    name: EVENT_NAME,\n    date: 'Thursday, October 23, 2025',\n    time: '6:00 PM - 8:30 PM',\n    location: VENUE_NAME,\n    address: VENUE_ADDRESS,\n    description: EVENT_DESCRIPTION\n  };\n\n  const msg = {\n    to: [to],\n    from: {\n      email: 'events@evergreenwebsolutions.ca',\n      name: 'AI Events'\n    },\n    replyTo: 'gabriel@evergreenwebsolutions.ca',\n    subject: `RSVP Confirmed: ${EVENT_NAME}`,\n    html: generateRSVPConfirmationHTML(name, eventDetails),\n    text: generateRSVPConfirmationText(name, eventDetails),\n    headers: {\n      'List-Unsubscribe': '<mailto:unsubscribe@evergreenwebsolutions.ca>',\n      'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n      'X-Campaign-ID': 'ai-event-2025',\n      'X-RSVP-ID': rsvpId,\n      'X-Mailer': 'Evergreen Web Solutions RSVP System'\n    },\n    categories: ['rsvp-confirmation', 'ai-event-2025'],\n    customArgs: {\n      rsvp_id: rsvpId,\n      event_type: 'rsvp-confirmation'\n    }\n  };\n\n  const response = await sgMail.send(msg);\n  return { \n    success: true, \n    messageId: response[0].headers['x-message-id'] as string\n  };\n}\n\nfunction generateRSVPConfirmationHTML(name: string, eventDetails: any): string {\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>RSVP Confirmed - ${eventDetails.name}</title>\n    </head>\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px;\">\n        <h1 style=\"color: #2c3e50; margin-bottom: 20px;\">RSVP Confirmed!</h1>\n        <p style=\"font-size: 16px; margin-bottom: 20px;\">Hi ${name},</p>\n        <p style=\"font-size: 16px; margin-bottom: 20px;\">Thank you for RSVPing to our event. We're excited to see you there!</p>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h2 style=\"color: #2c3e50; margin-bottom: 15px;\">Event Details</h2>\n          <p><strong>Event:</strong> ${eventDetails.name}</p>\n          <p><strong>Date:</strong> ${eventDetails.date}</p>\n          <p><strong>Time:</strong> ${eventDetails.time}</p>\n          <p><strong>Location:</strong> ${eventDetails.location}</p>\n          <p><strong>Address:</strong> ${eventDetails.address}</p>\n        </div>\n        \n        <div style=\"background: #e8f4fd; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #2c3e50; margin-bottom: 10px;\">Add to Calendar</h3>\n          <p style=\"margin-bottom: 10px;\">Don't forget to add this event to your calendar:</p>\n          <a href=\"${process.env.NEXT_PUBLIC_BASE_URL}/api/ics?title=${encodeURIComponent(eventDetails.name)}&start=${encodeURIComponent(START_ISO)}&end=${encodeURIComponent(END_ISO)}&location=${encodeURIComponent(`${eventDetails.location}, ${eventDetails.address}`)}&desc=${encodeURIComponent(eventDetails.description)}\" \n             style=\"display: inline-block; background: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n            Download Calendar Event\n          </a>\n        </div>\n        \n        <p style=\"font-size: 14px; color: #666; margin-top: 20px;\">\n          If you have any questions, please contact us at gabriel@evergreenwebsolutions.ca\n        </p>\n      </div>\n    </body>\n    </html>\n  `;\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Event analytics and tracking\n// src/lib/event-analytics.ts\nexport async function trackEventEngagement(\n  eventType: 'page_view' | 'calendar_download' | 'rsvp_submit' | 'email_open' | 'email_click',\n  eventData: any\n) {\n  try {\n    // Track in database\n    await prisma.eventAnalytics.create({\n      data: {\n        eventType,\n        eventData: JSON.stringify(eventData),\n        timestamp: new Date()\n      }\n    });\n\n    // Post to LeadMine if applicable\n    if (eventData.inviteToken) {\n      await postLeadMineEvent({\n        token: eventData.inviteToken,\n        businessId: eventData.businessId,\n        type: `event_${eventType}`,\n        meta: {\n          eventName: EVENT_NAME,\n          eventDate: START_ISO,\n          ...eventData\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Event analytics error:', error);\n  }\n}\n\nexport async function getEventAnalytics(): Promise<{\n  totalPageViews: number;\n  totalCalendarDownloads: number;\n  totalRSVPs: number;\n  conversionRate: number;\n  topReferrers: Array<{ source: string; count: number }>;\n  deviceBreakdown: Array<{ device: string; count: number }>;\n}> {\n  const [pageViews, calendarDownloads, rsvps, referrers, devices] = await Promise.all([\n    prisma.eventAnalytics.count({\n      where: { eventType: 'page_view' }\n    }),\n    prisma.eventAnalytics.count({\n      where: { eventType: 'calendar_download' }\n    }),\n    prisma.rsvp.count(),\n    prisma.eventAnalytics.groupBy({\n      by: ['eventData'],\n      where: { eventType: 'page_view' },\n      _count: { eventType: true }\n    }),\n    prisma.eventAnalytics.groupBy({\n      by: ['eventData'],\n      where: { eventType: 'page_view' },\n      _count: { eventType: true }\n    })\n  ]);\n\n  return {\n    totalPageViews: pageViews,\n    totalCalendarDownloads: calendarDownloads,\n    totalRSVPs: rsvps,\n    conversionRate: pageViews > 0 ? (rsvps / pageViews) * 100 : 0,\n    topReferrers: [], // Process referrer data\n    deviceBreakdown: [] // Process device data\n  };\n}",
        "context": "Code snippet 6",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Event configuration management\n// src/lib/event-config.ts\nexport const eventConfig = {\n  name: process.env.EVENT_NAME || 'AI in Northern BC: Information Session',\n  date: process.env.EVENT_DATE || '2025-10-23',\n  startTime: process.env.EVENT_START_TIME || '18:00',\n  endTime: process.env.EVENT_END_TIME || '20:30',\n  timezone: process.env.EVENT_TIMEZONE || 'America/Vancouver',\n  venue: {\n    name: process.env.VENUE_NAME || 'Sunshine Inn Terrace — Jasmine Room',\n    address: process.env.VENUE_ADDRESS || '4812 Hwy 16, Terrace, BC, Canada',\n    capacity: parseInt(process.env.VENUE_CAPACITY || '50')\n  },\n  organizer: {\n    name: process.env.ORGANIZER_NAME || 'Gabriel Lacroix',\n    email: process.env.ORGANIZER_EMAIL || 'gabriel@evergreenwebsolutions.ca',\n    company: process.env.ORGANIZER_COMPANY || 'Evergreen Web Solutions'\n  },\n  rsvp: {\n    deadline: process.env.RSVP_DEADLINE || '2025-10-16',\n    maxAttendees: parseInt(process.env.MAX_ATTENDEES || '50'),\n    requiresApproval: process.env.REQUIRES_APPROVAL === 'true'\n  }\n};\n\nexport function getEventISODate(): string {\n  const date = new Date(`${eventConfig.date}T${eventConfig.startTime}:00`);\n  return date.toISOString();\n}\n\nexport function getEventEndISODate(): string {\n  const date = new Date(`${eventConfig.date}T${eventConfig.endTime}:00`);\n  return date.toISOString();\n}\n\nexport function isRSVPOpen(): boolean {\n  const deadline = new Date(eventConfig.rsvp.deadline);\n  const now = new Date();\n  return now < deadline;\n}\n\nexport function getRemainingSpots(): number {\n  // This would query the database for current RSVP count\n  // For now, return a placeholder\n  return eventConfig.venue.capacity - 0; // Replace 0 with actual count\n}",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. ICS CALENDAR GENERATION**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. EVENT LANDING PAGE**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. STRUCTURED DATA FOR SEO**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. EVENT CONFIRMATION EMAILS**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. EVENT ANALYTICS**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. EVENT CONFIGURATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. EVENT DATA STRUCTURE**\n```typescript\n// Event data constants and configuration\n// src/components/EventLanding.tsx\nconst VENUE_ADDRESS = \"4812 Hwy 16, Terrace, BC, Canada\";\nconst VENUE_NAME = \"Sunshine Inn Terrace — Jasmine Room\";\nconst EVENT_NAME = \"AI in Northern BC: Information Session\";\nconst START_ISO = \"2025-10-23T18:00:00-07:00\";\nconst END_ISO = \"2025-10-23T20:30:00-07:00\";\nconst EVENT_DESCRIPTION = \"A plain-language evening for Northern BC businesses: real local examples and clear first steps for adopting AI.\";",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. ICS CALENDAR GENERATION**\n```typescript\n// ICS calendar file generation\n// src/app/api/ics/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createEvent } from 'ics';",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "3. EVENT LANDING PAGE**\n```typescript\n// Event landing page component\n// src/components/EventLanding.tsx\nexport default function EventLanding() {\n  return (\n    <div className=\"relative min-h-[100svh] bg-white text-gray-900\">\n      {/* Structured Data */}\n      <StructuredData type=\"event\" />\n      <StructuredData type=\"breadcrumb\" />",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. STRUCTURED DATA FOR SEO**\n```typescript\n// Structured data for search engines\n// src/components/StructuredData.tsx\nexport default function StructuredData({ type }: { type: 'event' | 'breadcrumb' }) {\n  if (type === 'event') {\n    const eventData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Event\",\n      \"name\": EVENT_NAME,\n      \"description\": EVENT_DESCRIPTION,\n      \"startDate\": START_ISO,\n      \"endDate\": END_ISO,\n      \"location\": {\n        \"@type\": \"Place\",\n        \"name\": VENUE_NAME,\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"streetAddress\": \"4812 Hwy 16\",\n          \"addressLocality\": \"Terrace\",\n          \"addressRegion\": \"BC\",\n          \"addressCountry\": \"CA\"\n        }\n      },\n      \"organizer\": {\n        \"@type\": \"Person\",\n        \"name\": \"Gabriel Lacroix\",\n        \"email\": \"gabriel@evergreenwebsolutions.ca\"\n      },\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": \"0\",\n        \"priceCurrency\": \"CAD\",\n        \"availability\": \"https://schema.org/InStock\"\n      },\n      \"eventStatus\": \"https://schema.org/EventScheduled\",\n      \"eventAttendanceMode\": \"https://schema.org/OfflineEventAttendanceMode\"\n    };",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "5. EVENT CONFIRMATION EMAILS**\n```typescript\n// Event confirmation email generation\n// src/lib/sendgrid-email.ts\nexport async function sendRSVPConfirmation({\n  to,\n  name,\n  rsvpId\n}: {\n  to: string;\n  name: string;\n  rsvpId: string;\n}) {\n  const eventDetails = {\n    name: EVENT_NAME,\n    date: 'Thursday, October 23, 2025',\n    time: '6:00 PM - 8:30 PM',\n    location: VENUE_NAME,\n    address: VENUE_ADDRESS,\n    description: EVENT_DESCRIPTION\n  };",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "6. EVENT ANALYTICS**\n```typescript\n// Event analytics and tracking\n// src/lib/event-analytics.ts\nexport async function trackEventEngagement(\n  eventType: 'page_view' | 'calendar_download' | 'rsvp_submit' | 'email_open' | 'email_click',\n  eventData: any\n) {\n  try {\n    // Track in database\n    await prisma.eventAnalytics.create({\n      data: {\n        eventType,\n        eventData: JSON.stringify(eventData),\n        timestamp: new Date()\n      }\n    });",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "7. EVENT CONFIGURATION**\n```typescript\n// Event configuration management\n// src/lib/event-config.ts\nexport const eventConfig = {\n  name: process.env.EVENT_NAME || 'AI in Northern BC: Information Session',\n  date: process.env.EVENT_DATE || '2025-10-23',\n  startTime: process.env.EVENT_START_TIME || '18:00',\n  endTime: process.env.EVENT_END_TIME || '20:30',\n  timezone: process.env.EVENT_TIMEZONE || 'America/Vancouver',\n  venue: {\n    name: process.env.VENUE_NAME || 'Sunshine Inn Terrace — Jasmine Room',\n    address: process.env.VENUE_ADDRESS || '4812 Hwy 16, Terrace, BC, Canada',\n    capacity: parseInt(process.env.VENUE_CAPACITY || '50')\n  },\n  organizer: {\n    name: process.env.ORGANIZER_NAME || 'Gabriel Lacroix',\n    email: process.env.ORGANIZER_EMAIL || 'gabriel@evergreenwebsolutions.ca',\n    company: process.env.ORGANIZER_COMPANY || 'Evergreen Web Solutions'\n  },\n  rsvp: {\n    deadline: process.env.RSVP_DEADLINE || '2025-10-16',\n    maxAttendees: parseInt(process.env.MAX_ATTENDEES || '50'),\n    requiresApproval: process.env.REQUIRES_APPROVAL === 'true'\n  }\n};",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. EVENT DATA STRUCTURE**\n```typescript\n// Event data constants and configuration\n// src/components/EventLanding.tsx\nconst VENUE_ADDRESS = \"4812 Hwy 16, Terrace, BC, Canada\";\nconst VENUE_NAME = \"Sunshine Inn Terrace — Jasmine Room\";\nconst EVENT_NAME = \"AI in Northern BC: Information Session\";\nconst START_ISO = \"2025-10-23T18:00:00-07:00\";\nconst END_ISO = \"2025-10-23T20:30:00-07:00\";\nconst EVENT_DESCRIPTION = \"A plain-language evening for Northern BC businesses: real local examples and clear first steps for adopting AI.\";",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// ICS calendar file generation\n// src/app/api/ics/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createEvent } from 'ics';",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "* 60 * 60 * 1000).toISOString();\n    const location = url.searchParams.get('location') || '';\n    const description = url.searchParams.get('desc') || '';\n    \n    // Parse dates\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    \n    // Create ICS event\n    const { error, value } = createEvent({\n      title,\n      description,\n      location,\n      start: [\n        startDate.getFullYear(),\n        startDate.getMonth() + 1,\n        startDate.getDate(),\n        startDate.getHours(),\n        startDate.getMinutes()\n      ],\n      end: [\n        endDate.getFullYear(),\n        endDate.getMonth() + 1,\n        endDate.getDate(),\n        endDate.getHours(),\n        endDate.getMinutes()\n      ],\n      startInputType: 'utc',\n      endInputType: 'utc',\n      duration: { hours: 2, minutes: 30 },\n      organizer: {\n        name: 'Gabriel Lacroix',\n        email: 'gabriel@evergreenwebsolutions.ca'\n      },\n      url: 'https://rsvp.evergreenwebsolutions.ca',\n      status: 'CONFIRMED',\n      busyStatus: 'BUSY',\n      categories: ['Business', 'AI', 'Information Session'],\n      alarms: [\n        {\n          action: 'display',\n          trigger: { hours: 24, minutes: 0, before: true },\n          description: 'Reminder: AI in Northern BC Information Session tomorrow'\n        },\n        {\n          action: 'display',\n          trigger: { hours: 1, minutes: 0, before: true },\n          description: 'Reminder: AI in Northern BC Information Session in 1 hour'\n        }\n      ]\n    });\n    \n    if (error) {\n      console.error('ICS generation error:', error);\n      return NextResponse.json({ error: 'Failed to generate calendar event' }, { status: 500 });\n    }\n    \n    // Return ICS file\n    return new NextResponse(value, {\n      headers: {\n        'Content-Type': 'text/calendar; charset=utf-8',\n        'Content-Disposition': 'attachment; filename=\"ai-event-2025.ics\"',\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      }\n    });\n  } catch (error) {\n    console.error('ICS API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Event landing page component\n// src/components/EventLanding.tsx\nexport default function EventLanding() {\n  return (\n    <div className=\"relative min-h-[100svh] bg-white text-gray-900\">\n      {/* Structured Data */}\n      <StructuredData type=\"event\" />\n      <StructuredData type=\"breadcrumb\" />",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Header / Logo */}\n      <motion.header \n        initial={{ opacity: 0 }} \n        animate={{ opacity: 1 }} \n        transition={{ duration: 0.7, ease: EASE }} \n        className=\"w-full h-auto\"\n      >\n        <Link\n          href=\"https://evergreenwebsolutions.ca\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"block w-full\"\n        >\n          <Image\n            src=\"/AI_in_terrace.svg\"\n            alt=\"AI in Northern BC\"\n            width={1000}\n            height={500}\n            priority\n            sizes=\"(max-width: 768px) 100vw, 100vw\"\n            className=\"w-full h-auto object-cover\"\n          />\n        </Link>\n      </motion.header>",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "* Main Content */}\n      <main className=\"px-4 sm:px-6 lg:px-8\">\n        {/* Hero Section */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-[68ch] py-10 sm:py-16 md:py-20 text-center space-y-5 sm:space-y-6\"\n        >\n          <motion.span\n            variants={itemVariants}\n            className=\"inline-flex items-center justify-center rounded-lg border border-gray-200 bg-gray-50 px-3 py-1 text-[10px] sm:text-[11px] font-medium uppercase tracking-[0.3em] sm:tracking-[0.35em] text-gray-600\"\n          >\n            Limited seats · RSVP closes Thu, Oct 16\n          </motion.span>",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Event Details */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-4xl py-16\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {/* Event Information */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Event Details</h2>\n              \n              {detailItems.map((item, index) => (\n                <motion.div\n                  key={index}\n                  variants={itemVariants}\n                  className=\"flex items-start space-x-3\"\n                >\n                  <div className=\"flex-shrink-0 w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{item.label}</h3>\n                    {item.href ? (\n                      <a\n                        href={item.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:text-blue-800 underline\"\n                      >\n                        {item.value}\n                      </a>\n                    ) : (\n                      <p className=\"text-gray-600\">{item.value}</p>\n                    )}\n                  </div>\n                </motion.div>\n              ))}\n            </div>",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "* Event Takeaways */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">What You'll Learn</h2>\n              \n              <ul className=\"space-y-4\">\n                {takeaways.map((takeaway, index) => (\n                  <motion.li\n                    key={index}\n                    variants={itemVariants}\n                    className=\"flex items-start space-x-3\"\n                  >\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-3 h-3 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                    <p className=\"text-gray-700\">{takeaway}</p>\n                  </motion.li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </motion.section>",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* RSVP Form */}\n        <motion.section\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"mx-auto max-w-2xl py-16\"\n        >\n          <div className=\"bg-gray-50 rounded-2xl p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">\n              Reserve Your Spot\n            </h2>\n            <RsvpForm />\n          </div>\n        </motion.section>\n      </main>\n    </div>\n  );\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Structured data for search engines\n// src/components/StructuredData.tsx\nexport default function StructuredData({ type }: { type: 'event' | 'breadcrumb' }) {\n  if (type === 'event') {\n    const eventData = {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Event\",\n      \"name\": EVENT_NAME,\n      \"description\": EVENT_DESCRIPTION,\n      \"startDate\": START_ISO,\n      \"endDate\": END_ISO,\n      \"location\": {\n        \"@type\": \"Place\",\n        \"name\": VENUE_NAME,\n        \"address\": {\n          \"@type\": \"PostalAddress\",\n          \"streetAddress\": \"4812 Hwy 16\",\n          \"addressLocality\": \"Terrace\",\n          \"addressRegion\": \"BC\",\n          \"addressCountry\": \"CA\"\n        }\n      },\n      \"organizer\": {\n        \"@type\": \"Person\",\n        \"name\": \"Gabriel Lacroix\",\n        \"email\": \"gabriel@evergreenwebsolutions.ca\"\n      },\n      \"offers\": {\n        \"@type\": \"Offer\",\n        \"price\": \"0\",\n        \"priceCurrency\": \"CAD\",\n        \"availability\": \"https://schema.org/InStock\"\n      },\n      \"eventStatus\": \"https://schema.org/EventScheduled\",\n      \"eventAttendanceMode\": \"https://schema.org/OfflineEventAttendanceMode\"\n    };",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Event confirmation email generation\n// src/lib/sendgrid-email.ts\nexport async function sendRSVPConfirmation({\n  to,\n  name,\n  rsvpId\n}: {\n  to: string;\n  name: string;\n  rsvpId: string;\n}) {\n  const eventDetails = {\n    name: EVENT_NAME,\n    date: 'Thursday, October 23, 2025',\n    time: '6:00 PM - 8:30 PM',\n    location: VENUE_NAME,\n    address: VENUE_ADDRESS,\n    description: EVENT_DESCRIPTION\n  };",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Event analytics and tracking\n// src/lib/event-analytics.ts\nexport async function trackEventEngagement(\n  eventType: 'page_view' | 'calendar_download' | 'rsvp_submit' | 'email_open' | 'email_click',\n  eventData: any\n) {\n  try {\n    // Track in database\n    await prisma.eventAnalytics.create({\n      data: {\n        eventType,\n        eventData: JSON.stringify(eventData),\n        timestamp: new Date()\n      }\n    });",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "* 100 : 0,\n    topReferrers: [], // Process referrer data\n    deviceBreakdown: [] // Process device data\n  };\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Event configuration management\n// src/lib/event-config.ts\nexport const eventConfig = {\n  name: process.env.EVENT_NAME || 'AI in Northern BC: Information Session',\n  date: process.env.EVENT_DATE || '2025-10-23',\n  startTime: process.env.EVENT_START_TIME || '18:00',\n  endTime: process.env.EVENT_END_TIME || '20:30',\n  timezone: process.env.EVENT_TIMEZONE || 'America/Vancouver',\n  venue: {\n    name: process.env.VENUE_NAME || 'Sunshine Inn Terrace — Jasmine Room',\n    address: process.env.VENUE_ADDRESS || '4812 Hwy 16, Terrace, BC, Canada',\n    capacity: parseInt(process.env.VENUE_CAPACITY || '50')\n  },\n  organizer: {\n    name: process.env.ORGANIZER_NAME || 'Gabriel Lacroix',\n    email: process.env.ORGANIZER_EMAIL || 'gabriel@evergreenwebsolutions.ca',\n    company: process.env.ORGANIZER_COMPANY || 'Evergreen Web Solutions'\n  },\n  rsvp: {\n    deadline: process.env.RSVP_DEADLINE || '2025-10-16',\n    maxAttendees: parseInt(process.env.MAX_ATTENDEES || '50'),\n    requiresApproval: process.env.REQUIRES_APPROVAL === 'true'\n  }\n};",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- 8:30 PM',\n    location: VENUE_NAME,\n    address: VENUE_ADDRESS,\n    description: EVENT_DESCRIPTION\n  };",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- ${eventDetails.name}</title>\n    </head>\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px;\">\n        <h1 style=\"color: #2c3e50; margin-bottom: 20px;\">RSVP Confirmed!</h1>\n        <p style=\"font-size: 16px; margin-bottom: 20px;\">Hi ${name},</p>\n        <p style=\"font-size: 16px; margin-bottom: 20px;\">Thank you for RSVPing to our event. We're excited to see you there!</p>\n        \n        <div style=\"background: white; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h2 style=\"color: #2c3e50; margin-bottom: 15px;\">Event Details</h2>\n          <p><strong>Event:</strong> ${eventDetails.name}</p>\n          <p><strong>Date:</strong> ${eventDetails.date}</p>\n          <p><strong>Time:</strong> ${eventDetails.time}</p>\n          <p><strong>Location:</strong> ${eventDetails.location}</p>\n          <p><strong>Address:</strong> ${eventDetails.address}</p>\n        </div>\n        \n        <div style=\"background: #e8f4fd; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #2c3e50; margin-bottom: 10px;\">Add to Calendar</h3>\n          <p style=\"margin-bottom: 10px;\">Don't forget to add this event to your calendar:</p>\n          <a href=\"${process.env.NEXT_PUBLIC_BASE_URL}/api/ics?title=${encodeURIComponent(eventDetails.name)}&start=${encodeURIComponent(START_ISO)}&end=${encodeURIComponent(END_ISO)}&location=${encodeURIComponent(`${eventDetails.location}, ${eventDetails.address}`)}&desc=${encodeURIComponent(eventDetails.description)}\" \n             style=\"display: inline-block; background: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n            Download Calendar Event\n          </a>\n        </div>\n        \n        <p style=\"font-size: 14px; color: #666; margin-top: 20px;\">\n          If you have any questions, please contact us at gabriel@evergreenwebsolutions.ca\n        </p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- 0; // Replace 0 with actual count\n}\n```",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "RSVP Data Management",
      "Email Sending System"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n      return NextResponse.json({ error: 'Failed to generate calendar event' }, { status: 500 });\n    }\n    \n    // Return ICS file\n    return new NextResponse(value, {\n      headers: {\n        'Content-Type': 'text/calendar; charset=utf-8',\n        'Content-Disposition': 'attachment; filename=\"ai-event-2025.ics\"',\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\n      }\n    });\n  } catch (error) {\n    console.error('ICS API error:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n```",
      "', error);\n  }\n}"
    ],
    "related_apis": [
      "/api/ics?title=${encodeURIComponent(EVENT_NAME)}&start=${encodeURIComponent(START_ISO)}&end=${encodeURIComponent(END_ISO)}&location=${encodeURIComponent(`${VENUE_NAME},",
      "/api/ics/route.ts",
      "/api/ics?title=${encodeURIComponent(eventDetails.name)}&start=${encodeURIComponent(START_ISO)}&end=${encodeURIComponent(END_ISO)}&location=${encodeURIComponent(`${eventDetails.location},"
    ],
    "related_components": [
      "EventLanding.tsx",
      "StructuredData.tsx",
      "EventLanding.ts",
      "route.ts",
      "StructuredData.ts",
      "email.ts",
      "analytics.ts",
      "config.ts",
      "NextResponse.js",
      "src/components/EventLanding.tsx",
      "src/app/api/ics/route.ts",
      "src/components/StructuredData.tsx",
      "src/lib/sendgrid-email.ts",
      "src/lib/event-analytics.ts",
      "src/lib/event-config.ts",
      "components/EventLanding.tsx",
      "components/StructuredData.tsx"
    ],
    "tags": [
      "zod",
      "prisma",
      "event-management",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "react",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "regional_focus": "Northern BC",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "15-leadmine-integration-accurate_1",
    "category": "LeadMine Integration",
    "subcategory": "General",
    "title": "Leadmine integration",
    "description": "How does LeadMine integration work? - Explain the LeadMine API integration and business data sync",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// LeadMine API client implementation\n// src/lib/leadMine.ts\nexport type LeadMineBusiness = {\n  id: string;\n  name: string | null;\n  address: string | null;\n  website: string | null;\n  createdAt: string;\n  contact: {\n    primaryEmail: string | null;\n    alternateEmail: string | null;\n    contactPerson: string | null;\n    tags: string[];\n  };\n  lead: {\n    status: string | null;\n    priority: string | null;\n    assignedTo: string | null;\n    nextFollowUpDate: string | null;\n  };\n  invite: {\n    token: string;\n    emailsSent: number;\n    lastEmailSent: string | null;\n    visitsCount: number;\n    lastVisitedAt: string | null;\n    rsvpsCount: number;\n    lastRsvpAt: string | null;\n    lastEmailMeta?: Record<string, unknown> | null;\n    lastVisitMeta?: Record<string, unknown> | null;\n    lastRsvpMeta?: Record<string, unknown> | null;\n  } | null;\n};\n\nexport type LeadMineBusinessesResponse = {\n  data: LeadMineBusiness[];\n  pagination: {\n    limit: number;\n    nextCursor: string | null;\n  };\n};\n\n// LeadMine API client\nasync function leadMineFetch<T>(path: string, init?: RequestInit): Promise<T> {\n  const baseUrl = process.env.LEADMINE_API_BASE;\n  const apiKey = process.env.LEADMINE_API_KEY;\n  \n  if (!baseUrl || !apiKey) {\n    throw new Error('LeadMine integration not configured');\n  }\n\n  const res = await fetch(`${baseUrl}${path}`, {\n    ...init,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      ...(init?.headers || {}),\n    },\n    cache: 'no-store',\n  });\n\n  if (!res.ok) {\n    const text = await res.text().catch(() => '');\n    throw new Error(`LeadMine request failed (${res.status}): ${text}`);\n  }\n\n  return res.json() as Promise<T>;\n}",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Fetch businesses from LeadMine\nexport async function fetchLeadMineBusinesses(params: {\n  limit?: number;\n  cursor?: string;\n  hasEmail?: boolean;\n  createMissing?: boolean;\n  ids?: string[];\n  search?: string;\n} = {}): Promise<LeadMineBusinessesResponse> {\n  const searchParams = new URLSearchParams();\n  \n  if (params.limit) searchParams.set('limit', params.limit.toString());\n  if (params.cursor) searchParams.set('cursor', params.cursor);\n  if (params.hasEmail !== undefined) searchParams.set('hasEmail', params.hasEmail.toString());\n  if (params.createMissing !== undefined) searchParams.set('createMissing', params.createMissing.toString());\n  if (params.ids) searchParams.set('ids', params.ids.join(','));\n  if (params.search) searchParams.set('search', params.search);\n  \n  const queryString = searchParams.toString();\n  const path = `/businesses${queryString ? `?${queryString}` : ''}`;\n  \n  return leadMineFetch<LeadMineBusinessesResponse>(path);\n}\n\n// Fetch specific business by ID\nexport async function fetchLeadMineBusiness(businessId: string): Promise<LeadMineBusiness> {\n  return leadMineFetch<LeadMineBusiness>(`/businesses/${businessId}`);\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Get or create invite token for business\nexport async function getOrCreateInviteToken(businessId: string): Promise<string> {\n  try {\n    // First try to get existing token from local database\n    const existingMember = await prisma.audienceMember.findFirst({\n      where: {\n        businessId,\n        inviteToken: {\n          not: null,\n        },\n      },\n      select: {\n        inviteToken: true,\n      },\n    });\n    \n    if (existingMember?.inviteToken) {\n      return existingMember.inviteToken;\n    }\n    \n    // If no local token, fetch from LeadMine\n    const business = await fetchLeadMineBusiness(businessId);\n    \n    if (business.invite?.token) {\n      // Update local database with token\n      await prisma.audienceMember.updateMany({\n        where: {\n          businessId,\n        },\n        data: {\n          inviteToken: business.invite.token,\n        },\n      });\n      \n      return business.invite.token;\n    }\n    \n    throw new Error('No invite token available for business');\n  } catch (error) {\n    console.error('Error getting invite token:', error);\n    throw error;\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Post events to LeadMine\nexport async function postLeadMineEvent(eventData: {\n  token: string;\n  businessId: string;\n  type: string;\n  meta: Record<string, any>;\n}): Promise<void> {\n  try {\n    await leadMineFetch('/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData),\n    });\n  } catch (error) {\n    console.error('Error posting event to LeadMine:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}\n\n// Post RSVP event\nexport async function postRSVPEvent(rsvpData: {\n  rsvpId: string;\n  email: string;\n  attendanceStatus: string;\n  attendeeCount: number;\n  businessId?: string;\n  inviteToken?: string;\n}) {\n  await postLeadMineEvent({\n    token: rsvpData.inviteToken || 'rsvp-submission',\n    businessId: rsvpData.businessId || rsvpData.rsvpId,\n    type: 'rsvp_submitted',\n    meta: {\n      rsvpId: rsvpData.rsvpId,\n      email: rsvpData.email,\n      attendanceStatus: rsvpData.attendanceStatus,\n      attendeeCount: rsvpData.attendeeCount,\n      submittedAt: new Date().toISOString(),\n    },\n  });\n}\n\n// Post email engagement event\nexport async function postEmailEngagementEvent(engagementData: {\n  token: string;\n  businessId: string;\n  type: 'email_sent' | 'email_opened' | 'email_clicked' | 'email_replied';\n  campaignId?: string;\n  scheduleId?: string;\n  meta?: Record<string, any>;\n}) {\n  await postLeadMineEvent({\n    token: engagementData.token,\n    businessId: engagementData.businessId,\n    type: engagementData.type,\n    meta: {\n      campaignId: engagementData.campaignId,\n      scheduleId: engagementData.scheduleId,\n      ...engagementData.meta,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Sync business data from LeadMine to local database\nexport async function syncBusinessData(\n  groupId: string,\n  businessIds?: string[]\n): Promise<{\n  synced: number;\n  errors: number;\n  errors: string[];\n}> {\n  const results = {\n    synced: 0,\n    errors: 0,\n    errors: [] as string[]\n  };\n\n  try {\n    // Fetch businesses from LeadMine\n    const leadMineResponse = await fetchLeadMineBusinesses({\n      ids: businessIds,\n      hasEmail: true,\n      createMissing: true,\n    });\n\n    // Sync each business\n    for (const business of leadMineResponse.data) {\n      try {\n        await syncBusinessToGroup(groupId, business);\n        results.synced++;\n      } catch (error) {\n        results.errors++;\n        results.errors.push(`Failed to sync business ${business.id}: ${error.message}`);\n      }\n    }\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`Failed to fetch from LeadMine: ${error.message}`);\n  }\n\n  return results;\n}\n\n// Sync individual business to group\nasync function syncBusinessToGroup(groupId: string, business: LeadMineBusiness) {\n  const memberData = {\n    businessId: business.id,\n    businessName: business.name,\n    primaryEmail: business.contact.primaryEmail,\n    secondaryEmail: business.contact.alternateEmail,\n    tagsSnapshot: business.contact.tags,\n    inviteToken: business.invite?.token,\n    meta: {\n      lastSynced: new Date().toISOString(),\n      leadMineData: {\n        address: business.address,\n        website: business.website,\n        contactPerson: business.contact.contactPerson,\n        leadStatus: business.lead.status,\n        leadPriority: business.lead.priority,\n        assignedTo: business.lead.assignedTo,\n        nextFollowUpDate: business.lead.nextFollowUpDate,\n        inviteData: business.invite ? {\n          emailsSent: business.invite.emailsSent,\n          lastEmailSent: business.invite.lastEmailSent,\n          visitsCount: business.invite.visitsCount,\n          lastVisitedAt: business.invite.lastVisitedAt,\n          rsvpsCount: business.invite.rsvpsCount,\n          lastRsvpAt: business.invite.lastRsvpAt,\n        } : null,\n      },\n    },\n  };\n\n  // Check if member already exists\n  const existingMember = await prisma.audienceMember.findUnique({\n    where: {\n      groupId_businessId: {\n        groupId,\n        businessId: business.id,\n      },\n    },\n  });\n\n  if (existingMember) {\n    // Update existing member\n    await prisma.audienceMember.update({\n      where: {\n        groupId_businessId: {\n          groupId,\n          businessId: business.id,\n        },\n      },\n      data: memberData,\n    });\n  } else {\n    // Create new member\n    await prisma.audienceMember.create({\n      data: {\n        groupId,\n        ...memberData,\n      },\n    });\n  }\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// LeadMine configuration and health check\nexport function getLeadMineConfig(): {\n  configured: boolean;\n  baseUrl?: string;\n  apiKey?: string;\n} {\n  const baseUrl = process.env.LEADMINE_API_BASE;\n  const apiKey = process.env.LEADMINE_API_KEY;\n  \n  return {\n    configured: Boolean(baseUrl && apiKey),\n    baseUrl,\n    apiKey: apiKey ? '***' + apiKey.slice(-4) : undefined,\n  };\n}\n\nexport async function testLeadMineConnection(): Promise<{\n  success: boolean;\n  error?: string;\n}> {\n  try {\n    const config = getLeadMineConfig();\n    if (!config.configured) {\n      return {\n        success: false,\n        error: 'LeadMine not configured',\n      };\n    }\n\n    // Test with a simple request\n    await fetchLeadMineBusinesses({ limit: 1 });\n    \n    return { success: true };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n}",
        "context": "Code snippet 6",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// LeadMine integration in campaign sending\n// src/lib/campaigns.ts\nexport async function recordSendEngagement(\n  businessId: string,\n  inviteToken: string,\n  engagementType: 'email_sent' | 'email_opened' | 'email_clicked',\n  campaignId?: string,\n  scheduleId?: string,\n  meta?: Record<string, any>\n) {\n  try {\n    // Post to LeadMine\n    await postEmailEngagementEvent({\n      token: inviteToken,\n      businessId,\n      type: engagementType,\n      campaignId,\n      scheduleId,\n      meta,\n    });\n  } catch (error) {\n    console.error('Error recording engagement:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}\n\n// Update LeadMine when campaign is sent\nexport async function updateLeadMineOnCampaignSend(\n  businessId: string,\n  inviteToken: string,\n  campaignId: string,\n  scheduleId: string,\n  emailData: {\n    subject: string;\n    html: string;\n    text: string;\n  }\n) {\n  await postEmailEngagementEvent({\n    token: inviteToken,\n    businessId,\n    type: 'email_sent',\n    campaignId,\n    scheduleId,\n    meta: {\n      subject: emailData.subject,\n      contentLength: emailData.html.length,\n      textLength: emailData.text.length,\n    },\n  });\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// LeadMine error handling with retry logic\nexport async function leadMineFetchWithRetry<T>(\n  path: string,\n  init?: RequestInit,\n  maxRetries: number = 3\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await leadMineFetch<T>(path, init);\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx)\n      if (error.message.includes('(4')) {\n        throw error;\n      }\n      \n      // Wait before retry (exponential backoff)\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError;\n}\n\n// Safe LeadMine operations that don't fail the main flow\nexport async function safeLeadMineOperation<T>(\n  operation: () => Promise<T>,\n  fallback?: T\n): Promise<T | undefined> {\n  try {\n    return await operation();\n  } catch (error) {\n    console.error('LeadMine operation failed:', error);\n    return fallback;\n  }\n}",
        "context": "Code snippet 8",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// LeadMine analytics and reporting\nexport async function getLeadMineAnalytics(groupId: string): Promise<{\n  totalBusinesses: number;\n  businessesWithEmail: number;\n  businessesWithInviteToken: number;\n  totalEmailsSent: number;\n  totalVisits: number;\n  totalRSVPs: number;\n  engagementRate: number;\n}> {\n  const members = await prisma.audienceMember.findMany({\n    where: { groupId },\n    select: {\n      businessId: true,\n      primaryEmail: true,\n      inviteToken: true,\n      meta: true,\n    },\n  });\n\n  const analytics = {\n    totalBusinesses: members.length,\n    businessesWithEmail: members.filter(m => m.primaryEmail).length,\n    businessesWithInviteToken: members.filter(m => m.inviteToken).length,\n    totalEmailsSent: 0,\n    totalVisits: 0,\n    totalRSVPs: 0,\n    engagementRate: 0,\n  };\n\n  // Calculate engagement metrics from meta data\n  for (const member of members) {\n    const leadMineData = member.meta?.leadMineData;\n    if (leadMineData?.inviteData) {\n      analytics.totalEmailsSent += leadMineData.inviteData.emailsSent || 0;\n      analytics.totalVisits += leadMineData.inviteData.visitsCount || 0;\n      analytics.totalRSVPs += leadMineData.inviteData.rsvpsCount || 0;\n    }\n  }\n\n  // Calculate engagement rate\n  if (analytics.totalEmailsSent > 0) {\n    analytics.engagementRate = (analytics.totalVisits / analytics.totalEmailsSent) * 100;\n  }\n\n  return analytics;\n}",
        "context": "Code snippet 9",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// LeadMine webhook handling (if applicable)\nexport async function handleLeadMineWebhook(req: Request): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const { type, data } = body;\n\n    switch (type) {\n      case 'business_updated':\n        await handleBusinessUpdate(data);\n        break;\n      case 'business_deleted':\n        await handleBusinessDeletion(data);\n        break;\n      case 'invite_token_generated':\n        await handleInviteTokenGenerated(data);\n        break;\n      default:\n        console.log('Unknown LeadMine webhook type:', type);\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('LeadMine webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n\nasync function handleBusinessUpdate(businessData: LeadMineBusiness) {\n  // Update all audience members with this business ID\n  await prisma.audienceMember.updateMany({\n    where: { businessId: businessData.id },\n    data: {\n      businessName: businessData.name,\n      primaryEmail: businessData.contact.primaryEmail,\n      secondaryEmail: businessData.contact.alternateEmail,\n      tagsSnapshot: businessData.contact.tags,\n      inviteToken: businessData.invite?.token,\n      meta: {\n        lastSynced: new Date().toISOString(),\n        leadMineData: {\n          address: businessData.address,\n          website: businessData.website,\n          contactPerson: businessData.contact.contactPerson,\n          leadStatus: businessData.lead.status,\n          leadPriority: businessData.lead.priority,\n          assignedTo: businessData.lead.assignedTo,\n          nextFollowUpDate: businessData.lead.nextFollowUpDate,\n        },\n      },\n    },\n  });\n}\n\nasync function handleBusinessDeletion(businessData: { id: string }) {\n  // Remove all audience members with this business ID\n  await prisma.audienceMember.deleteMany({\n    where: { businessId: businessData.id },\n  });\n}\n\nasync function handleInviteTokenGenerated(data: { businessId: string; token: string }) {\n  // Update audience members with new invite token\n  await prisma.audienceMember.updateMany({\n    where: { businessId: data.businessId },\n    data: {\n      inviteToken: data.token,\n      meta: {\n        inviteTokenGeneratedAt: new Date().toISOString(),\n      },\n    },\n  });\n}",
        "context": "Code snippet 10",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "**2. BUSINESS DATA FETCHING**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. INVITE TOKEN MANAGEMENT**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. EVENT POSTING TO LEADMINE**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. BUSINESS DATA SYNCHRONIZATION**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. LEADMINE CONFIGURATION**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. CAMPAIGN INTEGRATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. ERROR HANDLING AND RETRY LOGIC**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. LEADMINE ANALYTICS**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**10. LEADMINE WEBHOOK INTEGRATION**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. LEADMINE API CLIENT**\n```typescript\n// LeadMine API client implementation\n// src/lib/leadMine.ts\nexport type LeadMineBusiness = {\n  id: string;\n  name: string | null;\n  address: string | null;\n  website: string | null;\n  createdAt: string;\n  contact: {\n    primaryEmail: string | null;\n    alternateEmail: string | null;\n    contactPerson: string | null;\n    tags: string[];\n  };\n  lead: {\n    status: string | null;\n    priority: string | null;\n    assignedTo: string | null;\n    nextFollowUpDate: string | null;\n  };\n  invite: {\n    token: string;\n    emailsSent: number;\n    lastEmailSent: string | null;\n    visitsCount: number;\n    lastVisitedAt: string | null;\n    rsvpsCount: number;\n    lastRsvpAt: string | null;\n    lastEmailMeta?: Record<string, unknown> | null;\n    lastVisitMeta?: Record<string, unknown> | null;\n    lastRsvpMeta?: Record<string, unknown> | null;\n  } | null;\n};",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. BUSINESS DATA FETCHING**\n```typescript\n// Fetch businesses from LeadMine\nexport async function fetchLeadMineBusinesses(params: {\n  limit?: number;\n  cursor?: string;\n  hasEmail?: boolean;\n  createMissing?: boolean;\n  ids?: string[];\n  search?: string;\n} = {}): Promise<LeadMineBusinessesResponse> {\n  const searchParams = new URLSearchParams();\n  \n  if (params.limit) searchParams.set('limit', params.limit.toString());\n  if (params.cursor) searchParams.set('cursor', params.cursor);\n  if (params.hasEmail !== undefined) searchParams.set('hasEmail', params.hasEmail.toString());\n  if (params.createMissing !== undefined) searchParams.set('createMissing', params.createMissing.toString());\n  if (params.ids) searchParams.set('ids', params.ids.join(','));\n  if (params.search) searchParams.set('search', params.search);\n  \n  const queryString = searchParams.toString();\n  const path = `/businesses${queryString ? `?${queryString}` : ''}`;\n  \n  return leadMineFetch<LeadMineBusinessesResponse>(path);\n}",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "3. INVITE TOKEN MANAGEMENT**\n```typescript\n// Get or create invite token for business\nexport async function getOrCreateInviteToken(businessId: string): Promise<string> {\n  try {\n    // First try to get existing token from local database\n    const existingMember = await prisma.audienceMember.findFirst({\n      where: {\n        businessId,\n        inviteToken: {\n          not: null,\n        },\n      },\n      select: {\n        inviteToken: true,\n      },\n    });\n    \n    if (existingMember?.inviteToken) {\n      return existingMember.inviteToken;\n    }\n    \n    // If no local token, fetch from LeadMine\n    const business = await fetchLeadMineBusiness(businessId);\n    \n    if (business.invite?.token) {\n      // Update local database with token\n      await prisma.audienceMember.updateMany({\n        where: {\n          businessId,\n        },\n        data: {\n          inviteToken: business.invite.token,\n        },\n      });\n      \n      return business.invite.token;\n    }\n    \n    throw new Error('No invite token available for business');\n  } catch (error) {\n    console.error('Error getting invite token:', error);\n    throw error;\n  }\n}\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "4. EVENT POSTING TO LEADMINE**\n```typescript\n// Post events to LeadMine\nexport async function postLeadMineEvent(eventData: {\n  token: string;\n  businessId: string;\n  type: string;\n  meta: Record<string, any>;\n}): Promise<void> {\n  try {\n    await leadMineFetch('/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData),\n    });\n  } catch (error) {\n    console.error('Error posting event to LeadMine:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "5. BUSINESS DATA SYNCHRONIZATION**\n```typescript\n// Sync business data from LeadMine to local database\nexport async function syncBusinessData(\n  groupId: string,\n  businessIds?: string[]\n): Promise<{\n  synced: number;\n  errors: number;\n  errors: string[];\n}> {\n  const results = {\n    synced: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. LEADMINE CONFIGURATION**\n```typescript\n// LeadMine configuration and health check\nexport function getLeadMineConfig(): {\n  configured: boolean;\n  baseUrl?: string;\n  apiKey?: string;\n} {\n  const baseUrl = process.env.LEADMINE_API_BASE;\n  const apiKey = process.env.LEADMINE_API_KEY;\n  \n  return {\n    configured: Boolean(baseUrl && apiKey),\n    baseUrl,\n    apiKey: apiKey ? '***' + apiKey.slice(-4) : undefined,\n  };\n}",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "7. CAMPAIGN INTEGRATION**\n```typescript\n// LeadMine integration in campaign sending\n// src/lib/campaigns.ts\nexport async function recordSendEngagement(\n  businessId: string,\n  inviteToken: string,\n  engagementType: 'email_sent' | 'email_opened' | 'email_clicked',\n  campaignId?: string,\n  scheduleId?: string,\n  meta?: Record<string, any>\n) {\n  try {\n    // Post to LeadMine\n    await postEmailEngagementEvent({\n      token: inviteToken,\n      businessId,\n      type: engagementType,\n      campaignId,\n      scheduleId,\n      meta,\n    });\n  } catch (error) {\n    console.error('Error recording engagement:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "8. ERROR HANDLING AND RETRY LOGIC**\n```typescript\n// LeadMine error handling with retry logic\nexport async function leadMineFetchWithRetry<T>(\n  path: string,\n  init?: RequestInit,\n  maxRetries: number = 3\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await leadMineFetch<T>(path, init);\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx)\n      if (error.message.includes('(4')) {\n        throw error;\n      }\n      \n      // Wait before retry (exponential backoff)\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError;\n}",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "9. LEADMINE ANALYTICS**\n```typescript\n// LeadMine analytics and reporting\nexport async function getLeadMineAnalytics(groupId: string): Promise<{\n  totalBusinesses: number;\n  businessesWithEmail: number;\n  businessesWithInviteToken: number;\n  totalEmailsSent: number;\n  totalVisits: number;\n  totalRSVPs: number;\n  engagementRate: number;\n}> {\n  const members = await prisma.audienceMember.findMany({\n    where: { groupId },\n    select: {\n      businessId: true,\n      primaryEmail: true,\n      inviteToken: true,\n      meta: true,\n    },\n  });",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "10. LEADMINE WEBHOOK INTEGRATION**\n```typescript\n// LeadMine webhook handling (if applicable)\nexport async function handleLeadMineWebhook(req: Request): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const { type, data } = body;",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**1. LEADMINE API CLIENT**\n```typescript\n// LeadMine API client implementation\n// src/lib/leadMine.ts\nexport type LeadMineBusiness = {\n  id: string;\n  name: string | null;\n  address: string | null;\n  website: string | null;\n  createdAt: string;\n  contact: {\n    primaryEmail: string | null;\n    alternateEmail: string | null;\n    contactPerson: string | null;\n    tags: string[];\n  };\n  lead: {\n    status: string | null;\n    priority: string | null;\n    assignedTo: string | null;\n    nextFollowUpDate: string | null;\n  };\n  invite: {\n    token: string;\n    emailsSent: number;\n    lastEmailSent: string | null;\n    visitsCount: number;\n    lastVisitedAt: string | null;\n    rsvpsCount: number;\n    lastRsvpAt: string | null;\n    lastEmailMeta?: Record<string, unknown> | null;\n    lastVisitMeta?: Record<string, unknown> | null;\n    lastRsvpMeta?: Record<string, unknown> | null;\n  } | null;\n};",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Fetch businesses from LeadMine\nexport async function fetchLeadMineBusinesses(params: {\n  limit?: number;\n  cursor?: string;\n  hasEmail?: boolean;\n  createMissing?: boolean;\n  ids?: string[];\n  search?: string;\n} = {}): Promise<LeadMineBusinessesResponse> {\n  const searchParams = new URLSearchParams();\n  \n  if (params.limit) searchParams.set('limit', params.limit.toString());\n  if (params.cursor) searchParams.set('cursor', params.cursor);\n  if (params.hasEmail !== undefined) searchParams.set('hasEmail', params.hasEmail.toString());\n  if (params.createMissing !== undefined) searchParams.set('createMissing', params.createMissing.toString());\n  if (params.ids) searchParams.set('ids', params.ids.join(','));\n  if (params.search) searchParams.set('search', params.search);\n  \n  const queryString = searchParams.toString();\n  const path = `/businesses${queryString ? `?${queryString}` : ''}`;\n  \n  return leadMineFetch<LeadMineBusinessesResponse>(path);\n}",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Get or create invite token for business\nexport async function getOrCreateInviteToken(businessId: string): Promise<string> {\n  try {\n    // First try to get existing token from local database\n    const existingMember = await prisma.audienceMember.findFirst({\n      where: {\n        businessId,\n        inviteToken: {\n          not: null,\n        },\n      },\n      select: {\n        inviteToken: true,\n      },\n    });\n    \n    if (existingMember?.inviteToken) {\n      return existingMember.inviteToken;\n    }\n    \n    // If no local token, fetch from LeadMine\n    const business = await fetchLeadMineBusiness(businessId);\n    \n    if (business.invite?.token) {\n      // Update local database with token\n      await prisma.audienceMember.updateMany({\n        where: {\n          businessId,\n        },\n        data: {\n          inviteToken: business.invite.token,\n        },\n      });\n      \n      return business.invite.token;\n    }\n    \n    throw new Error('No invite token available for business');\n  } catch (error) {\n    console.error('Error getting invite token:', error);\n    throw error;\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Post events to LeadMine\nexport async function postLeadMineEvent(eventData: {\n  token: string;\n  businessId: string;\n  type: string;\n  meta: Record<string, any>;\n}): Promise<void> {\n  try {\n    await leadMineFetch('/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData),\n    });\n  } catch (error) {\n    console.error('Error posting event to LeadMine:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Sync business data from LeadMine to local database\nexport async function syncBusinessData(\n  groupId: string,\n  businessIds?: string[]\n): Promise<{\n  synced: number;\n  errors: number;\n  errors: string[];\n}> {\n  const results = {\n    synced: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// LeadMine configuration and health check\nexport function getLeadMineConfig(): {\n  configured: boolean;\n  baseUrl?: string;\n  apiKey?: string;\n} {\n  const baseUrl = process.env.LEADMINE_API_BASE;\n  const apiKey = process.env.LEADMINE_API_KEY;\n  \n  return {\n    configured: Boolean(baseUrl && apiKey),\n    baseUrl,\n    apiKey: apiKey ? '***' + apiKey.slice(-4) : undefined,\n  };\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// LeadMine integration in campaign sending\n// src/lib/campaigns.ts\nexport async function recordSendEngagement(\n  businessId: string,\n  inviteToken: string,\n  engagementType: 'email_sent' | 'email_opened' | 'email_clicked',\n  campaignId?: string,\n  scheduleId?: string,\n  meta?: Record<string, any>\n) {\n  try {\n    // Post to LeadMine\n    await postEmailEngagementEvent({\n      token: inviteToken,\n      businessId,\n      type: engagementType,\n      campaignId,\n      scheduleId,\n      meta,\n    });\n  } catch (error) {\n    console.error('Error recording engagement:', error);\n    // Don't throw - this is not critical for the main flow\n  }\n}",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```typescript\n// LeadMine error handling with retry logic\nexport async function leadMineFetchWithRetry<T>(\n  path: string,\n  init?: RequestInit,\n  maxRetries: number = 3\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await leadMineFetch<T>(path, init);\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx)\n      if (error.message.includes('(4')) {\n        throw error;\n      }\n      \n      // Wait before retry (exponential backoff)\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError;\n}",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// LeadMine analytics and reporting\nexport async function getLeadMineAnalytics(groupId: string): Promise<{\n  totalBusinesses: number;\n  businessesWithEmail: number;\n  businessesWithInviteToken: number;\n  totalEmailsSent: number;\n  totalVisits: number;\n  totalRSVPs: number;\n  engagementRate: number;\n}> {\n  const members = await prisma.audienceMember.findMany({\n    where: { groupId },\n    select: {\n      businessId: true,\n      primaryEmail: true,\n      inviteToken: true,\n      meta: true,\n    },\n  });",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// LeadMine webhook handling (if applicable)\nexport async function handleLeadMineWebhook(req: Request): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const { type, data } = body;",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- this is not critical for the main flow\n  }\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- this is not critical for the main flow\n  }\n}",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Webhook Handling",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "'LeadMine not configured',\n      };\n    }",
      "error.message,\n    };\n  }\n}\n```",
      "Error;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await leadMineFetch<T>(path, init);\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx)\n      if (error.message.includes('(4')) {\n        throw error;\n      }\n      \n      // Wait before retry (exponential backoff)\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError;\n}",
      "', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}"
    ],
    "related_apis": [],
    "related_components": [
      "Mine.ts",
      "leadMine.ts",
      "campaigns.ts",
      "res.js",
      "req.js",
      "NextResponse.js",
      "src/lib/leadMine.ts",
      "src/lib/campaigns.ts"
    ],
    "tags": [
      "prisma",
      "leadmine-integration",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "09-complete-email-system-accurate_1",
    "category": "Complete Email System",
    "subcategory": "General",
    "title": "The complete email system",
    "description": "How does the complete email system work? - Explain the email system with Resend, SendGrid, and ImprovMX",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';\nconst linkBase = process.env.CAMPAIGN_LINK_BASE?.replace(/\\/$/, '') || 'https://rsvp.evergreenwebsolutions.ca';\n\n// Resend client\nconst resend = new Resend(resendKey);",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get campaign data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  // Send via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: processedSubject,\n    html: html,\n    text: text\n  });\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date()\n    }\n  });\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// In sendgrid-email.ts\nimport sgMail from '@sendgrid/mail';\n\n// Initialize SendGrid\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\n// Email configuration\nconst EMAIL_CONFIG = {\n  from: process.env.FROM_EMAIL || 'AI Events <events@evergreenwebsolutions.ca>',\n  replyTo: process.env.REPLY_TO_EMAIL || 'gabriel@evergreenwebsolutions.ca',\n  domain: process.env.SENDGRID_DOMAIN || 'evergreenwebsolutions.ca'\n};",
        "context": "Code snippet 3",
        "purpose": "Module import/export"
      },
      {
        "language": "javascript",
        "code": "// Send RSVP confirmation email\nexport async function sendRSVPConfirmation({ to, name, rsvpId }) {\n  const msg = {\n    to: [to],\n    from: {\n      email: 'events@evergreenwebsolutions.ca',\n      name: 'AI Events'\n    },\n    replyTo: 'gabriel@evergreenwebsolutions.ca',\n    subject: `RSVP Confirmed: AI in Northern BC - October 23, 2025`,\n    html: generateRSVPConfirmationHTML(name, eventDetails),\n    text: generateRSVPConfirmationText(name, eventDetails),\n    headers: {\n      'List-Unsubscribe': '<mailto:unsubscribe@evergreenwebsolutions.ca>',\n      'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n      'X-Campaign-ID': 'ai-event-2025',\n      'X-RSVP-ID': rsvpId,\n      'X-Mailer': 'Evergreen Web Solutions RSVP System'\n    },\n    categories: ['rsvp-confirmation', 'ai-event-2025'],\n    customArgs: {\n      rsvp_id: rsvpId,\n      event_type: 'rsvp-confirmation'\n    }\n  };\n  \n  const response = await sgMail.send(msg);\n  return { \n    success: true, \n    messageId: response[0].headers['x-message-id'] as string\n  };\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// RSVP submission triggers both systems\nconst emailResult = await sendRSVPConfirmation({\n  to: values.email,\n  name: fullName,\n  rsvpId: rsvp.id\n});\n\n// Campaign emails sent via Resend\nconst campaignResult = await sendCampaignEmail(jobId);\n\n// Replies handled via ImprovMX\n// (Configured at domain level)",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// In security-headers.ts\n'connect-src': [\n  \"'self'\", \n  \"https://api.lead-mine.vercel.app\", \n  \"https://api.resend.com\", \n  \"https://api.sendgrid.com\"\n]",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "javascript",
        "code": "// Test Resend configuration\nexport async function testResendConfiguration() {\n  try {\n    const response = await resend.emails.send({\n      from: 'test@evergreenwebsolutions.ca',\n      to: ['test@example.com'],\n      subject: 'Test Email',\n      html: '<p>Test email</p>'\n    });\n    return response.data?.id ? true : false;\n  } catch (error) {\n    console.error('Resend test failed:', error);\n    return false;\n  }\n}\n\n// Test SendGrid configuration\nexport async function testSendGridConfiguration() {\n  try {\n    const msg = {\n      to: 'test@example.com',\n      from: {\n        email: 'events@evergreenwebsolutions.ca',\n        name: 'AI Events'\n      },\n      subject: 'Test Email Configuration',\n      html: '<p>This is a test email to verify SendGrid configuration.</p>'\n    };\n    await sgMail.send(msg);\n    return true;\n  } catch (error) {\n    console.error('SendGrid test failed:', error);\n    return false;\n  }\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "**Email Sending Process:**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. SENDGRID TRANSACTIONAL SYSTEM**\n\n**Configuration:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**RSVP Confirmation Email:**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. IMPROVMX EMAIL RECEIVING**\n\n**Configuration:**\n- **Domain**: `evergreenwebsolutions.ca`\n- **MX Records**: Point to ImprovMX servers\n- **Purpose**: Receive replies, bounces, unsubscribes\n- **Forwarding**: Emails forwarded to your personal inbox\n\n**Use Cases:**\n- **Reply Handling**: Process replies to campaign emails\n- **Bounce Management**: Handle bounced emails\n- **Unsubscribe Processing**: Process unsubscribe requests\n- **Support Inquiries**: Handle support emails\n\n**5. EMAIL WORKFLOW INTEGRATION**\n\n**Campaign Email Flow:**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Email Processing Pipeline:**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. EMAIL TRACKING & ANALYTICS**\n\n**Resend Tracking:**\n- **Open Tracking**: Pixel tracking in emails\n- **Click Tracking**: Link tracking with UTM parameters\n- **Delivery Status**: Real-time delivery status\n- **Bounce Handling**: Automatic bounce processing\n\n**SendGrid Tracking:**\n- **Webhook Events**: Bounce, open, click, spam reports\n- **Event Processing**: Real-time event handling\n- **Suppression Lists**: Automatic bounce suppression\n- **Engagement Metrics**: Open and click rates\n\n**ImprovMX Integration:**\n- **Reply Processing**: Handle incoming replies\n- **Bounce Forwarding**: Forward bounces to system\n- **Unsubscribe Handling**: Process unsubscribe requests\n- **Support Routing**: Route support emails\n\n**7. EMAIL SECURITY & COMPLIANCE**\n\n**Security Headers:**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Compliance Features:**\n- **Unsubscribe Links**: Required in all emails\n- **Privacy Policy**: Linked in email footers\n- **Data Protection**: GDPR/CCPA compliance\n- **Audit Trails**: Complete email logging\n\n**8. EMAIL MONITORING & MAINTENANCE**\n\n**Health Checks:**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. EMAIL PROVIDERS OVERVIEW**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. RESEND CAMPAIGN SYSTEM**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. SENDGRID TRANSACTIONAL SYSTEM**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "4. IMPROVMX EMAIL RECEIVING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. EMAIL WORKFLOW INTEGRATION**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. SendGrid sends confirmation email",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. Resend sends campaign emails to audience",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "4. ImprovMX receives replies/bounces",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. System processes responses\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. EMAIL TRACKING & ANALYTICS**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. EMAIL SECURITY & COMPLIANCE**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. EMAIL MONITORING & MAINTENANCE**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "9. EMAIL SYSTEM TROUBLESHOOTING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "1. **Check API Keys**: Verify all API keys are configured",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "2. **Test Email Sending**: Send test emails to verify functionality",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "3. **Review Logs**: Check error logs for specific issues",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "4. **Validate Templates**: Test template rendering",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "5. **Check DNS**: Verify MX records for ImprovMX",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "6. **Monitor Metrics**: Check delivery rates and engagement",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "10. EMAIL SYSTEM OPTIMIZATION**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**1. EMAIL PROVIDERS OVERVIEW**",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Purpose**: Outbound marketing campaigns\n- **Use Case**: Sending campaign emails to business audiences\n- **Features**: Template rendering, tracking, analytics\n- **From Address**: `gabriel@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Purpose**: RSVP confirmation emails\n- **Use Case**: Automated responses to user actions\n- **Features**: Event confirmations, reminders, notifications\n- **From Address**: `events@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Purpose**: Receive emails at custom domains\n- **Use Case**: Handle replies, bounces, unsubscribes\n- **Features**: Email forwarding, domain management\n- **Configuration**: MX records for `evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Configuration:**\n```javascript\n// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';\nconst linkBase = process.env.CAMPAIGN_LINK_BASE?.replace(/\\/$/, '') || 'https://rsvp.evergreenwebsolutions.ca';",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```javascript\n// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get campaign data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  // Send via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: processedSubject,\n    html: html,\n    text: text\n  });\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date()\n    }\n  });\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Configuration:**\n```javascript\n// In sendgrid-email.ts\nimport sgMail from '@sendgrid/mail';",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```javascript\n// Send RSVP confirmation email\nexport async function sendRSVPConfirmation({ to, name, rsvpId }) {\n  const msg = {\n    to: [to],\n    from: {\n      email: 'events@evergreenwebsolutions.ca',\n      name: 'AI Events'\n    },\n    replyTo: 'gabriel@evergreenwebsolutions.ca',\n    subject: `RSVP Confirmed: AI in Northern BC - October 23, 2025`,\n    html: generateRSVPConfirmationHTML(name, eventDetails),\n    text: generateRSVPConfirmationText(name, eventDetails),\n    headers: {\n      'List-Unsubscribe': '<mailto:unsubscribe@evergreenwebsolutions.ca>',\n      'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n      'X-Campaign-ID': 'ai-event-2025',\n      'X-RSVP-ID': rsvpId,\n      'X-Mailer': 'Evergreen Web Solutions RSVP System'\n    },\n    categories: ['rsvp-confirmation', 'ai-event-2025'],\n    customArgs: {\n      rsvp_id: rsvpId,\n      event_type: 'rsvp-confirmation'\n    }\n  };\n  \n  const response = await sgMail.send(msg);\n  return { \n    success: true, \n    messageId: response[0].headers['x-message-id'] as string\n  };\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Configuration:**\n- **Domain**: `evergreenwebsolutions.ca`\n- **MX Records**: Point to ImprovMX servers\n- **Purpose**: Receive replies, bounces, unsubscribes\n- **Forwarding**: Emails forwarded to your personal inbox",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Reply Handling**: Process replies to campaign emails\n- **Bounce Management**: Handle bounced emails\n- **Unsubscribe Processing**: Process unsubscribe requests\n- **Support Inquiries**: Handle support emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Campaign Email Flow:**\n```\n1. User submits RSVP\n2. SendGrid sends confirmation email\n3. Resend sends campaign emails to audience\n4. ImprovMX receives replies/bounces\n5. System processes responses\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```javascript\n// RSVP submission triggers both systems\nconst emailResult = await sendRSVPConfirmation({\n  to: values.email,\n  name: fullName,\n  rsvpId: rsvp.id\n});",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Resend Tracking:**\n- **Open Tracking**: Pixel tracking in emails\n- **Click Tracking**: Link tracking with UTM parameters\n- **Delivery Status**: Real-time delivery status\n- **Bounce Handling**: Automatic bounce processing",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **Webhook Events**: Bounce, open, click, spam reports\n- **Event Processing**: Real-time event handling\n- **Suppression Lists**: Automatic bounce suppression\n- **Engagement Metrics**: Open and click rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Reply Processing**: Handle incoming replies\n- **Bounce Forwarding**: Forward bounces to system\n- **Unsubscribe Handling**: Process unsubscribe requests\n- **Support Routing**: Route support emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Security Headers:**\n```javascript\n// In security-headers.ts\n'connect-src': [\n  \"'self'\", \n  \"https://api.lead-mine.vercel.app\", \n  \"https://api.resend.com\", \n  \"https://api.sendgrid.com\"\n]\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **Unsubscribe Links**: Required in all emails\n- **Privacy Policy**: Linked in email footers\n- **Data Protection**: GDPR/CCPA compliance\n- **Audit Trails**: Complete email logging",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Health Checks:**\n```javascript\n// Test Resend configuration\nexport async function testResendConfiguration() {\n  try {\n    const response = await resend.emails.send({\n      from: 'test@evergreenwebsolutions.ca',\n      to: ['test@example.com'],\n      subject: 'Test Email',\n      html: '<p>Test email</p>'\n    });\n    return response.data?.id ? true : false;\n  } catch (error) {\n    console.error('Resend test failed:', error);\n    return false;\n  }\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Common Issues:**\n- **Resend API Errors**: Check API key, rate limits\n- **SendGrid Delivery Issues**: Verify domain authentication\n- **ImprovMX Setup**: Check MX records, forwarding rules\n- **Template Rendering**: Validate HTML, test variables\n- **Tracking Issues**: Check pixel placement, link formatting",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n1. **Check API Keys**: Verify all API keys are configured\n2. **Test Email Sending**: Send test emails to verify functionality\n3. **Review Logs**: Check error logs for specific issues\n4. **Validate Templates**: Test template rendering\n5. **Check DNS**: Verify MX records for ImprovMX\n6. **Monitor Metrics**: Check delivery rates and engagement",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Performance Tips:**\n- **Batch Processing**: Send emails in batches\n- **Rate Limiting**: Respect provider rate limits\n- **Template Caching**: Cache rendered templates\n- **Database Optimization**: Index email-related tables\n- **Error Handling**: Implement retry logic",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **Consistent Branding**: Use global template system\n- **Personalization**: Use dynamic variables\n- **Testing**: Test all email types before sending\n- **Monitoring**: Track delivery and engagement metrics\n- **Compliance**: Follow email regulations and best practices",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Purpose**: Outbound marketing campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Use Case**: Sending campaign emails to business audiences",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Features**: Template rendering, tracking, analytics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **From Address**: `gabriel@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Purpose**: RSVP confirmation emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Use Case**: Automated responses to user actions",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Features**: Event confirmations, reminders, notifications",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **From Address**: `events@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Purpose**: Receive emails at custom domains",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Use Case**: Handle replies, bounces, unsubscribes",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Features**: Email forwarding, domain management",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Configuration**: MX records for `evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- October 23, 2025`,\n    html: generateRSVPConfirmationHTML(name, eventDetails),\n    text: generateRSVPConfirmationText(name, eventDetails),\n    headers: {\n      'List-Unsubscribe': '<mailto:unsubscribe@evergreenwebsolutions.ca>',\n      'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n      'X-Campaign-ID': 'ai-event-2025',\n      'X-RSVP-ID': rsvpId,\n      'X-Mailer': 'Evergreen Web Solutions RSVP System'\n    },\n    categories: ['rsvp-confirmation', 'ai-event-2025'],\n    customArgs: {\n      rsvp_id: rsvpId,\n      event_type: 'rsvp-confirmation'\n    }\n  };\n  \n  const response = await sgMail.send(msg);\n  return { \n    success: true, \n    messageId: response[0].headers['x-message-id'] as string\n  };\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Domain**: `evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **MX Records**: Point to ImprovMX servers",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Purpose**: Receive replies, bounces, unsubscribes",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Forwarding**: Emails forwarded to your personal inbox",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Reply Handling**: Process replies to campaign emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Bounce Management**: Handle bounced emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Unsubscribe Processing**: Process unsubscribe requests",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Support Inquiries**: Handle support emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Open Tracking**: Pixel tracking in emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Click Tracking**: Link tracking with UTM parameters",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Delivery Status**: Real-time delivery status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Bounce Handling**: Automatic bounce processing",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Webhook Events**: Bounce, open, click, spam reports",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Event Processing**: Real-time event handling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Suppression Lists**: Automatic bounce suppression",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Engagement Metrics**: Open and click rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Reply Processing**: Handle incoming replies",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Bounce Forwarding**: Forward bounces to system",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Unsubscribe Handling**: Process unsubscribe requests",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Support Routing**: Route support emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Unsubscribe Links**: Required in all emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Privacy Policy**: Linked in email footers",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Data Protection**: GDPR/CCPA compliance",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Audit Trails**: Complete email logging",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Resend API Errors**: Check API key, rate limits",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- **SendGrid Delivery Issues**: Verify domain authentication",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- **ImprovMX Setup**: Check MX records, forwarding rules",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- **Template Rendering**: Validate HTML, test variables",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- **Tracking Issues**: Check pixel placement, link formatting",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- **Batch Processing**: Send emails in batches",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Rate Limiting**: Respect provider rate limits",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Template Caching**: Cache rendered templates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Database Optimization**: Index email-related tables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Error Handling**: Implement retry logic",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Consistent Branding**: Use global template system",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Personalization**: Use dynamic variables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Testing**: Test all email types before sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Monitoring**: Track delivery and engagement metrics",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Compliance**: Follow email regulations and best practices",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [],
    "related_components": [
      "sender.ts",
      "email.ts",
      "headers.ts"
    ],
    "tags": [
      "prisma",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "security",
      "sendgrid",
      "complete-email-system"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "regional_focus": "Northern BC",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "09-complete-email-system-accurate_3",
    "category": "Complete Email System",
    "subcategory": "General",
    "title": "How do i configure email receiving with improvmx",
    "description": "How do I configure email receiving with ImprovMX? - Set up email receiving for replies and bounces",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// In your application\nconst IMPROVMX_WEBHOOK_URL = 'https://rsvp.evergreenwebsolutions.ca/api/webhooks/improvmx';\n\n// ImprovMX webhook endpoint\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Process incoming email\n    const { from, to, subject, body: emailBody, headers } = body;\n    \n    // Determine email type\n    if (to.includes('bounces@')) {\n      await handleBounceEmail({ from, subject, emailBody });\n    } else if (to.includes('unsubscribe@')) {\n      await handleUnsubscribeEmail({ from, subject, emailBody });\n    } else if (to.includes('support@')) {\n      await handleSupportEmail({ from, subject, emailBody });\n    } else {\n      await handleReplyEmail({ from, subject, emailBody });\n    }\n    \n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('ImprovMX webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}",
        "context": "Code snippet 1",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Handle bounced emails\nexport async function handleBounceEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original recipient from bounce email\n    const recipientMatch = emailBody.match(/Original-Recipient: (.+)/i);\n    const recipient = recipientMatch ? recipientMatch[1] : null;\n    \n    if (recipient) {\n      // Update database to mark email as bounced\n      await prisma.audienceMember.updateMany({\n        where: { primaryEmail: recipient },\n        data: { \n          unsubscribed: true,\n          meta: {\n            ...existingMeta,\n            bounceReason: 'Hard bounce',\n            bouncedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Log bounce event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'bounce',\n          meta: {\n            recipient,\n            bounceType: 'hard',\n            bounceReason: subject,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Bounce processing failed:', error);\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Handle unsubscribe emails\nexport async function handleUnsubscribeEmail({ from, subject, emailBody }) {\n  try {\n    // Extract email address from unsubscribe request\n    const emailMatch = from.match(/<(.+)>/);\n    const email = emailMatch ? emailMatch[1] : from;\n    \n    // Update database to mark as unsubscribed\n    await prisma.audienceMember.updateMany({\n      where: { primaryEmail: email },\n      data: { \n        unsubscribed: true,\n        meta: {\n          ...existingMeta,\n          unsubscribedAt: new Date().toISOString(),\n          unsubscribeMethod: 'email'\n        }\n      }\n    });\n    \n    // Log unsubscribe event\n    await prisma.emailEvent.create({\n      data: {\n        type: 'unsubscribe',\n        meta: {\n          email,\n          unsubscribeMethod: 'email',\n          processedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send confirmation email\n    await sendUnsubscribeConfirmation(email);\n  } catch (error) {\n    console.error('Unsubscribe processing failed:', error);\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Handle reply emails\nexport async function handleReplyEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original campaign info from subject\n    const campaignMatch = subject.match(/Re: (.+)/i);\n    const originalSubject = campaignMatch ? campaignMatch[1] : subject;\n    \n    // Find corresponding campaign send\n    const campaignSend = await prisma.campaignSend.findFirst({\n      where: {\n        email: from,\n        meta: {\n          path: ['template', 'subject'],\n          equals: originalSubject\n        }\n      },\n      include: { schedule: { include: { campaign: true } } }\n    });\n    \n    if (campaignSend) {\n      // Log reply event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'reply',\n          meta: {\n            campaignId: campaignSend.schedule.campaignId,\n            scheduleId: campaignSend.scheduleId,\n            businessId: campaignSend.businessId,\n            replyContent: emailBody,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Send to LeadMine\n      await postLeadMineEvent({\n        token: campaignSend.inviteToken,\n        businessId: campaignSend.businessId,\n        type: 'email_reply',\n        meta: {\n          campaignId: campaignSend.schedule.campaignId,\n          replyContent: emailBody,\n          repliedAt: new Date().toISOString()\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Reply processing failed:', error);\n  }\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Handle support emails\nexport async function handleSupportEmail({ from, subject, emailBody }) {\n  try {\n    // Create support ticket\n    const ticket = await prisma.supportTicket.create({\n      data: {\n        email: from,\n        subject: subject,\n        content: emailBody,\n        status: 'open',\n        priority: 'normal',\n        meta: {\n          source: 'email',\n          receivedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send auto-reply\n    await sendSupportAutoReply(from, ticket.id);\n    \n    // Notify admin\n    await notifyAdminOfNewTicket(ticket);\n  } catch (error) {\n    console.error('Support email processing failed:', error);\n  }\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Validate email addresses before processing\nexport function validateIncomingEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email) && email.length <= 254;\n}\n\n// Check if email is from allowed domain\nexport function isAllowedDomain(email: string): boolean {\n  const allowedDomains = [\n    'evergreenwebsolutions.ca',\n    'gmail.com',\n    'outlook.com',\n    'yahoo.com'\n  ];\n  \n  const domain = email.split('@')[1];\n  return allowedDomains.includes(domain?.toLowerCase());\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// Check ImprovMX configuration\nexport async function checkImprovMXConfiguration(): Promise<boolean> {\n  try {\n    // Test MX records\n    const mxRecords = await dns.resolveMx('evergreenwebsolutions.ca');\n    const hasImprovMX = mxRecords.some(record => \n      record.exchange.includes('improvmx.com')\n    );\n    \n    if (!hasImprovMX) {\n      console.error('ImprovMX MX records not found');\n      return false;\n    }\n    \n    // Test webhook endpoint\n    const response = await fetch('/api/webhooks/improvmx', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ test: true })\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('ImprovMX configuration check failed:', error);\n    return false;\n  }\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "# DNS Configuration for evergreenwebsolutions.ca\nType: MX\nPriority: 10\nValue: mx1.improvmx.com\n\nType: MX\nPriority: 20\nValue: mx2.improvmx.com",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "# Forward all emails to your personal inbox\ngabriel@evergreenwebsolutions.ca → your-personal-email@gmail.com\nevents@evergreenwebsolutions.ca → your-personal-email@gmail.com\nsupport@evergreenwebsolutions.ca → your-personal-email@gmail.com",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "# Bounce handling\nbounces@evergreenwebsolutions.ca → bounce-processor@evergreenwebsolutions.ca\n\n# Unsubscribe handling\nunsubscribe@evergreenwebsolutions.ca → unsubscribe-processor@evergreenwebsolutions.ca\n\n# Support routing\nsupport@evergreenwebsolutions.ca → support-system@evergreenwebsolutions.ca",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. BOUNCE EMAIL HANDLING**\n\n**Bounce Processing:**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. UNSUBSCRIBE EMAIL HANDLING**\n\n**Unsubscribe Processing:**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. REPLY EMAIL HANDLING**\n\n**Reply Processing:**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. SUPPORT EMAIL HANDLING**\n\n**Support Email Processing:**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. EMAIL ADDRESS VALIDATION**\n\n**Validation Rules:**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**10. MONITORING & MAINTENANCE**\n\n**Health Checks:**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**11. EMAIL SYSTEM INTEGRATION**\n\n**Complete Email Flow:**",
        "context": "Code snippet 10",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Database Schema Updates:**",
        "context": "Code snippet 11",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "2. EMAIL ADDRESSES CONFIGURATION**",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "3. IMPROVMX FORWARDING RULES**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. EMAIL PROCESSING INTEGRATION**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. BOUNCE EMAIL HANDLING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. UNSUBSCRIBE EMAIL HANDLING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. REPLY EMAIL HANDLING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. SUPPORT EMAIL HANDLING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "9. EMAIL ADDRESS VALIDATION**",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "10. MONITORING & MAINTENANCE**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "11. EMAIL SYSTEM INTEGRATION**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "1. Resend sends campaign email",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "2. User replies to gabriel@evergreenwebsolutions.ca",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. ImprovMX receives reply",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. Webhook processes reply",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. System logs engagement",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. LeadMine receives event",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. Admin gets notification\n```",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "*\n\n**1. IMPROVMX SETUP**",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Domain**: `evergreenwebsolutions.ca`\n- **Service**: ImprovMX (improvmx.com)\n- **Purpose**: Receive emails at custom addresses\n- **Forwarding**: Forward to your personal inbox",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```\n# DNS Configuration for evergreenwebsolutions.ca\nType: MX\nPriority: 10\nValue: mx1.improvmx.com",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Campaign Email Addresses:**\n- **From Address**: `gabriel@evergreenwebsolutions.ca`\n- **Reply-To**: `gabriel@evergreenwebsolutions.ca`\n- **Bounce Address**: `bounces@evergreenwebsolutions.ca`\n- **Unsubscribe**: `unsubscribe@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **From Address**: `events@evergreenwebsolutions.ca`\n- **Reply-To**: `gabriel@evergreenwebsolutions.ca`\n- **Support**: `support@evergreenwebsolutions.ca`\n- **Admin**: `admin@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Basic Forwarding:**\n```\n# Forward all emails to your personal inbox\ngabriel@evergreenwebsolutions.ca → your-personal-email@gmail.com\nevents@evergreenwebsolutions.ca → your-personal-email@gmail.com\nsupport@evergreenwebsolutions.ca → your-personal-email@gmail.com\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```\n# Bounce handling\nbounces@evergreenwebsolutions.ca → bounce-processor@evergreenwebsolutions.ca",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Webhook Configuration:**\n```javascript\n// In your application\nconst IMPROVMX_WEBHOOK_URL = 'https://rsvp.evergreenwebsolutions.ca/api/webhooks/improvmx';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Bounce Processing:**\n```javascript\n// Handle bounced emails\nexport async function handleBounceEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original recipient from bounce email\n    const recipientMatch = emailBody.match(/Original-Recipient: (.+)/i);\n    const recipient = recipientMatch ? recipientMatch[1] : null;\n    \n    if (recipient) {\n      // Update database to mark email as bounced\n      await prisma.audienceMember.updateMany({\n        where: { primaryEmail: recipient },\n        data: { \n          unsubscribed: true,\n          meta: {\n            ...existingMeta,\n            bounceReason: 'Hard bounce',\n            bouncedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Log bounce event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'bounce',\n          meta: {\n            recipient,\n            bounceType: 'hard',\n            bounceReason: subject,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Bounce processing failed:', error);\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Unsubscribe Processing:**\n```javascript\n// Handle unsubscribe emails\nexport async function handleUnsubscribeEmail({ from, subject, emailBody }) {\n  try {\n    // Extract email address from unsubscribe request\n    const emailMatch = from.match(/<(.+)>/);\n    const email = emailMatch ? emailMatch[1] : from;\n    \n    // Update database to mark as unsubscribed\n    await prisma.audienceMember.updateMany({\n      where: { primaryEmail: email },\n      data: { \n        unsubscribed: true,\n        meta: {\n          ...existingMeta,\n          unsubscribedAt: new Date().toISOString(),\n          unsubscribeMethod: 'email'\n        }\n      }\n    });\n    \n    // Log unsubscribe event\n    await prisma.emailEvent.create({\n      data: {\n        type: 'unsubscribe',\n        meta: {\n          email,\n          unsubscribeMethod: 'email',\n          processedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send confirmation email\n    await sendUnsubscribeConfirmation(email);\n  } catch (error) {\n    console.error('Unsubscribe processing failed:', error);\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Reply Processing:**\n```javascript\n// Handle reply emails\nexport async function handleReplyEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original campaign info from subject\n    const campaignMatch = subject.match(/Re: (.+)/i);\n    const originalSubject = campaignMatch ? campaignMatch[1] : subject;\n    \n    // Find corresponding campaign send\n    const campaignSend = await prisma.campaignSend.findFirst({\n      where: {\n        email: from,\n        meta: {\n          path: ['template', 'subject'],\n          equals: originalSubject\n        }\n      },\n      include: { schedule: { include: { campaign: true } } }\n    });\n    \n    if (campaignSend) {\n      // Log reply event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'reply',\n          meta: {\n            campaignId: campaignSend.schedule.campaignId,\n            scheduleId: campaignSend.scheduleId,\n            businessId: campaignSend.businessId,\n            replyContent: emailBody,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Send to LeadMine\n      await postLeadMineEvent({\n        token: campaignSend.inviteToken,\n        businessId: campaignSend.businessId,\n        type: 'email_reply',\n        meta: {\n          campaignId: campaignSend.schedule.campaignId,\n          replyContent: emailBody,\n          repliedAt: new Date().toISOString()\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Reply processing failed:', error);\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Support Email Processing:**\n```javascript\n// Handle support emails\nexport async function handleSupportEmail({ from, subject, emailBody }) {\n  try {\n    // Create support ticket\n    const ticket = await prisma.supportTicket.create({\n      data: {\n        email: from,\n        subject: subject,\n        content: emailBody,\n        status: 'open',\n        priority: 'normal',\n        meta: {\n          source: 'email',\n          receivedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send auto-reply\n    await sendSupportAutoReply(from, ticket.id);\n    \n    // Notify admin\n    await notifyAdminOfNewTicket(ticket);\n  } catch (error) {\n    console.error('Support email processing failed:', error);\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Validation Rules:**\n```javascript\n// Validate email addresses before processing\nexport function validateIncomingEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email) && email.length <= 254;\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Health Checks:**\n```javascript\n// Check ImprovMX configuration\nexport async function checkImprovMXConfiguration(): Promise<boolean> {\n  try {\n    // Test MX records\n    const mxRecords = await dns.resolveMx('evergreenwebsolutions.ca');\n    const hasImprovMX = mxRecords.some(record => \n      record.exchange.includes('improvmx.com')\n    );\n    \n    if (!hasImprovMX) {\n      console.error('ImprovMX MX records not found');\n      return false;\n    }\n    \n    // Test webhook endpoint\n    const response = await fetch('/api/webhooks/improvmx', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ test: true })\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('ImprovMX configuration check failed:', error);\n    return false;\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Complete Email Flow:**\n```\n1. Resend sends campaign email\n2. User replies to gabriel@evergreenwebsolutions.ca\n3. ImprovMX receives reply\n4. Webhook processes reply\n5. System logs engagement\n6. LeadMine receives event\n7. Admin gets notification\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```sql\n-- Add support for incoming emails\nCREATE TABLE SupportTicket (\n  id TEXT PRIMARY KEY,\n  email TEXT NOT NULL,\n  subject TEXT NOT NULL,\n  content TEXT NOT NULL,\n  status TEXT DEFAULT 'open',\n  priority TEXT DEFAULT 'normal',\n  meta JSONB,\n  createdAt TIMESTAMP DEFAULT NOW(),\n  updatedAt TIMESTAMP DEFAULT NOW()\n);",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Domain**: `evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Service**: ImprovMX (improvmx.com)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Purpose**: Receive emails at custom addresses",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Forwarding**: Forward to your personal inbox",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **From Address**: `gabriel@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Reply-To**: `gabriel@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Bounce Address**: `bounces@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Unsubscribe**: `unsubscribe@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **From Address**: `events@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Reply-To**: `gabriel@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Support**: `support@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Admin**: `admin@evergreenwebsolutions.ca`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Add support for incoming emails\nCREATE TABLE SupportTicket (\n  id TEXT PRIMARY KEY,\n  email TEXT NOT NULL,\n  subject TEXT NOT NULL,\n  content TEXT NOT NULL,\n  status TEXT DEFAULT 'open',\n  priority TEXT DEFAULT 'normal',\n  meta JSONB,\n  createdAt TIMESTAMP DEFAULT NOW(),\n  updatedAt TIMESTAMP DEFAULT NOW()\n);",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Add email processing events\nALTER TABLE EmailEvent ADD COLUMN processedAt TIMESTAMP;\nALTER TABLE EmailEvent ADD COLUMN emailType TEXT;\n```",
        "type": "item",
        "category": "creation"
      }
    ],
    "interconnections": [],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n```"
    ],
    "related_apis": [
      "/api/webhooks/improvmx';",
      "/api/webhooks/improvmx',"
    ],
    "related_components": [
      "req.js",
      "NextResponse.js"
    ],
    "tags": [
      "zod",
      "prisma",
      "typescript",
      "resend",
      "security",
      "sendgrid",
      "complete-email-system"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "11-analytics-tracking-system-accurate_1",
    "category": "Analytics & Tracking",
    "subcategory": "General",
    "title": "The analytics and tracking system",
    "description": "How does the analytics and tracking system work? - Explain the comprehensive visitor tracking system",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Visitor ID management (2-year cookie)\nlet vid = req.cookies.get('vid')?.value;\nif (!vid) {\n  vid = crypto.randomUUID();\n  res.cookies.set('vid', vid, {\n    path: '/',\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: true,\n    maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n  });\n}\n\n// Session ID management (30-minute rolling)\nconst SESSION_MS = 30 * 60 * 1000;\nconst now = Date.now();\nlet sid = req.cookies.get('sid')?.value;\nconst sidTs = Number(req.cookies.get('sid_ts')?.value || 0);\nif (!sid || now - sidTs > SESSION_MS) {\n  sid = crypto.randomUUID();\n  res.cookies.set('sid', sid, { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n  res.cookies.set('sid_ts', String(now), { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n}",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// UTM and marketing parameter persistence (90 days)\nconst utmKeys = [\n  'utm_source', 'utm_medium', 'utm_campaign', \n  'utm_term', 'utm_content', 'eid',\n  'gclid', 'fbclid', 'msclkid'\n];\n\nfor (const k of utmKeys) {\n  const v = url.searchParams.get(k);\n  if (v) {\n    res.cookies.set(k, v, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 90, // 90 days\n    });\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// AnalyticsBeacon component collects detailed visitor data\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return;\n\n    let sent = false;\n    let pointerMoves = 0;\n    let clickCount = 0;\n    let keypressCount = 0;\n    let copyCount = 0;\n    let maxScrollPercent = 0;\n    let focusEvents = 0;\n    let blurEvents = 0;\n    let formInteractions = 0;\n    let errorCount = 0;\n    let resizeCount = 0;\n    let beforeUnloadCount = 0;\n\n    const startTime = performance.now();\n    const visibilityTimeline: VisibilityEvent[] = [\n      { state: document.visibilityState, at: Date.now() },\n    ];\n\n    // Scroll depth tracking\n    const computeScroll = () => {\n      const totalScrollable = document.documentElement.scrollHeight - window.innerHeight;\n      if (totalScrollable <= 0) {\n        maxScrollPercent = 100;\n        return;\n      }\n      const current = window.scrollY;\n      const percent = Math.round((current / totalScrollable) * 100);\n      if (percent > maxScrollPercent) {\n        maxScrollPercent = Math.min(percent, 100);\n      }\n    };\n\n    // Event listeners for user interactions\n    window.addEventListener('scroll', computeScroll, { passive: true });\n    document.addEventListener('click', () => clickCount++);\n    document.addEventListener('keydown', () => keypressCount++);\n    document.addEventListener('copy', () => copyCount++);\n    document.addEventListener('pointermove', () => {\n      pointerMoves++;\n      if (pointerMoves > 5000) pointerMoves = 5000; // Cap to avoid runaway counts\n    }, { passive: true });\n\n    // Visibility change tracking\n    const onVisibility = () => {\n      const state = document.visibilityState;\n      visibilityTimeline.push({ state, at: Date.now() });\n      if (state === 'hidden') {\n        send('visibilityhidden');\n      }\n    };\n    document.addEventListener('visibilitychange', onVisibility);\n\n    // Performance and connection tracking\n    const conn = (navigator as any).connection;\n    const onConnectionChange = () => {\n      // Track connection changes\n    };\n    if (conn?.addEventListener) {\n      conn.addEventListener('change', onConnectionChange);\n    } else if (conn) {\n      conn.onchange = onConnectionChange;\n    }\n\n    // Build comprehensive payload\n    const buildPayload = async () => {\n      const doc = document.documentElement;\n      const nav = navigator as any;\n      \n      return {\n        path: window.location.pathname,\n        query: window.location.search,\n        referrer: document.referrer,\n        \n        // Device and browser info\n        userAgent: navigator.userAgent,\n        language: navigator.language,\n        languages: navigator.languages,\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        \n        // Screen and viewport\n        screenW: window.screen.width,\n        screenH: window.screen.height,\n        viewportW: window.innerWidth,\n        viewportH: window.innerHeight,\n        dpr: window.devicePixelRatio,\n        orientation: window.screen.orientation?.type,\n        \n        // Device capabilities\n        deviceMemory: nav.deviceMemory,\n        hardwareConcurrency: navigator.hardwareConcurrency,\n        maxTouchPoints: nav.maxTouchPoints,\n        \n        // Network info\n        connection: conn ? {\n          downlink: conn.downlink,\n          effectiveType: conn.effectiveType,\n          rtt: conn.rtt\n        } : undefined,\n        \n        // Performance metrics\n        paint: {\n          firstContentfulPaint: performance.getEntriesByType('paint')\n            .find(entry => entry.name === 'first-contentful-paint')?.startTime,\n          largestContentfulPaint: performance.getEntriesByType('largest-contentful-paint')\n            .pop()?.startTime\n        },\n        \n        performance: {\n          navigationStart: performance.timing.navigationStart,\n          loadEventEnd: performance.timing.loadEventEnd,\n          domContentLoadedEventEnd: performance.timing.domContentLoadedEventEnd\n        },\n        \n        // User interactions\n        interactionCounts: {\n          clicks: clickCount,\n          keypresses: keypressCount,\n          copies: copyCount,\n          pointerMoves,\n        },\n        \n        // Page metrics\n        scrollDepth: maxScrollPercent,\n        timeOnPageMs: Math.round(performance.now() - startTime),\n        visibility: visibilityTimeline,\n        \n        // Storage info\n        storage: {\n          localStorage: JSON.stringify(localStorage).length,\n          sessionStorage: JSON.stringify(sessionStorage).length\n        },\n        \n        // Navigation info\n        navigation: {\n          type: nav.connection?.type,\n          redirectCount: performance.navigation.redirectCount\n        }\n      };\n    };\n\n    // Send analytics data\n    const send = async (reason: string) => {\n      if (sent) return;\n      sent = true;\n\n      try {\n        const payload = await buildPayload();\n        const serialized = JSON.stringify(payload, (_key, value) => \n          value === undefined ? undefined : value\n        );\n        \n        if (navigator.sendBeacon) {\n          const blob = new Blob([serialized], { type: 'application/json' });\n          navigator.sendBeacon('/api/track/visit', blob);\n        } else {\n          await fetch('/api/track/visit', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            keepalive: true,\n            cache: 'no-store',\n            body: serialized,\n          });\n        }\n      } catch (err) {\n        // Ignore errors\n      }\n    };\n\n    // Send on page unload\n    window.addEventListener('pagehide', () => send('pagehide'));\n    window.addEventListener('beforeunload', () => send('beforeunload'));\n    \n    // Fallback timeout\n    const fallbackTimeout = window.setTimeout(() => send('timeout'), 10000);\n\n    return () => {\n      window.clearTimeout(fallbackTimeout);\n      // Cleanup event listeners\n    };\n  }, []);\n\n  return null;\n}",
        "context": "Code snippet 3",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// API endpoint for processing visit data\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { path, query, referrer, userAgent, language, languages, tz, \n            screenW, screenH, viewportW, viewportH, dpr, orientation,\n            deviceMemory, hardwareConcurrency, maxTouchPoints, connection,\n            paint, performance, interactionCounts, scrollDepth, \n            timeOnPageMs, visibility, storage, navigation } = body;\n\n    // Get visitor and session IDs from cookies\n    const cookies = req.cookies;\n    const headers = req.headers;\n    \n    const visitorId = cookies.get('vid')?.value ?? 'unknown';\n    const sessionId = cookies.get('sid')?.value ?? 'unknown';\n    \n    // Get UTM parameters\n    const eid = cookies.get('eid')?.value;\n    const utmSource = cookies.get('utm_source')?.value;\n    const utmMedium = cookies.get('utm_medium')?.value;\n    const utmCampaign = cookies.get('utm_campaign')?.value;\n    const utmTerm = cookies.get('utm_term')?.value;\n    const utmContent = cookies.get('utm_content')?.value;\n    const gclid = cookies.get('gclid')?.value;\n    const fbclid = cookies.get('fbclid')?.value;\n    const msclkid = cookies.get('msclkid')?.value;\n    \n    // Get geolocation data\n    const country = headers.get('x-vercel-ip-country');\n    const region = headers.get('x-vercel-ip-country-region');\n    const city = headers.get('x-vercel-ip-city');\n    const ip = headers.get('x-forwarded-for')?.split(',')[0]?.trim();\n    const ipHash = ip ? crypto.createHash('sha256').update(ip).digest('hex') : undefined;\n    \n    // Parse user agent for device info\n    const ua = userAgent || undefined;\n    const parsed = ua ? new UAParser(ua).getResult() : undefined;\n    const browser = parsed?.browser?.name;\n    const device = parsed?.device?.type || 'desktop';\n    const platform = parsed?.os?.name;\n\n    // Create visit record\n    await prisma.visit.create({\n      data: {\n        visitorId,\n        sessionId,\n        path,\n        query,\n        referrer,\n        eid,\n        utmSource,\n        utmMedium,\n        utmCampaign,\n        utmTerm,\n        utmContent,\n        gclid,\n        fbclid,\n        msclkid,\n        userAgent: ua,\n        language,\n        languages: languages ? JSON.stringify(languages) : undefined,\n        tz,\n        screenW,\n        screenH,\n        viewportW,\n        viewportH,\n        dpr,\n        platform,\n        device,\n        browser,\n        country,\n        region,\n        city,\n        ipHash,\n        connection: connection ? JSON.stringify(connection) : undefined,\n        deviceMemory,\n        hardwareConcurrency,\n        maxTouchPoints,\n        interactionCounts: interactionCounts ? JSON.stringify(interactionCounts) : undefined,\n        languages: languages ? JSON.stringify(languages) : undefined,\n        navigation: navigation ? JSON.stringify(navigation) : undefined,\n        orientation,\n        paint: paint ? JSON.stringify(paint) : undefined,\n        performance: performance ? JSON.stringify(performance) : undefined,\n        scrollDepth,\n        storage: storage ? JSON.stringify(storage) : undefined,\n        timeOnPageMs,\n        visibility: visibility ? JSON.stringify(visibility) : undefined\n      }\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Visit tracking error:', error);\n    return NextResponse.json({ error: 'Failed to track visit' }, { status: 500 });\n  }\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Link tracking for campaign attribution\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });\n\n  const c = cookies();\n  const h = (k: string) => headers().get(k);\n  const vid = c.get('vid')?.value ?? 'unknown';\n  const sid = c.get('sid')?.value ?? 'unknown';\n\n  // Prefer explicit eid in the link; fallback to cookie\n  const eid = url.searchParams.get('eid') ?? c.get('eid')?.value ?? undefined;\n\n  // Get UTM parameters\n  const utmSource = c.get('utm_source')?.value;\n  const utmMedium = c.get('utm_medium')?.value;\n  const utmCampaign = c.get('utm_campaign')?.value;\n  const utmTerm = c.get('utm_term')?.value;\n  const utmContent = c.get('utm_content')?.value;\n\n  // Parse user agent\n  const ua = h('user-agent') || undefined;\n  const parsed = ua ? new UAParser(ua).getResult() : undefined;\n  const browser = parsed?.browser?.name;\n  const device = parsed?.device?.type || 'desktop';\n  const platform = parsed?.os?.name;\n\n  // Get geolocation\n  const referer = h('referer') || undefined;\n  const country = h('x-vercel-ip-country') || undefined;\n  const region = h('x-vercel-ip-country-region') || undefined;\n  const city = h('x-vercel-ip-city') || undefined;\n  const ip = h('x-forwarded-for')?.split(',')[0]?.trim();\n  const ipHash = ip ? crypto.createHash('sha256').update(ip).digest('hex') : undefined;\n\n  // Track the link click\n  try {\n    await prisma.visit.create({\n      data: {\n        visitorId: vid,\n        sessionId: sid,\n        path: '/api/l',\n        query: url.search,\n        referrer: referer,\n        eid, utmSource, utmMedium, utmCampaign, utmTerm, utmContent,\n        userAgent: ua, browser, device, platform,\n        country, region, city, ipHash,\n      },\n    });\n  } catch {\n    // Stay silent on errors\n  }\n\n  return NextResponse.redirect(to, { status: 302 });\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Do Not Track detection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\n// Only collect analytics if user hasn't opted out\nif (!hasDoNotTrack()) {\n  // Collect analytics data\n  const analyticsData = collectVisitorData();\n  await prisma.visit.create({ data: analyticsData });\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Admin analytics page with comprehensive metrics\nexport default async function AdminAnalyticsPage({ searchParams }) {\n  const [visits, rsvps, campaigns, audienceGroups] = await Promise.all([\n    prisma.visit.findMany({\n      include: {\n        _count: { select: { id: true } }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: 1000\n    }),\n    prisma.rsvp.findMany({\n      orderBy: { createdAt: 'desc' }\n    }),\n    prisma.campaign.findMany({\n      include: {\n        schedules: {\n          include: {\n            template: true,\n            group: true,\n          },\n        },\n        _count: {\n          select: {\n            schedules: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n    prisma.audienceGroup.findMany({\n      include: {\n        members: true,\n        _count: {\n          select: {\n            members: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n  ]);\n\n  // Calculate overview statistics\n  const totalVisits = visits.length;\n  const totalRSVPs = rsvps.length;\n  const conversionRate = totalVisits > 0 ? (totalRSVPs / totalVisits) * 100 : 0;\n  \n  // Calculate average session duration\n  const avgSessionDuration = visits.reduce((sum, visit) => {\n    if (visit.timeOnPageMs) {\n      return sum + visit.timeOnPageMs;\n    }\n    return sum;\n  }, 0) / Math.max(visits.length, 1);\n\n  // Calculate bounce rate\n  const bounceRate = visits.reduce((sum, visit) => {\n    if (visit.timeOnPageMs && visit.timeOnPageMs < 5000) {\n      return sum + 1;\n    }\n    return sum;\n  }, 0) / Math.max(visits.length, 1) * 100;\n\n  // Top countries\n  const countryCounts = visits.reduce((acc, visit) => {\n    if (visit.country) {\n      acc[visit.country] = (acc[visit.country] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Analytics dashboard with comprehensive metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total Visits</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">{totalVisits.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total RSVPs</h3>\n          <p className=\"text-3xl font-bold text-green-600\">{totalRSVPs.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Conversion Rate</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">{conversionRate.toFixed(1)}%</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Avg Session Duration</h3>\n          <p className=\"text-3xl font-bold text-orange-600\">\n            {Math.round(avgSessionDuration / 1000)}s\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. UTM PARAMETER TRACKING**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. COMPREHENSIVE VISITOR DATA COLLECTION**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. VISIT TRACKING API**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. LINK TRACKING SYSTEM**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. PRIVACY COMPLIANCE**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. ANALYTICS DASHBOARD**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. VISITOR IDENTIFICATION**\n```typescript\n// Visitor ID management (2-year cookie)\nlet vid = req.cookies.get('vid')?.value;\nif (!vid) {\n  vid = crypto.randomUUID();\n  res.cookies.set('vid', vid, {\n    path: '/',\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: true,\n    maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n  });\n}",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "2. UTM PARAMETER TRACKING**\n```typescript\n// UTM and marketing parameter persistence (90 days)\nconst utmKeys = [\n  'utm_source', 'utm_medium', 'utm_campaign', \n  'utm_term', 'utm_content', 'eid',\n  'gclid', 'fbclid', 'msclkid'\n];",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. COMPREHENSIVE VISITOR DATA COLLECTION**\n```typescript\n// AnalyticsBeacon component collects detailed visitor data\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return;",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. VISIT TRACKING API**\n```typescript\n// API endpoint for processing visit data\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { path, query, referrer, userAgent, language, languages, tz, \n            screenW, screenH, viewportW, viewportH, dpr, orientation,\n            deviceMemory, hardwareConcurrency, maxTouchPoints, connection,\n            paint, performance, interactionCounts, scrollDepth, \n            timeOnPageMs, visibility, storage, navigation } = body;",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "5. LINK TRACKING SYSTEM**\n```typescript\n// Link tracking for campaign attribution\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "6. PRIVACY COMPLIANCE**\n```typescript\n// Do Not Track detection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. ANALYTICS DASHBOARD**\n```typescript\n// Admin analytics page with comprehensive metrics\nexport default async function AdminAnalyticsPage({ searchParams }) {\n  const [visits, rsvps, campaigns, audienceGroups] = await Promise.all([\n    prisma.visit.findMany({\n      include: {\n        _count: { select: { id: true } }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: 1000\n    }),\n    prisma.rsvp.findMany({\n      orderBy: { createdAt: 'desc' }\n    }),\n    prisma.campaign.findMany({\n      include: {\n        schedules: {\n          include: {\n            template: true,\n            group: true,\n          },\n        },\n        _count: {\n          select: {\n            schedules: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n    prisma.audienceGroup.findMany({\n      include: {\n        members: true,\n        _count: {\n          select: {\n            members: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n  ]);",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. VISITOR IDENTIFICATION**\n```typescript\n// Visitor ID management (2-year cookie)\nlet vid = req.cookies.get('vid')?.value;\nif (!vid) {\n  vid = crypto.randomUUID();\n  res.cookies.set('vid', vid, {\n    path: '/',\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: true,\n    maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n  });\n}",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "* 60 * 1000;\nconst now = Date.now();\nlet sid = req.cookies.get('sid')?.value;\nconst sidTs = Number(req.cookies.get('sid_ts')?.value || 0);\nif (!sid || now - sidTs > SESSION_MS) {\n  sid = crypto.randomUUID();\n  res.cookies.set('sid', sid, { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n  res.cookies.set('sid_ts', String(now), { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n}\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// UTM and marketing parameter persistence (90 days)\nconst utmKeys = [\n  'utm_source', 'utm_medium', 'utm_campaign', \n  'utm_term', 'utm_content', 'eid',\n  'gclid', 'fbclid', 'msclkid'\n];",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 24 * 90, // 90 days\n    });\n  }\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// AnalyticsBeacon component collects detailed visitor data\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return;",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 100);\n      if (percent > maxScrollPercent) {\n        maxScrollPercent = Math.min(percent, 100);\n      }\n    };",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// API endpoint for processing visit data\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { path, query, referrer, userAgent, language, languages, tz, \n            screenW, screenH, viewportW, viewportH, dpr, orientation,\n            deviceMemory, hardwareConcurrency, maxTouchPoints, connection,\n            paint, performance, interactionCounts, scrollDepth, \n            timeOnPageMs, visibility, storage, navigation } = body;",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```typescript\n// Link tracking for campaign attribution\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Do Not Track detection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Admin analytics page with comprehensive metrics\nexport default async function AdminAnalyticsPage({ searchParams }) {\n  const [visits, rsvps, campaigns, audienceGroups] = await Promise.all([\n    prisma.visit.findMany({\n      include: {\n        _count: { select: { id: true } }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: 1000\n    }),\n    prisma.rsvp.findMany({\n      orderBy: { createdAt: 'desc' }\n    }),\n    prisma.campaign.findMany({\n      include: {\n        schedules: {\n          include: {\n            template: true,\n            group: true,\n          },\n        },\n        _count: {\n          select: {\n            schedules: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n    prisma.audienceGroup.findMany({\n      include: {\n        members: true,\n        _count: {\n          select: {\n            members: true,\n          },\n        },\n      },\n      orderBy: { createdAt: 'desc' },\n    }),\n  ]);",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "* 100 : 0;\n  \n  // Calculate average session duration\n  const avgSessionDuration = visits.reduce((sum, visit) => {\n    if (visit.timeOnPageMs) {\n      return sum + visit.timeOnPageMs;\n    }\n    return sum;\n  }, 0) / Math.max(visits.length, 1);",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Analytics dashboard with comprehensive metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total Visits</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">{totalVisits.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Total RSVPs</h3>\n          <p className=\"text-3xl font-bold text-green-600\">{totalRSVPs.toLocaleString()}</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Conversion Rate</h3>\n          <p className=\"text-3xl font-bold text-purple-600\">{conversionRate.toFixed(1)}%</p>\n        </div>\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold\">Avg Session Duration</h3>\n          <p className=\"text-3xl font-bold text-orange-600\">\n            {Math.round(avgSessionDuration / 1000)}s\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- sidTs > SESSION_MS) {\n  sid = crypto.randomUUID();\n  res.cookies.set('sid', sid, { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n  res.cookies.set('sid_ts', String(now), { \n    path: '/', \n    httpOnly: true, \n    sameSite: 'lax', \n    secure: true, \n    maxAge: 60 * 60 * 24 \n  });\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- window.innerHeight;\n      if (totalScrollable <= 0) {\n        maxScrollPercent = 100;\n        return;\n      }\n      const current = window.scrollY;\n      const percent = Math.round((current / totalScrollable) * 100);\n      if (percent > maxScrollPercent) {\n        maxScrollPercent = Math.min(percent, 100);\n      }\n    };",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- startTime),\n        visibility: visibilityTimeline,\n        \n        // Storage info\n        storage: {\n          localStorage: JSON.stringify(localStorage).length,\n          sessionStorage: JSON.stringify(sessionStorage).length\n        },\n        \n        // Navigation info\n        navigation: {\n          type: nav.connection?.type,\n          redirectCount: performance.navigation.redirectCount\n        }\n      };\n    };",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "RSVP Data Management",
      "Middleware Features"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n    return NextResponse.json({ error: 'Failed to track visit' }, { status: 500 });\n  }\n}\n```",
      "'Missing \"to\" param' }, { status: 400 });"
    ],
    "related_apis": [
      "/api/track/visit',",
      "/api/l',"
    ],
    "related_components": [
      "req.js",
      "NextResponse.js"
    ],
    "tags": [
      "prisma",
      "weaviate",
      "analytics-&-tracking",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "react"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "05-template-creation-accurate_1",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Create a new email template",
    "description": "Create a new email template - I need to create a template for our conference announcement",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `name` (string) - Template name\n- `subject` (string) - Email subject line\n- `htmlBody` (string) - HTML email content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `textBody` (string) - Plain text version",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Conference Announcement Template\",\n  \"subject\": \"Join us at Tech Conference 2025\",\n  \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference.</p><p>Best regards,<br>The Conference Team</p>\",\n  \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-id-123\",\n    \"name\": \"Conference Announcement Template\",\n    \"subject\": \"Join us at Tech Conference 2025\",\n    \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference.</p><p>Best regards,<br>The Conference Team</p>\",\n    \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `{{name}}` - Recipient's full name\n- `{{email}}` - Email address\n- `{{unsubscribeUrl}}` - Unsubscribe link\n- `{{greeting_title}}` - Greeting title\n- `{{greeting_message}}` - Greeting message\n- `{{signature_name}}` - Signature name\n- `{{signature_title}}` - Signature title\n- `{{signature_company}}` - Signature company\n- `{{signature_location}}` - Signature location\n- `{{main_content_title}}` - Main content title\n- `{{main_content_body}}` - Main content body\n- `{{button_text}}` - Button text\n- `{{additional_info_title}}` - Additional info title\n- `{{additional_info_body}}` - Additional info body\n- `{{closing_title}}` - Closing title\n- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- If `name` missing: \"name, subject, and htmlBody are required\"\n- If `subject` missing: \"name, subject, and htmlBody are required\"\n- If `htmlBody` missing: \"name, subject, and htmlBody are required\"\n- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `name` (string) - Template name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `subject` (string) - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `htmlBody` (string) - HTML email content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `textBody` (string) - Plain text version",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{name}}` - Recipient's full name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{email}}` - Email address",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{unsubscribeUrl}}` - Unsubscribe link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_title}}` - Greeting title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_message}}` - Greeting message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_name}}` - Signature name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_title}}` - Signature title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_company}}` - Signature company",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_location}}` - Signature location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_title}}` - Main content title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_body}}` - Main content body",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_text}}` - Button text",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{additional_info_title}}` - Additional info title",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{additional_info_body}}` - Additional info body",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{closing_title}}` - Closing title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `name` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `subject` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `htmlBody` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "05-template-creation-accurate_3",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Create a new email template",
    "description": "Create a new email template - Create a template with greeting and signature variables",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Personalized Conference Invitation\",\n  \"subject\": \"{{greeting_title}} - You're Invited to Tech Conference 2025\",\n  \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-id-456\",\n    \"name\": \"Personalized Conference Invitation\",\n    \"subject\": \"{{greeting_title}} - You're Invited to Tech Conference 2025\",\n    \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Subject Line**: Uses `{{greeting_title}}` for personalization\n- **Greeting Section**: `{{greeting_title}}` and `{{greeting_message}}`\n- **Main Content**: `{{main_content_body}}` for event details\n- **Signature Section**: `{{signature_name}}`, `{{signature_title}}`, `{{signature_company}}`, `{{signature_location}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Variables are replaced with actual values when emails are sent\n- If a variable is not provided, it remains as `{{variable_name}}`\n- Variables are case-sensitive\n- Use double curly braces: `{{variable_name}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Always provide both HTML and text versions\n- Use meaningful variable names\n- Test templates with sample data\n- Keep subject lines under 50 characters",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- You're Invited to Tech Conference 2025\",\n  \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- You're Invited to Tech Conference 2025\",\n    \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Subject Line**: Uses `{{greeting_title}}` for personalization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Greeting Section**: `{{greeting_title}}` and `{{greeting_message}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Main Content**: `{{main_content_body}}` for event details",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Signature Section**: `{{signature_name}}`, `{{signature_title}}`, `{{signature_company}}`, `{{signature_location}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are replaced with actual values when emails are sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If a variable is not provided, it remains as `{{variable_name}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are case-sensitive",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use double curly braces: `{{variable_name}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Always provide both HTML and text versions",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use meaningful variable names",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test templates with sample data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep subject lines under 50 characters",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "05-template-creation-accurate_5",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Create a new email template",
    "description": "Create a new email template - Create a template with button and additional info sections",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Conference Registration Template\",\n  \"subject\": \"{{main_content_title}} - Register Now!\",\n  \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>{{main_content_title}}</h2><p>{{main_content_body}}</p><div style='text-align: center; margin: 20px 0;'><a href='{{button_url}}' style='background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;'>{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><p>{{closing_message}}</p><p>Best regards,<br>{{signature_name}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\nRegister here: {{button_url}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_message}}\\n\\nBest regards,\\n{{signature_name}}\"\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-id-789\",\n    \"name\": \"Conference Registration Template\",\n    \"subject\": \"{{main_content_title}} - Register Now!\",\n    \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>{{main_content_title}}</h2><p>{{main_content_body}}</p><div style='text-align: center; margin: 20px 0;'><a href='{{button_url}}' style='background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;'>{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><p>{{closing_message}}</p><p>Best regards,<br>{{signature_name}}</p>\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\nRegister here: {{button_url}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_message}}\\n\\nBest regards,\\n{{signature_name}}\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Greeting**: `{{greeting_title}}` and `{{greeting_message}}`\n- **Main Content**: `{{main_content_title}}` and `{{main_content_body}}`\n- **Call-to-Action Button**: `{{button_text}}` with styled HTML button\n- **Additional Info**: `{{additional_info_title}}` and `{{additional_info_body}}`\n- **Closing**: `{{closing_message}}`\n- **Signature**: `{{signature_name}}`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Centered with CSS styling\n- Blue background (#007bff)\n- White text\n- Rounded corners\n- Proper padding\n- Hover effects (if supported)",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Button becomes a simple text link\n- Maintains all content sections\n- Uses plain text formatting\n- Includes the same call-to-action",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Register Now!\",\n  \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>{{main_content_title}}</h2><p>{{main_content_body}}</p><div style='text-align: center; margin: 20px 0;'><a href='{{button_url}}' style='background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;'>{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><p>{{closing_message}}</p><p>Best regards,<br>{{signature_name}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\nRegister here: {{button_url}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_message}}\\n\\nBest regards,\\n{{signature_name}}\"\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Register Now!\",\n    \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>{{main_content_title}}</h2><p>{{main_content_body}}</p><div style='text-align: center; margin: 20px 0;'><a href='{{button_url}}' style='background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;'>{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><p>{{closing_message}}</p><p>Best regards,<br>{{signature_name}}</p>\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\nRegister here: {{button_url}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_message}}\\n\\nBest regards,\\n{{signature_name}}\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Greeting**: `{{greeting_title}}` and `{{greeting_message}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Main Content**: `{{main_content_title}}` and `{{main_content_body}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Call-to-Action Button**: `{{button_text}}` with styled HTML button",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Additional Info**: `{{additional_info_title}}` and `{{additional_info_body}}`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Closing**: `{{closing_message}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Signature**: `{{signature_name}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Centered with CSS styling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Blue background (#007bff)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Hover effects (if supported)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Button becomes a simple text link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Maintains all content sections",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Uses plain text formatting",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Includes the same call-to-action",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "email-template-management",
      "typescript",
      "tailwind",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "05-template-creation-accurate_7",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Create a new email template",
    "description": "Create a new email template - I need a simple template with just basic content",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Simple Announcement\",\n  \"subject\": \"Important Update\",\n  \"htmlBody\": \"<h1>Important Update</h1><p>Hello {{name}},</p><p>This is an important update for you.</p><p>Thank you!</p>\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-id-101\",\n    \"name\": \"Simple Announcement\",\n    \"subject\": \"Important Update\",\n    \"htmlBody\": \"<h1>Important Update</h1><p>Hello {{name}},</p><p>This is an important update for you.</p><p>Thank you!</p>\",\n    \"textBody\": null,\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `name` - Template name\n- `subject` - Email subject line\n- `htmlBody` - HTML content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `textBody` - Will be null\n- All template variables - Will be null",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Basic HTML structure\n- Uses `{{name}}` variable for personalization\n- Clean, simple design\n- No complex styling\n- Easy to modify",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Quick announcements\n- Simple notifications\n- Basic updates\n- Testing purposes\n- Minimal personalization needed",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- If `name` missing: \"name, subject, and htmlBody are required\"\n- If `subject` missing: \"name, subject, and htmlBody are required\"\n- If `htmlBody` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `name` - Template name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `subject` - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `htmlBody` - HTML content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `textBody` - Will be null",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- All template variables - Will be null",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Basic HTML structure",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Uses `{{name}}` variable for personalization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Clean, simple design",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Quick announcements",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Simple notifications",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Minimal personalization needed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `name` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `subject` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `htmlBody` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid",
      "typescript"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "05-template-creation-accurate_9",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Create a new email template",
    "description": "Create a new email template - I want to create a template but I'm missing some information",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. **Template Name** - What should we call this template?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. **Subject Line** - What should the email subject be?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. **HTML Content** - What should the email body contain?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n1. **Template Name** - What should we call this template?\n2. **Subject Line** - What should the email subject be?\n3. **HTML Content** - What should the email body contain?",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Text Version** - Plain text version of the email\n- **Template Variables** - Any personalization variables needed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Your Template Name\",\n  \"subject\": \"Your Email Subject\",\n  \"htmlBody\": \"<h1>Your HTML Content</h1><p>Hello {{name}},</p><p>Your message here.</p>\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{name}}` - Recipient's full name\n- `{{email}}` - Email address\n- `{{unsubscribeUrl}}` - Unsubscribe link\n- `{{greeting_title}}` - Greeting title\n- `{{greeting_message}}` - Greeting message\n- `{{signature_name}}` - Signature name\n- `{{signature_title}}` - Signature title\n- `{{signature_company}}` - Signature company\n- `{{signature_location}}` - Signature location\n- `{{main_content_title}}` - Main content title\n- `{{main_content_body}}` - Main content body\n- `{{button_text}}` - Button text\n- `{{additional_info_title}}` - Additional info title\n- `{{additional_info_body}}` - Additional info body\n- `{{closing_title}}` - Closing title\n- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- If `name` missing: \"name, subject, and htmlBody are required\"\n- If `subject` missing: \"name, subject, and htmlBody are required\"\n- If `htmlBody` missing: \"name, subject, and htmlBody are required\"\n- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Keep subject lines under 50 characters\n- Use both HTML and text versions for better deliverability\n- Test templates with sample data\n- Use meaningful variable names\n- Keep HTML simple and clean",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- What should we call this template?\n2. **Subject Line** - What should the email subject be?\n3. **HTML Content** - What should the email body contain?",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Text Version** - Plain text version of the email",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Template Variables** - Any personalization variables needed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{name}}` - Recipient's full name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{email}}` - Email address",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{unsubscribeUrl}}` - Unsubscribe link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_title}}` - Greeting title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_message}}` - Greeting message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_name}}` - Signature name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_title}}` - Signature title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_company}}` - Signature company",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_location}}` - Signature location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_title}}` - Main content title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_body}}` - Main content body",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_text}}` - Button text",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{additional_info_title}}` - Additional info title",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{additional_info_body}}` - Additional info body",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{closing_title}}` - Closing title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `name` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `subject` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `htmlBody` missing: \"name, subject, and htmlBody are required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep subject lines under 50 characters",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use both HTML and text versions for better deliverability",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test templates with sample data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use meaningful variable names",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep HTML simple and clean",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "17-privacy-compliance-accurate_1",
    "category": "Privacy & Compliance",
    "subcategory": "General",
    "title": "Privacy and compliance",
    "description": "How does privacy and compliance work? - Explain GDPR/CCPA compliance and privacy features",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Dynamic privacy policy generation\n// src/lib/privacy.ts\nexport type PrivacyPolicy = {\n  title: string;\n  lastUpdated: string;\n  sections: Array<{\n    heading: string;\n    paragraphs: string[];\n    bullets?: string[];\n  }>;\n  dataSharing: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  userRights: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  contact: {\n    heading: string;\n    paragraphs: string[];\n  };\n};\n\nconst fallbackPolicy: PrivacyPolicy = {\n  title: \"Privacy Policy\",\n  lastUpdated: \"2025-01-01\",\n  sections: [\n    {\n      heading: \"Information We Collect\",\n      paragraphs: [\n        \"We collect information you provide directly to us, such as when you RSVP for an event, create an account, or contact us for support.\"\n      ],\n      bullets: [\n        \"Contact Information (name, email, phone)\",\n        \"Event Preferences (attendance, dietary needs)\",\n        \"Communication Preferences\",\n        \"Referral Source\",\n        \"Learning Goals\"\n      ]\n    },\n    {\n      heading: \"Information We Collect Automatically\",\n      paragraphs: [\n        \"When you visit our website, we automatically collect a wide range of technical and behavioral information to help us understand how our site is used and to improve our services. This includes:\"\n      ],\n      bullets: [\n        \"**Identification:** A unique visitor ID and session ID, stored in cookies.\",\n        \"**Page Information:** The path and query string of the pages you visit, and the referrer URL.\",\n        \"**Marketing Information:** UTM parameters and ad click IDs (e.g., gclid, fbclid) from our marketing campaigns.\",\n        \"**Device & Browser Information:** User agent, browser type and version, operating system, device type, screen dimensions, viewport dimensions, device pixel ratio, and language preferences.\",\n        \"**Connection & Performance:** Network information (e.g., downlink, effective type, RTT), browser storage capacity, and detailed performance timings for page loads.\",\n        \"**User Interaction:** The maximum percentage of the page you have scrolled, counts of clicks, keypresses, and copy events, and a timeline of the page's visibility state.\",\n        \"**Geolocation:** Your approximate country, region, and city, derived from your IP address. Your full IP address is never stored; instead, we store a hashed version for security.\"\n      ]\n    }\n  ],\n  dataSharing: {\n    heading: \"How We Share Data\",\n    paragraphs: [\n      \"We do not sell, trade, or otherwise transfer your personal information to third parties without your consent, except as described in this policy.\"\n    ],\n    bullets: [\n      \"**Service Providers:** We may share information with trusted third-party service providers who assist us in operating our website, conducting our business, or servicing you.\",\n      \"**LeadMine Integration:** We share business contact information with our LeadMine service for customer relationship management.\",\n      \"**Email Services:** We use Resend and SendGrid for email delivery, which may process your email address and engagement data.\",\n      \"**Legal Requirements:** We may disclose information when required by law or to protect our rights, property, or safety.\"\n    ]\n  },\n  userRights: {\n    heading: \"Your Rights\",\n    paragraphs: [\n      \"Under GDPR and CCPA, you have certain rights regarding your personal information:\"\n    ],\n    bullets: [\n      \"**Access:** Request a copy of the personal information we hold about you.\",\n      \"**Rectification:** Request correction of inaccurate or incomplete information.\",\n      \"**Erasure:** Request deletion of your personal information.\",\n      \"**Portability:** Request transfer of your data to another service.\",\n      \"**Restriction:** Request limitation of processing of your information.\",\n      \"**Objection:** Object to processing of your information for certain purposes.\",\n      \"**Withdraw Consent:** Withdraw consent for data processing at any time.\"\n    ]\n  },\n  contact: {\n    heading: \"Contact Us\",\n    paragraphs: [\n      \"If you have any questions about this Privacy Policy or wish to exercise your rights, please contact us at:\",\n      \"Email: privacy@evergreenwebsolutions.ca\",\n      \"Address: Evergreen Web Solutions, Terrace, BC, Canada\"\n    ]\n  }\n};\n\nexport async function getPrivacyPolicy(): Promise<{\n  policy: PrivacyPolicy;\n  resolvedFrom: \"remote\" | \"fallback\";\n}> {\n  try {\n    // Try to fetch from remote source (e.g., CMS)\n    const remotePolicy = await fetchRemotePrivacyPolicy();\n    if (remotePolicy) {\n      return {\n        policy: remotePolicy,\n        resolvedFrom: \"remote\"\n      };\n    }\n  } catch (error) {\n    console.error('Failed to fetch remote privacy policy:', error);\n  }\n  \n  // Fallback to local policy\n  return {\n    policy: fallbackPolicy,\n    resolvedFrom: \"fallback\"\n  };\n}",
        "context": "Code snippet 1",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Consent management system\n// src/lib/consent.ts\nexport type ConsentType = \n  | 'analytics'\n  | 'marketing'\n  | 'functional'\n  | 'necessary';\n\nexport type ConsentStatus = {\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  necessary: boolean; // Always true, cannot be disabled\n  timestamp: string;\n  version: string;\n};\n\nexport function getConsentStatus(): ConsentStatus {\n  if (typeof window === 'undefined') {\n    return {\n      analytics: false,\n      marketing: false,\n      functional: false,\n      necessary: true,\n      timestamp: new Date().toISOString(),\n      version: '1.0'\n    };\n  }\n  \n  const stored = localStorage.getItem('consent_status');\n  if (stored) {\n    try {\n      return JSON.parse(stored);\n    } catch {\n      // Invalid stored data, return default\n    }\n  }\n  \n  return {\n    analytics: false,\n    marketing: false,\n    functional: false,\n    necessary: true,\n    timestamp: new Date().toISOString(),\n    version: '1.0'\n  };\n}\n\nexport function setConsentStatus(consent: Partial<ConsentStatus>): void {\n  if (typeof window === 'undefined') return;\n  \n  const current = getConsentStatus();\n  const updated = {\n    ...current,\n    ...consent,\n    timestamp: new Date().toISOString(),\n    necessary: true // Always true\n  };\n  \n  localStorage.setItem('consent_status', JSON.stringify(updated));\n  \n  // Trigger consent change event\n  window.dispatchEvent(new CustomEvent('consentChanged', { detail: updated }));\n}\n\nexport function hasConsent(type: ConsentType): boolean {\n  const status = getConsentStatus();\n  return status[type] || false;\n}",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Data subject rights implementation\n// src/lib/data-rights.ts\nexport async function handleDataSubjectRequest(\n  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction',\n  userEmail: string,\n  additionalData?: any\n): Promise<{\n  success: boolean;\n  data?: any;\n  error?: string;\n}> {\n  try {\n    switch (requestType) {\n      case 'access':\n        return await handleAccessRequest(userEmail);\n      case 'rectification':\n        return await handleRectificationRequest(userEmail, additionalData);\n      case 'erasure':\n        return await handleErasureRequest(userEmail);\n      case 'portability':\n        return await handlePortabilityRequest(userEmail);\n      case 'restriction':\n        return await handleRestrictionRequest(userEmail, additionalData);\n      default:\n        return { success: false, error: 'Invalid request type' };\n    }\n  } catch (error) {\n    console.error('Data subject request error:', error);\n    return { success: false, error: 'Request processing failed' };\n  }\n}\n\n// Access request - provide all data about the user\nasync function handleAccessRequest(userEmail: string) {\n  const userData = {\n    rsvp: await prisma.rsvp.findUnique({\n      where: { email: userEmail }\n    }),\n    visits: await prisma.visit.findMany({\n      where: { \n        // Find visits by email through RSVP\n        OR: [\n          { visitorId: { in: await getVisitorIdsForEmail(userEmail) } }\n        ]\n      }\n    }),\n    audienceMembers: await prisma.audienceMember.findMany({\n      where: { primaryEmail: userEmail }\n    }),\n    emailEvents: await prisma.emailEvent.findMany({\n      where: {\n        job: {\n          recipientEmail: userEmail\n        }\n      }\n    })\n  };\n  \n  return {\n    success: true,\n    data: {\n      personalData: userData,\n      dataCategories: [\n        'Contact Information',\n        'Event Preferences',\n        'Website Analytics',\n        'Email Engagement',\n        'Marketing Attribution'\n      ],\n      dataSources: [\n        'Direct input (RSVP form)',\n        'Automatic collection (website analytics)',\n        'Email service providers',\n        'LeadMine integration'\n      ],\n      retentionPeriods: {\n        'RSVP Data': '2 years after event',\n        'Analytics Data': '1 year',\n        'Email Data': '3 years',\n        'Marketing Data': '2 years'\n      }\n    }\n  };\n}\n\n// Rectification request - correct inaccurate data\nasync function handleRectificationRequest(userEmail: string, corrections: any) {\n  const updates = [];\n  \n  // Update RSVP data\n  if (corrections.rsvp) {\n    const rsvpUpdate = await prisma.rsvp.update({\n      where: { email: userEmail },\n      data: corrections.rsvp\n    });\n    updates.push('RSVP data updated');\n  }\n  \n  // Update audience member data\n  if (corrections.audience) {\n    const audienceUpdate = await prisma.audienceMember.updateMany({\n      where: { primaryEmail: userEmail },\n      data: corrections.audience\n    });\n    updates.push('Audience data updated');\n  }\n  \n  return {\n    success: true,\n    data: {\n      updates,\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n// Erasure request - delete all user data\nasync function handleErasureRequest(userEmail: string) {\n  const deletions = [];\n  \n  // Delete RSVP data\n  const rsvpDelete = await prisma.rsvp.deleteMany({\n    where: { email: userEmail }\n  });\n  if (rsvpDelete.count > 0) {\n    deletions.push(`${rsvpDelete.count} RSVP records deleted`);\n  }\n  \n  // Delete audience member data\n  const audienceDelete = await prisma.audienceMember.deleteMany({\n    where: { primaryEmail: userEmail }\n  });\n  if (audienceDelete.count > 0) {\n    deletions.push(`${audienceDelete.count} audience member records deleted`);\n  }\n  \n  // Anonymize visit data (keep for analytics but remove personal identifiers)\n  const visitAnonymize = await prisma.visit.updateMany({\n    where: {\n      visitorId: { in: await getVisitorIdsForEmail(userEmail) }\n    },\n    data: {\n      visitorId: 'anonymized',\n      sessionId: 'anonymized',\n      ipHash: 'anonymized'\n    }\n  });\n  if (visitAnonymize.count > 0) {\n    deletions.push(`${visitAnonymize.count} visit records anonymized`);\n  }\n  \n  return {\n    success: true,\n    data: {\n      deletions,\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n// Portability request - export user data in machine-readable format\nasync function handlePortabilityRequest(userEmail: string) {\n  const userData = await handleAccessRequest(userEmail);\n  \n  // Format data for portability (JSON format)\n  const portableData = {\n    exportDate: new Date().toISOString(),\n    userEmail,\n    dataFormat: 'JSON',\n    data: userData.data\n  };\n  \n  return {\n    success: true,\n    data: portableData\n  };\n}",
        "context": "Code snippet 3",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Do Not Track and Global Privacy Control detection\n// src/components/AnalyticsBeacon.tsx\nconst hasDoNotTrack = () => {\n  if (typeof window === 'undefined') return false;\n  \n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  \n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return; // Respect Do Not Track\n\n    // Only collect analytics if user hasn't opted out\n    // ... analytics collection code\n  }, []);\n\n  return null;\n}",
        "context": "Code snippet 4",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// Data retention and cleanup\n// src/lib/data-retention.ts\nexport const dataRetentionPolicies = {\n  rsvp: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'delete'\n  },\n  visits: {\n    retentionPeriod: 1 * 365 * 24 * 60 * 60 * 1000, // 1 year\n    cleanupAction: 'anonymize'\n  },\n  emailEvents: {\n    retentionPeriod: 3 * 365 * 24 * 60 * 60 * 1000, // 3 years\n    cleanupAction: 'delete'\n  },\n  audienceMembers: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'anonymize'\n  }\n};\n\nexport async function cleanupExpiredData(): Promise<{\n  cleaned: number;\n  errors: number;\n  errors: string[];\n}> {\n  const results = {\n    cleaned: 0,\n    errors: 0,\n    errors: [] as string[]\n  };\n\n  // Clean up RSVP data\n  try {\n    const rsvpCutoff = new Date(Date.now() - dataRetentionPolicies.rsvp.retentionPeriod);\n    const rsvpDelete = await prisma.rsvp.deleteMany({\n      where: {\n        createdAt: {\n          lt: rsvpCutoff\n        }\n      }\n    });\n    results.cleaned += rsvpDelete.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`RSVP cleanup failed: ${error.message}`);\n  }\n\n  // Anonymize visit data\n  try {\n    const visitCutoff = new Date(Date.now() - dataRetentionPolicies.visits.retentionPeriod);\n    const visitAnonymize = await prisma.visit.updateMany({\n      where: {\n        createdAt: {\n          lt: visitCutoff\n        }\n      },\n      data: {\n        visitorId: 'anonymized',\n        sessionId: 'anonymized',\n        ipHash: 'anonymized'\n      }\n    });\n    results.cleaned += visitAnonymize.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`Visit cleanup failed: ${error.message}`);\n  }\n\n  return results;\n}",
        "context": "Code snippet 5",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Privacy dashboard for users\n// src/components/PrivacyDashboard.tsx\nexport default function PrivacyDashboard({ userEmail }: { userEmail: string }) {\n  const [consentStatus, setConsentStatus] = useState<ConsentStatus>(getConsentStatus());\n  const [userData, setUserData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleDataRequest = async (requestType: string) => {\n    setLoading(true);\n    try {\n      const result = await fetch('/api/privacy/request', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          type: requestType,\n          email: userEmail\n        })\n      });\n      \n      const data = await result.json();\n      if (data.success) {\n        setUserData(data.data);\n      }\n    } catch (error) {\n      console.error('Data request failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConsentChange = (type: ConsentType, value: boolean) => {\n    setConsentStatus(prev => ({\n      ...prev,\n      [type]: value\n    }));\n    setConsentStatus({ [type]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Privacy Dashboard</h2>\n      \n      {/* Consent Management */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Consent Preferences</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Analytics</label>\n              <p className=\"text-sm text-gray-600\">Help us improve our website</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.analytics}\n              onChange={(e) => handleConsentChange('analytics', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Marketing</label>\n              <p className=\"text-sm text-gray-600\">Receive promotional emails</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.marketing}\n              onChange={(e) => handleConsentChange('marketing', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Data Rights */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Your Data Rights</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <button\n            onClick={() => handleDataRequest('access')}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Request My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('portability')}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Export My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('erasure')}\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Delete My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('rectification')}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Correct My Data'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Display user data if requested */}\n      {userData && (\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Your Data</h3>\n          <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto\">\n            {JSON.stringify(userData, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}",
        "context": "Code snippet 6",
        "purpose": "React component"
      },
      {
        "language": "typescript",
        "code": "// Privacy API endpoints\n// src/app/api/privacy/request/route.ts\nexport async function POST(req: Request) {\n  try {\n    const { type, email, corrections } = await req.json();\n    \n    const result = await handleDataSubjectRequest(type, email, corrections);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Privacy request error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Request processing failed' },\n      { status: 500 }\n    );\n  }\n}\n\n// Privacy policy endpoint\n// src/app/api/privacy/policy/route.ts\nexport async function GET() {\n  try {\n    const policy = await getPrivacyPolicy();\n    return NextResponse.json(policy);\n  } catch (error) {\n    console.error('Privacy policy error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch privacy policy' },\n      { status: 500 }\n    );\n  }\n}",
        "context": "Code snippet 7",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "**2. CONSENT MANAGEMENT**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. DATA SUBJECT RIGHTS**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. DO NOT TRACK DETECTION**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. DATA RETENTION POLICIES**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. PRIVACY DASHBOARD**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. PRIVACY API ENDPOINTS**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. PRIVACY POLICY MANAGEMENT**\n```typescript\n// Dynamic privacy policy generation\n// src/lib/privacy.ts\nexport type PrivacyPolicy = {\n  title: string;\n  lastUpdated: string;\n  sections: Array<{\n    heading: string;\n    paragraphs: string[];\n    bullets?: string[];\n  }>;\n  dataSharing: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  userRights: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  contact: {\n    heading: string;\n    paragraphs: string[];\n  };\n};",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "2. CONSENT MANAGEMENT**\n```typescript\n// Consent management system\n// src/lib/consent.ts\nexport type ConsentType = \n  | 'analytics'\n  | 'marketing'\n  | 'functional'\n  | 'necessary';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. DATA SUBJECT RIGHTS**\n```typescript\n// Data subject rights implementation\n// src/lib/data-rights.ts\nexport async function handleDataSubjectRequest(\n  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction',\n  userEmail: string,\n  additionalData?: any\n): Promise<{\n  success: boolean;\n  data?: any;\n  error?: string;\n}> {\n  try {\n    switch (requestType) {\n      case 'access':\n        return await handleAccessRequest(userEmail);\n      case 'rectification':\n        return await handleRectificationRequest(userEmail, additionalData);\n      case 'erasure':\n        return await handleErasureRequest(userEmail);\n      case 'portability':\n        return await handlePortabilityRequest(userEmail);\n      case 'restriction':\n        return await handleRestrictionRequest(userEmail, additionalData);\n      default:\n        return { success: false, error: 'Invalid request type' };\n    }\n  } catch (error) {\n    console.error('Data subject request error:', error);\n    return { success: false, error: 'Request processing failed' };\n  }\n}",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "4. DO NOT TRACK DETECTION**\n```typescript\n// Do Not Track and Global Privacy Control detection\n// src/components/AnalyticsBeacon.tsx\nconst hasDoNotTrack = () => {\n  if (typeof window === 'undefined') return false;\n  \n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  \n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. DATA RETENTION POLICIES**\n```typescript\n// Data retention and cleanup\n// src/lib/data-retention.ts\nexport const dataRetentionPolicies = {\n  rsvp: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'delete'\n  },\n  visits: {\n    retentionPeriod: 1 * 365 * 24 * 60 * 60 * 1000, // 1 year\n    cleanupAction: 'anonymize'\n  },\n  emailEvents: {\n    retentionPeriod: 3 * 365 * 24 * 60 * 60 * 1000, // 3 years\n    cleanupAction: 'delete'\n  },\n  audienceMembers: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'anonymize'\n  }\n};",
        "type": "step",
        "category": "deletion"
      },
      {
        "description": "6. PRIVACY DASHBOARD**\n```typescript\n// Privacy dashboard for users\n// src/components/PrivacyDashboard.tsx\nexport default function PrivacyDashboard({ userEmail }: { userEmail: string }) {\n  const [consentStatus, setConsentStatus] = useState<ConsentStatus>(getConsentStatus());\n  const [userData, setUserData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "7. PRIVACY API ENDPOINTS**\n```typescript\n// Privacy API endpoints\n// src/app/api/privacy/request/route.ts\nexport async function POST(req: Request) {\n  try {\n    const { type, email, corrections } = await req.json();\n    \n    const result = await handleDataSubjectRequest(type, email, corrections);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Privacy request error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Request processing failed' },\n      { status: 500 }\n    );\n  }\n}",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "*\n\n**1. PRIVACY POLICY MANAGEMENT**\n```typescript\n// Dynamic privacy policy generation\n// src/lib/privacy.ts\nexport type PrivacyPolicy = {\n  title: string;\n  lastUpdated: string;\n  sections: Array<{\n    heading: string;\n    paragraphs: string[];\n    bullets?: string[];\n  }>;\n  dataSharing: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  userRights: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  contact: {\n    heading: string;\n    paragraphs: string[];\n  };\n};",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "* A unique visitor ID and session ID, stored in cookies.\",\n        \"**Page Information:** The path and query string of the pages you visit, and the referrer URL.\",\n        \"**Marketing Information:** UTM parameters and ad click IDs (e.g., gclid, fbclid) from our marketing campaigns.\",\n        \"**Device & Browser Information:** User agent, browser type and version, operating system, device type, screen dimensions, viewport dimensions, device pixel ratio, and language preferences.\",\n        \"**Connection & Performance:** Network information (e.g., downlink, effective type, RTT), browser storage capacity, and detailed performance timings for page loads.\",\n        \"**User Interaction:** The maximum percentage of the page you have scrolled, counts of clicks, keypresses, and copy events, and a timeline of the page's visibility state.\",\n        \"**Geolocation:** Your approximate country, region, and city, derived from your IP address. Your full IP address is never stored; instead, we store a hashed version for security.\"\n      ]\n    }\n  ],\n  dataSharing: {\n    heading: \"How We Share Data\",\n    paragraphs: [\n      \"We do not sell, trade, or otherwise transfer your personal information to third parties without your consent, except as described in this policy.\"\n    ],\n    bullets: [\n      \"**Service Providers:** We may share information with trusted third-party service providers who assist us in operating our website, conducting our business, or servicing you.\",\n      \"**LeadMine Integration:** We share business contact information with our LeadMine service for customer relationship management.\",\n      \"**Email Services:** We use Resend and SendGrid for email delivery, which may process your email address and engagement data.\",\n      \"**Legal Requirements:** We may disclose information when required by law or to protect our rights, property, or safety.\"\n    ]\n  },\n  userRights: {\n    heading: \"Your Rights\",\n    paragraphs: [\n      \"Under GDPR and CCPA, you have certain rights regarding your personal information:\"\n    ],\n    bullets: [\n      \"**Access:** Request a copy of the personal information we hold about you.\",\n      \"**Rectification:** Request correction of inaccurate or incomplete information.\",\n      \"**Erasure:** Request deletion of your personal information.\",\n      \"**Portability:** Request transfer of your data to another service.\",\n      \"**Restriction:** Request limitation of processing of your information.\",\n      \"**Objection:** Object to processing of your information for certain purposes.\",\n      \"**Withdraw Consent:** Withdraw consent for data processing at any time.\"\n    ]\n  },\n  contact: {\n    heading: \"Contact Us\",\n    paragraphs: [\n      \"If you have any questions about this Privacy Policy or wish to exercise your rights, please contact us at:\",\n      \"Email: privacy@evergreenwebsolutions.ca\",\n      \"Address: Evergreen Web Solutions, Terrace, BC, Canada\"\n    ]\n  }\n};",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Consent management system\n// src/lib/consent.ts\nexport type ConsentType = \n  | 'analytics'\n  | 'marketing'\n  | 'functional'\n  | 'necessary';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Data subject rights implementation\n// src/lib/data-rights.ts\nexport async function handleDataSubjectRequest(\n  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction',\n  userEmail: string,\n  additionalData?: any\n): Promise<{\n  success: boolean;\n  data?: any;\n  error?: string;\n}> {\n  try {\n    switch (requestType) {\n      case 'access':\n        return await handleAccessRequest(userEmail);\n      case 'rectification':\n        return await handleRectificationRequest(userEmail, additionalData);\n      case 'erasure':\n        return await handleErasureRequest(userEmail);\n      case 'portability':\n        return await handlePortabilityRequest(userEmail);\n      case 'restriction':\n        return await handleRestrictionRequest(userEmail, additionalData);\n      default:\n        return { success: false, error: 'Invalid request type' };\n    }\n  } catch (error) {\n    console.error('Data subject request error:', error);\n    return { success: false, error: 'Request processing failed' };\n  }\n}",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Do Not Track and Global Privacy Control detection\n// src/components/AnalyticsBeacon.tsx\nconst hasDoNotTrack = () => {\n  if (typeof window === 'undefined') return false;\n  \n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  \n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Data retention and cleanup\n// src/lib/data-retention.ts\nexport const dataRetentionPolicies = {\n  rsvp: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'delete'\n  },\n  visits: {\n    retentionPeriod: 1 * 365 * 24 * 60 * 60 * 1000, // 1 year\n    cleanupAction: 'anonymize'\n  },\n  emailEvents: {\n    retentionPeriod: 3 * 365 * 24 * 60 * 60 * 1000, // 3 years\n    cleanupAction: 'delete'\n  },\n  audienceMembers: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'anonymize'\n  }\n};",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "*\n```typescript\n// Privacy dashboard for users\n// src/components/PrivacyDashboard.tsx\nexport default function PrivacyDashboard({ userEmail }: { userEmail: string }) {\n  const [consentStatus, setConsentStatus] = useState<ConsentStatus>(getConsentStatus());\n  const [userData, setUserData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "* Consent Management */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Consent Preferences</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Analytics</label>\n              <p className=\"text-sm text-gray-600\">Help us improve our website</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.analytics}\n              onChange={(e) => handleConsentChange('analytics', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Marketing</label>\n              <p className=\"text-sm text-gray-600\">Receive promotional emails</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.marketing}\n              onChange={(e) => handleConsentChange('marketing', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Data Rights */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Your Data Rights</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <button\n            onClick={() => handleDataRequest('access')}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Request My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('portability')}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Export My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('erasure')}\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Delete My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('rectification')}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Correct My Data'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Display user data if requested */}\n      {userData && (\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Your Data</h3>\n          <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto\">\n            {JSON.stringify(userData, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Privacy API endpoints\n// src/app/api/privacy/request/route.ts\nexport async function POST(req: Request) {\n  try {\n    const { type, email, corrections } = await req.json();\n    \n    const result = await handleDataSubjectRequest(type, email, corrections);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Privacy request error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Request processing failed' },\n      { status: 500 }\n    );\n  }\n}",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- provide all data about the user\nasync function handleAccessRequest(userEmail: string) {\n  const userData = {\n    rsvp: await prisma.rsvp.findUnique({\n      where: { email: userEmail }\n    }),\n    visits: await prisma.visit.findMany({\n      where: { \n        // Find visits by email through RSVP\n        OR: [\n          { visitorId: { in: await getVisitorIdsForEmail(userEmail) } }\n        ]\n      }\n    }),\n    audienceMembers: await prisma.audienceMember.findMany({\n      where: { primaryEmail: userEmail }\n    }),\n    emailEvents: await prisma.emailEvent.findMany({\n      where: {\n        job: {\n          recipientEmail: userEmail\n        }\n      }\n    })\n  };\n  \n  return {\n    success: true,\n    data: {\n      personalData: userData,\n      dataCategories: [\n        'Contact Information',\n        'Event Preferences',\n        'Website Analytics',\n        'Email Engagement',\n        'Marketing Attribution'\n      ],\n      dataSources: [\n        'Direct input (RSVP form)',\n        'Automatic collection (website analytics)',\n        'Email service providers',\n        'LeadMine integration'\n      ],\n      retentionPeriods: {\n        'RSVP Data': '2 years after event',\n        'Analytics Data': '1 year',\n        'Email Data': '3 years',\n        'Marketing Data': '2 years'\n      }\n    }\n  };\n}",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- correct inaccurate data\nasync function handleRectificationRequest(userEmail: string, corrections: any) {\n  const updates = [];\n  \n  // Update RSVP data\n  if (corrections.rsvp) {\n    const rsvpUpdate = await prisma.rsvp.update({\n      where: { email: userEmail },\n      data: corrections.rsvp\n    });\n    updates.push('RSVP data updated');\n  }\n  \n  // Update audience member data\n  if (corrections.audience) {\n    const audienceUpdate = await prisma.audienceMember.updateMany({\n      where: { primaryEmail: userEmail },\n      data: corrections.audience\n    });\n    updates.push('Audience data updated');\n  }\n  \n  return {\n    success: true,\n    data: {\n      updates,\n      timestamp: new Date().toISOString()\n    }\n  };\n}",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- delete all user data\nasync function handleErasureRequest(userEmail: string) {\n  const deletions = [];\n  \n  // Delete RSVP data\n  const rsvpDelete = await prisma.rsvp.deleteMany({\n    where: { email: userEmail }\n  });\n  if (rsvpDelete.count > 0) {\n    deletions.push(`${rsvpDelete.count} RSVP records deleted`);\n  }\n  \n  // Delete audience member data\n  const audienceDelete = await prisma.audienceMember.deleteMany({\n    where: { primaryEmail: userEmail }\n  });\n  if (audienceDelete.count > 0) {\n    deletions.push(`${audienceDelete.count} audience member records deleted`);\n  }\n  \n  // Anonymize visit data (keep for analytics but remove personal identifiers)\n  const visitAnonymize = await prisma.visit.updateMany({\n    where: {\n      visitorId: { in: await getVisitorIdsForEmail(userEmail) }\n    },\n    data: {\n      visitorId: 'anonymized',\n      sessionId: 'anonymized',\n      ipHash: 'anonymized'\n    }\n  });\n  if (visitAnonymize.count > 0) {\n    deletions.push(`${visitAnonymize.count} visit records anonymized`);\n  }\n  \n  return {\n    success: true,\n    data: {\n      deletions,\n      timestamp: new Date().toISOString()\n    }\n  };\n}",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- export user data in machine-readable format\nasync function handlePortabilityRequest(userEmail: string) {\n  const userData = await handleAccessRequest(userEmail);\n  \n  // Format data for portability (JSON format)\n  const portableData = {\n    exportDate: new Date().toISOString(),\n    userEmail,\n    dataFormat: 'JSON',\n    data: userData.data\n  };\n  \n  return {\n    success: true,\n    data: portableData\n  };\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- dataRetentionPolicies.rsvp.retentionPeriod);\n    const rsvpDelete = await prisma.rsvp.deleteMany({\n      where: {\n        createdAt: {\n          lt: rsvpCutoff\n        }\n      }\n    });\n    results.cleaned += rsvpDelete.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`RSVP cleanup failed: ${error.message}`);\n  }",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- dataRetentionPolicies.visits.retentionPeriod);\n    const visitAnonymize = await prisma.visit.updateMany({\n      where: {\n        createdAt: {\n          lt: visitCutoff\n        }\n      },\n      data: {\n        visitorId: 'anonymized',\n        sessionId: 'anonymized',\n        ipHash: 'anonymized'\n      }\n    });\n    results.cleaned += visitAnonymize.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`Visit cleanup failed: ${error.message}`);\n  }",
        "type": "item",
        "category": "creation"
      }
    ],
    "interconnections": [
      "Security Features",
      "Analytics & Tracking",
      "Form Validation"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "'Invalid request type' };\n    }\n  } catch (error) {\n    console.error('Data subject request error:', error);\n    return { success: false, error: 'Request processing failed' };\n  }\n}",
      "', error);\n    return NextResponse.json(\n      { success: false, error: 'Request processing failed' },\n      { status: 500 }\n    );\n  }\n}",
      "', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch privacy policy' },\n      { status: 500 }\n    );\n  }\n}\n```"
    ],
    "related_apis": [
      "/api/privacy/request',",
      "/api/privacy/request/route.ts",
      "/api/privacy/policy/route.ts"
    ],
    "related_components": [
      "AnalyticsBeacon.tsx",
      "PrivacyDashboard.tsx",
      "privacy.ts",
      "consent.ts",
      "rights.ts",
      "AnalyticsBeacon.ts",
      "retention.ts",
      "PrivacyDashboard.ts",
      "route.ts",
      "result.js",
      "req.js",
      "NextResponse.js",
      "src/lib/privacy.ts",
      "src/lib/consent.ts",
      "src/lib/data-rights.ts",
      "src/components/AnalyticsBeacon.tsx",
      "src/lib/data-retention.ts",
      "src/components/PrivacyDashboard.tsx",
      "src/app/api/privacy/request/route.ts",
      "src/app/api/privacy/policy/route.ts",
      "components/AnalyticsBeacon.tsx",
      "components/PrivacyDashboard.tsx"
    ],
    "tags": [
      "prisma",
      "weaviate",
      "privacy-&-compliance",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "react",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "02-campaign-listing-accurate_1",
    "category": "Campaign Management",
    "subcategory": "General",
    "title": "Show me all campaigns",
    "description": "Show me all campaigns - What campaigns do I have?",
    "code_snippets": [
      {
        "language": "code",
        "code": "GET /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nGET /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"campaigns\": [\n    {\n      \"id\": \"campaign-id-1\",\n      \"name\": \"Tech Conference Campaign\",\n      \"description\": \"Email campaign for tech conference attendees\",\n      \"status\": \"DRAFT\",\n      \"meta\": {},\n      \"createdAt\": \"2025-01-15T10:00:00Z\",\n      \"updatedAt\": \"2025-01-15T10:00:00Z\",\n      \"schedules\": []\n    },\n    {\n      \"id\": \"campaign-id-2\",\n      \"name\": \"Summer Event Campaign\",\n      \"description\": \"Multi-step email sequence for summer event\",\n      \"status\": \"SCHEDULED\",\n      \"meta\": {},\n      \"createdAt\": \"2025-01-14T09:00:00Z\",\n      \"updatedAt\": \"2025-01-14T09:00:00Z\",\n      \"schedules\": [\n        {\n          \"id\": \"schedule-id-1\",\n          \"name\": \"Summer Event Step 1\",\n          \"templateId\": \"template-id-1\",\n          \"groupId\": \"group-id-1\",\n          \"status\": \"SCHEDULED\",\n          \"sendAt\": \"2025-06-01T09:00:00Z\",\n          \"timeZone\": \"America/Vancouver\"\n        }\n      ]\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `id` - Unique campaign identifier\n- `name` - Campaign name\n- `description` - Campaign description\n- `status` - Current campaign status\n- `meta` - Additional metadata\n- `createdAt` - Creation timestamp\n- `updatedAt` - Last update timestamp\n- `schedules` - Associated campaign schedules",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `DRAFT` - Not yet ready to send\n- `SCHEDULED` - Scheduled for future send\n- `SENDING` - Currently being sent\n- `PAUSED` - Temporarily paused\n- `COMPLETED` - Finished sending\n- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `id` - Unique campaign identifier",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `name` - Campaign name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `description` - Campaign description",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `status` - Current campaign status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `meta` - Additional metadata",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `createdAt` - Creation timestamp",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `updatedAt` - Last update timestamp",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `schedules` - Associated campaign schedules",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `DRAFT` - Not yet ready to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SCHEDULED` - Scheduled for future send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SENDING` - Currently being sent",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `PAUSED` - Temporarily paused",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `COMPLETED` - Finished sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "GET /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "02-campaign-listing-accurate_3",
    "category": "Campaign Management",
    "subcategory": "General",
    "title": "Get campaign details",
    "description": "Get campaign details - Show me details for campaign ID campaign-123",
    "code_snippets": [
      {
        "language": "code",
        "code": "GET /api/admin/campaign/campaigns/campaign-123",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "123. Here's how to retrieve specific campaign details:",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "*\n```\nGET /api/admin/campaign/campaigns/campaign-123\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"SCHEDULED\",\n    \"meta\": {\n      \"eventType\": \"conference\",\n      \"targetAudience\": \"tech-professionals\",\n      \"expectedRecipients\": 500\n    },\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Conference Announcement\",\n        \"templateId\": \"template-789\",\n        \"groupId\": \"group-101\",\n        \"status\": \"SCHEDULED\",\n        \"sendAt\": \"2025-02-01T09:00:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1,\n        \"createdAt\": \"2025-01-15T10:00:00Z\",\n        \"updatedAt\": \"2025-01-15T10:00:00Z\"\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Basic Info**: ID, name, description, status\n- **Timestamps**: Created and updated dates\n- **Metadata**: Custom data stored in meta field\n- **Schedules**: All associated campaign schedules",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Template**: Which email template to use\n- **Audience**: Which group to send to\n- **Timing**: When to send (sendAt, timeZone)\n- **Configuration**: Throttling, step order\n- **Status**: Current schedule status",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- If campaign not found: 404 with \"Campaign not found\"\n- If invalid ID format: 400 with validation error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Basic Info**: ID, name, description, status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Timestamps**: Created and updated dates",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Metadata**: Custom data stored in meta field",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Schedules**: All associated campaign schedules",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Template**: Which email template to use",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Audience**: Which group to send to",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Timing**: When to send (sendAt, timeZone)",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Configuration**: Throttling, step order",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Status**: Current schedule status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If campaign not found: 404 with \"Campaign not found\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid ID format: 400 with validation error",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns/campaign-123",
      "GET /api/admin/campaign/campaigns/campaign-123"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "zod",
      "typescript",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "02-campaign-listing-accurate_5",
    "category": "Campaign Management",
    "subcategory": "Campaign Status",
    "title": "Show me campaigns by status",
    "description": "Show me campaigns by status - What campaigns are currently in DRAFT status?",
    "code_snippets": [
      {
        "language": "code",
        "code": "GET /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. **Add Schedules**: Create campaign schedules with templates and audience groups",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. **Configure Steps**: Set up send timing and throttling",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. **Test**: Send test emails to verify setup",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "4. **Schedule**: Change status to SCHEDULED when ready",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "*\n```\nGET /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"campaigns\": [\n    {\n      \"id\": \"draft-campaign-1\",\n      \"name\": \"New Product Launch\",\n      \"description\": \"Campaign for new product announcement\",\n      \"status\": \"DRAFT\",\n      \"meta\": {},\n      \"createdAt\": \"2025-01-15T10:00:00Z\",\n      \"updatedAt\": \"2025-01-15T10:00:00Z\",\n      \"schedules\": []\n    },\n    {\n      \"id\": \"draft-campaign-2\",\n      \"name\": \"Holiday Promotion\",\n      \"description\": \"Holiday season promotional campaign\",\n      \"status\": \"DRAFT\",\n      \"meta\": {},\n      \"createdAt\": \"2025-01-14T15:30:00Z\",\n      \"updatedAt\": \"2025-01-14T15:30:00Z\",\n      \"schedules\": []\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **New Product Launch** - Created today, no schedules yet\n- **Holiday Promotion** - Created yesterday, ready for configuration",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- No active schedules\n- Can be edited freely\n- Not yet ready for sending\n- May have incomplete steps",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n1. **Add Schedules**: Create campaign schedules with templates and audience groups\n2. **Configure Steps**: Set up send timing and throttling\n3. **Test**: Send test emails to verify setup\n4. **Schedule**: Change status to SCHEDULED when ready",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n- `SCHEDULED` - Ready to send at specified time\n- `SENDING` - Currently being sent\n- `PAUSED` - Temporarily stopped\n- `COMPLETED` - Finished sending\n- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **New Product Launch** - Created today, no schedules yet",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Holiday Promotion** - Created yesterday, ready for configuration",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- No active schedules",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be edited freely",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Not yet ready for sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- May have incomplete steps",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `SCHEDULED` - Ready to send at specified time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SENDING` - Currently being sent",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `PAUSED` - Temporarily stopped",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `COMPLETED` - Finished sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "GET /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "02-campaign-listing-accurate_7",
    "category": "Campaign Management",
    "subcategory": "General",
    "title": "Show me campaign metadata",
    "description": "Show me campaign metadata - What metadata is stored in my campaigns?",
    "code_snippets": [
      {
        "language": "code",
        "code": "**Common Metadata Fields:**\n- `eventType` - Type of event (conference, webinar, workshop)\n- `targetAudience` - Intended audience segment\n- `expectedRecipients` - Estimated number of recipients\n- `priority` - Campaign priority level\n- `tags` - Searchable tags for organization\n- `customFields` - Event-specific data\n- `analytics` - Performance targets\n\n**Metadata Usage:**\n- **Filtering**: Find campaigns by event type or audience\n- **Analytics**: Track performance against targets\n- **Organization**: Tag and categorize campaigns\n- **Customization**: Store event-specific information\n\n**API Access:**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"SCHEDULED\",\n    \"meta\": {\n      \"eventType\": \"conference\",\n      \"targetAudience\": \"tech-professionals\",\n      \"expectedRecipients\": 500,\n      \"priority\": \"high\",\n      \"tags\": [\"conference\", \"tech\", \"2025\"],\n      \"customFields\": {\n        \"venue\": \"Convention Center\",\n        \"date\": \"2025-03-15\",\n        \"speakers\": [\"John Doe\", \"Jane Smith\"]\n      },\n      \"analytics\": {\n        \"targetOpenRate\": 0.25,\n        \"targetClickRate\": 0.05\n      }\n    },\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `eventType` - Type of event (conference, webinar, workshop)\n- `targetAudience` - Intended audience segment\n- `expectedRecipients` - Estimated number of recipients\n- `priority` - Campaign priority level\n- `tags` - Searchable tags for organization\n- `customFields` - Event-specific data\n- `analytics` - Performance targets",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n- **Filtering**: Find campaigns by event type or audience\n- **Analytics**: Track performance against targets\n- **Organization**: Tag and categorize campaigns\n- **Customization**: Store event-specific information",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```\nGET /api/admin/campaign/campaigns/campaign-123\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n- Use consistent field names\n- Include relevant tags\n- Set realistic targets\n- Document custom fields\n- Keep metadata updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `eventType` - Type of event (conference, webinar, workshop)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `targetAudience` - Intended audience segment",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- `expectedRecipients` - Estimated number of recipients",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `priority` - Campaign priority level",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `tags` - Searchable tags for organization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `customFields` - Event-specific data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `analytics` - Performance targets",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- **Filtering**: Find campaigns by event type or audience",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Analytics**: Track performance against targets",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- **Organization**: Tag and categorize campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Customization**: Store event-specific information",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use consistent field names",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Include relevant tags",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Set realistic targets",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- Document custom fields",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep metadata updated",
        "type": "item",
        "category": "modification"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns/campaign-123",
      "GET /api/admin/campaign/campaigns/campaign-123"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "analytics",
      "typescript",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "07-global-template-system-accurate_1",
    "category": "Global Template System",
    "subcategory": "General",
    "title": "The global html template system",
    "description": "How does the global HTML template system work? - Explain the global email template system",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// In email-template.ts\nexport async function generateEmailHTML(content) {\n  // Fetch global template from API\n  const response = await fetch('/api/admin/global-template');\n  const { html } = await response.json();\n  \n  // Replace all variables in template\n  const finalHTML = html\n    .replace(/\\{\\{subject\\}\\}/g, content.subject)\n    .replace(/\\{\\{greeting_title\\}\\}/g, content.greeting_title)\n    .replace(/\\{\\{main_content_body\\}\\}/g, content.body)\n    // ... all other variable replacements\n    \n  // Add tracking pixel\n  const trackingPixel = `<img src=\"/api/__pixel?token=${inviteToken}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\n  return finalHTML + trackingPixel;\n}",
        "context": "Code snippet 1",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "GET /api/admin/global-template",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. Template Variables:**\nThe global template supports these variable categories:\n\n**Campaign Template Variables:**\n- `{{subject}}` - Email subject line\n- `{{greeting_title}}` - Greeting title\n- `{{greeting_message}}` - Greeting message\n- `{{main_content_title}}` - Main content title\n- `{{main_content_body}}` - Main content body\n- `{{button_text}}` - Call-to-action button text\n- `{{button_link}}` - Call-to-action button link\n- `{{additional_info_title}}` - Additional info title\n- `{{additional_info_body}}` - Additional info body\n- `{{closing_title}}` - Closing title\n- `{{closing_message}}` - Closing message\n\n**Global Template Variables:**\n- `{{global_hero_title}}` - Hero section title\n- `{{global_hero_message}}` - Hero section message\n- `{{global_signature_name}}` - Signature name\n- `{{global_signature_title}}` - Signature title\n- `{{global_signature_company}}` - Signature company\n- `{{global_signature_location}}` - Signature location\n- `{{global_event_title}}` - Event details title\n- `{{global_event_date}}` - Event date\n- `{{global_event_time}}` - Event time\n- `{{global_event_location}}` - Event location\n- `{{global_event_cost}}` - Event cost\n- `{{global_event_includes}}` - What's included\n\n**Business Variables:**\n- `{{business_name}}` - Business name\n- `{{business_id}}` - Business ID\n- `{{invite_link}}` - RSVP invite link\n- `{{unsubscribe_link}}` - Unsubscribe link\n\n**4. Template Processing:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. Template Structure:**\n- **Header**: Logo, subject line\n- **Hero Section**: Green bar with hero title/message\n- **Content Sections**: Greeting, main content, buttons\n- **Event Details**: Structured event information\n- **Signature**: Professional signature block\n- **Footer**: Social links, unsubscribe, copyright\n\n**6. Styling Features:**\n- Responsive design with mobile breakpoints\n- Evergreen Web Solutions branding (green theme)\n- Professional typography using Inter font\n- Email-client compatible CSS\n- Social media links with icons\n- Accessibility features (ARIA labels, alt text)\n\n**7. Template Management:**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Request:**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. Template Storage:**\n- Global templates are stored in the `GlobalHTMLTemplate` database table\n- Only one template can be active at a time (`isActive: true`)\n- Templates include full HTML structure with CSS styling",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. API Endpoint:**\n```\nGET /api/admin/global-template\n```",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "3. Template Variables:**\nThe global template supports these variable categories:",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. Template Processing:**\n```javascript\n// In email-template.ts\nexport async function generateEmailHTML(content) {\n  // Fetch global template from API\n  const response = await fetch('/api/admin/global-template');\n  const { html } = await response.json();\n  \n  // Replace all variables in template\n  const finalHTML = html\n    .replace(/\\{\\{subject\\}\\}/g, content.subject)\n    .replace(/\\{\\{greeting_title\\}\\}/g, content.greeting_title)\n    .replace(/\\{\\{main_content_body\\}\\}/g, content.body)\n    // ... all other variable replacements\n    \n  // Add tracking pixel\n  const trackingPixel = `<img src=\"/api/__pixel?token=${inviteToken}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\n  return finalHTML + trackingPixel;\n}\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "5. Template Structure:**\n- **Header**: Logo, subject line\n- **Hero Section**: Green bar with hero title/message\n- **Content Sections**: Greeting, main content, buttons\n- **Event Details**: Structured event information\n- **Signature**: Professional signature block\n- **Footer**: Social links, unsubscribe, copyright",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. Styling Features:**\n- Responsive design with mobile breakpoints\n- Evergreen Web Solutions branding (green theme)\n- Professional typography using Inter font\n- Email-client compatible CSS\n- Social media links with icons\n- Accessibility features (ARIA labels, alt text)",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. Template Management:**\n```\nPOST /api/admin/global-template\n```",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "8. Integration with Campaign System:**\n- Campaign templates store content in `htmlBody` field\n- Global template wraps campaign content\n- Variables are replaced during email generation\n- Tracking pixels are automatically added\n- Both HTML and text versions are generated",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. Template Storage:**\n- Global templates are stored in the `GlobalHTMLTemplate` database table\n- Only one template can be active at a time (`isActive: true`)\n- Templates include full HTML structure with CSS styling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```\nGET /api/admin/global-template\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"html\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\" />\\n    <title>{{subject}}</title>\\n    <link href=\\\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap\\\" rel=\\\"stylesheet\\\" />\\n    <style>\\n        /* Full CSS styling for email template */\\n    </style>\\n</head>\\n<body>\\n    <!-- Complete HTML structure -->\\n</body>\\n</html>\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\nThe global template supports these variable categories:",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{subject}}` - Email subject line\n- `{{greeting_title}}` - Greeting title\n- `{{greeting_message}}` - Greeting message\n- `{{main_content_title}}` - Main content title\n- `{{main_content_body}}` - Main content body\n- `{{button_text}}` - Call-to-action button text\n- `{{button_link}}` - Call-to-action button link\n- `{{additional_info_title}}` - Additional info title\n- `{{additional_info_body}}` - Additional info body\n- `{{closing_title}}` - Closing title\n- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `{{global_hero_title}}` - Hero section title\n- `{{global_hero_message}}` - Hero section message\n- `{{global_signature_name}}` - Signature name\n- `{{global_signature_title}}` - Signature title\n- `{{global_signature_company}}` - Signature company\n- `{{global_signature_location}}` - Signature location\n- `{{global_event_title}}` - Event details title\n- `{{global_event_date}}` - Event date\n- `{{global_event_time}}` - Event time\n- `{{global_event_location}}` - Event location\n- `{{global_event_cost}}` - Event cost\n- `{{global_event_includes}}` - What's included",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{business_name}}` - Business name\n- `{{business_id}}` - Business ID\n- `{{invite_link}}` - RSVP invite link\n- `{{unsubscribe_link}}` - Unsubscribe link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```javascript\n// In email-template.ts\nexport async function generateEmailHTML(content) {\n  // Fetch global template from API\n  const response = await fetch('/api/admin/global-template');\n  const { html } = await response.json();\n  \n  // Replace all variables in template\n  const finalHTML = html\n    .replace(/\\{\\{subject\\}\\}/g, content.subject)\n    .replace(/\\{\\{greeting_title\\}\\}/g, content.greeting_title)\n    .replace(/\\{\\{main_content_body\\}\\}/g, content.body)\n    // ... all other variable replacements\n    \n  // Add tracking pixel\n  const trackingPixel = `<img src=\"/api/__pixel?token=${inviteToken}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\n  return finalHTML + trackingPixel;\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Header**: Logo, subject line\n- **Hero Section**: Green bar with hero title/message\n- **Content Sections**: Greeting, main content, buttons\n- **Event Details**: Structured event information\n- **Signature**: Professional signature block\n- **Footer**: Social links, unsubscribe, copyright",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Responsive design with mobile breakpoints\n- Evergreen Web Solutions branding (green theme)\n- Professional typography using Inter font\n- Email-client compatible CSS\n- Social media links with icons\n- Accessibility features (ARIA labels, alt text)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```\nPOST /api/admin/global-template\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"html\": \"<!DOCTYPE html>...\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"message\": \"Global template updated successfully\",\n  \"html\": \"<!DOCTYPE html>...\",\n  \"id\": \"template-id\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Campaign templates store content in `htmlBody` field\n- Global template wraps campaign content\n- Variables are replaced during email generation\n- Tracking pixels are automatically added\n- Both HTML and text versions are generated",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Global templates are stored in the `GlobalHTMLTemplate` database table",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Only one template can be active at a time (`isActive: true`)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Templates include full HTML structure with CSS styling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Complete HTML structure -->\\n</body>\\n</html>\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{subject}}` - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_title}}` - Greeting title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_message}}` - Greeting message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_title}}` - Main content title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_body}}` - Main content body",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_text}}` - Call-to-action button text",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_link}}` - Call-to-action button link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{additional_info_title}}` - Additional info title",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{additional_info_body}}` - Additional info body",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{closing_title}}` - Closing title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{closing_message}}` - Closing message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_hero_title}}` - Hero section title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_hero_message}}` - Hero section message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_name}}` - Signature name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_title}}` - Signature title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_company}}` - Signature company",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_location}}` - Signature location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_title}}` - Event details title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_date}}` - Event date",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_time}}` - Event time",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_location}}` - Event location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_cost}}` - Event cost",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_includes}}` - What's included",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{business_name}}` - Business name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{business_id}}` - Business ID",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{invite_link}}` - RSVP invite link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{unsubscribe_link}}` - Unsubscribe link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Header**: Logo, subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Hero Section**: Green bar with hero title/message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Content Sections**: Greeting, main content, buttons",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Event Details**: Structured event information",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Signature**: Professional signature block",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Footer**: Social links, unsubscribe, copyright",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Responsive design with mobile breakpoints",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Evergreen Web Solutions branding (green theme)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Professional typography using Inter font",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Email-client compatible CSS",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Social media links with icons",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Accessibility features (ARIA labels, alt text)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign templates store content in `htmlBody` field",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Global template wraps campaign content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are replaced during email generation",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Tracking pixels are automatically added",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Both HTML and text versions are generated",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/global-template",
      "/api/admin/global-template');",
      "/api/__pixel?token=${inviteToken}\"",
      "POST /api/admin/global-template",
      "GET /api/admin/global-template"
    ],
    "related_components": [
      "template.ts",
      "response.js"
    ],
    "tags": [
      "prisma",
      "weaviate",
      "analytics",
      "typescript",
      "tailwind",
      "resend",
      "global-template-system",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "07-global-template-system-accurate_3",
    "category": "Global Template System",
    "subcategory": "General",
    "title": "What template variables are available for email campaigns",
    "description": "What template variables are available for email campaigns? - Show me all the template variables I can use",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// Replace campaign variables in template content\nconst processedContent = templateContent\n  .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n  .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// Replace all variables in global template\nconst finalHTML = globalTemplate\n  .replace(/\\{\\{subject\\}\\}/g, subject)\n  .replace(/\\{\\{greeting_title\\}\\}/g, greeting_title)\n  .replace(/\\{\\{main_content_body\\}\\}/g, body)\n  .replace(/\\{\\{global_hero_title\\}\\}/g, global_hero_title)\n  .replace(/\\{\\{global_event_date\\}\\}/g, global_event_date);",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**In Global Template:**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**VARIABLE REPLACEMENT PROCESS**\n\n**1. Campaign Template Processing:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**2. Global Template Processing:**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. Campaign Template Processing:**\n```javascript\n// Replace campaign variables in template content\nconst processedContent = templateContent\n  .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n  .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. Global Template Processing:**\n```javascript\n// Replace all variables in global template\nconst finalHTML = globalTemplate\n  .replace(/\\{\\{subject\\}\\}/g, subject)\n  .replace(/\\{\\{greeting_title\\}\\}/g, greeting_title)\n  .replace(/\\{\\{main_content_body\\}\\}/g, body)\n  .replace(/\\{\\{global_hero_title\\}\\}/g, global_hero_title)\n  .replace(/\\{\\{global_event_date\\}\\}/g, global_event_date);\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n(Stored in CampaignTemplate database fields)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{subject}}` - Email subject line\n- `{{greeting_title}}` - Greeting section title\n- `{{greeting_message}}` - Greeting section message\n- `{{main_content_title}}` - Main content section title\n- `{{main_content_body}}` - Main content section body\n- `{{button_text}}` - Call-to-action button text\n- `{{button_link}}` - Call-to-action button link\n- `{{additional_info_title}}` - Additional information title\n- `{{additional_info_body}}` - Additional information body\n- `{{closing_title}}` - Closing section title\n- `{{closing_message}}` - Closing section message",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `{{signature_name}}` - Signature person name\n- `{{signature_title}}` - Signature person title\n- `{{signature_company}}` - Signature company name\n- `{{signature_location}}` - Signature location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n(Used in global HTML template)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{global_hero_title}}` - Hero section title (default: \"Welcome to Evergreen AI\")\n- `{{global_hero_message}}` - Hero section message (default: \"Thank you for your interest...\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{global_signature_name}}` - Global signature name (default: \"Gabriel Lacroix\")\n- `{{global_signature_title}}` - Global signature title (default: \"AI Solutions Specialist\")\n- `{{global_signature_company}}` - Global signature company (default: \"Evergreen Web Solutions\")\n- `{{global_signature_location}}` - Global signature location (default: \"Terrace, BC\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{global_event_title}}` - Event details title (default: \"Event Details\")\n- `{{global_event_date}}` - Event date (default: \"October 23rd, 2025\")\n- `{{global_event_time}}` - Event time (default: \"6:00 PM - 8:00 PM\")\n- `{{global_event_location}}` - Event location (default: \"Terrace, BC\")\n- `{{global_event_cost}}` - Event cost (default: \"Free\")\n- `{{global_event_includes}}` - What's included (default: \"Coffee, refreshments...\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n(Generated dynamically)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{business_name}}` - Recipient's business name\n- `{{business_id}}` - Recipient's business ID\n- `{{email}}` - Recipient's email address\n- `{{name}}` - Recipient's full name",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `{{invite_link}}` - RSVP invite link with tracking\n- `{{unsubscribe_link}}` - Unsubscribe link\n- `{{inviteToken}}` - Unique invite token for tracking",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**In Campaign Template (htmlBody):**\n```html\n<h2>{{greeting_title}}</h2>\n<p>{{greeting_message}}</p>\n<h3>{{main_content_title}}</h3>\n<p>{{main_content_body}}</p>\n<a href=\"{{button_link}}\" class=\"btn\">{{button_text}}</a>\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```html\n<div class=\"hero-title\">{{global_hero_title}}</div>\n<p class=\"hero-sub\">{{global_hero_message}}</p>\n<h2>{{greeting_title}}</h2>\n<p>{{main_content_body}}</p>\n<a href=\"{{button_link}}\" class=\"btn\">{{button_text}}</a>\n<div class=\"event-details\">\n  <h3>{{global_event_title}}</h3>\n  <p><strong>Date:</strong> {{global_event_date}}</p>\n  <p><strong>Time:</strong> {{global_event_time}}</p>\n</div>\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**1. Campaign Template Processing:**\n```javascript\n// Replace campaign variables in template content\nconst processedContent = templateContent\n  .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n  .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```javascript\n// Replace all variables in global template\nconst finalHTML = globalTemplate\n  .replace(/\\{\\{subject\\}\\}/g, subject)\n  .replace(/\\{\\{greeting_title\\}\\}/g, greeting_title)\n  .replace(/\\{\\{main_content_body\\}\\}/g, body)\n  .replace(/\\{\\{global_hero_title\\}\\}/g, global_hero_title)\n  .replace(/\\{\\{global_event_date\\}\\}/g, global_event_date);\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Global Template Defaults:**\n- `global_hero_title`: \"Welcome to Evergreen AI\"\n- `global_hero_message`: \"Thank you for your interest in our upcoming informational session...\"\n- `global_signature_name`: \"Gabriel Lacroix\"\n- `global_signature_title`: \"AI Solutions Specialist\"\n- `global_signature_company`: \"Evergreen Web Solutions\"\n- `global_signature_location`: \"Terrace, BC\"\n- `global_event_date`: \"October 23rd, 2025\"\n- `global_event_time`: \"6:00 PM - 8:00 PM\"\n- `global_event_location`: \"Terrace, BC\"\n- `global_event_cost`: \"Free\"\n- `global_event_includes`: \"Coffee, refreshments, networking, and actionable AI insights\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Use `{{variable_name}}` syntax (double curly braces)\n- Variables are case-sensitive\n- Use meaningful variable names\n- Test templates with sample data\n- Provide fallback content for optional variables\n- Keep variable names consistent across templates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{subject}}` - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_title}}` - Greeting section title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{greeting_message}}` - Greeting section message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_title}}` - Main content section title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{main_content_body}}` - Main content section body",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_text}}` - Call-to-action button text",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{button_link}}` - Call-to-action button link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{additional_info_title}}` - Additional information title",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{additional_info_body}}` - Additional information body",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{closing_title}}` - Closing section title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{closing_message}}` - Closing section message",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_name}}` - Signature person name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_title}}` - Signature person title",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_company}}` - Signature company name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{signature_location}}` - Signature location",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_hero_title}}` - Hero section title (default: \"Welcome to Evergreen AI\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_hero_message}}` - Hero section message (default: \"Thank you for your interest...\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_name}}` - Global signature name (default: \"Gabriel Lacroix\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_title}}` - Global signature title (default: \"AI Solutions Specialist\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_company}}` - Global signature company (default: \"Evergreen Web Solutions\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_signature_location}}` - Global signature location (default: \"Terrace, BC\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_title}}` - Event details title (default: \"Event Details\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_date}}` - Event date (default: \"October 23rd, 2025\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_time}}` - Event time (default: \"6:00 PM - 8:00 PM\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_location}}` - Event location (default: \"Terrace, BC\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_cost}}` - Event cost (default: \"Free\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{global_event_includes}}` - What's included (default: \"Coffee, refreshments...\")",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{business_name}}` - Recipient's business name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{business_id}}` - Recipient's business ID",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{email}}` - Recipient's email address",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `{{name}}` - Recipient's full name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{invite_link}}` - RSVP invite link with tracking",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{unsubscribe_link}}` - Unsubscribe link",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{inviteToken}}` - Unique invite token for tracking",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_hero_title`: \"Welcome to Evergreen AI\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_hero_message`: \"Thank you for your interest in our upcoming informational session...\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_signature_name`: \"Gabriel Lacroix\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_signature_title`: \"AI Solutions Specialist\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_signature_company`: \"Evergreen Web Solutions\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_signature_location`: \"Terrace, BC\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_event_date`: \"October 23rd, 2025\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_event_time`: \"6:00 PM - 8:00 PM\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_event_location`: \"Terrace, BC\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_event_cost`: \"Free\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `global_event_includes`: \"Coffee, refreshments, networking, and actionable AI insights\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use `{{variable_name}}` syntax (double curly braces)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are case-sensitive",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use meaningful variable names",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test templates with sample data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Provide fallback content for optional variables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep variable names consistent across templates",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [],
    "related_components": [],
    "tags": [
      "prisma",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "sendgrid",
      "global-template-system"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "07-global-template-system-accurate_5",
    "category": "Global Template System",
    "subcategory": "General",
    "title": "How do i create a template with the global template system",
    "description": "How do I create a template with the global template system? - Create a template that uses the global template variables",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// In email-sender.ts\nconst processedContent = templateContent\n  .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n  .replace(/\\{\\{\\s*business_id\\s*\\}\\}/g, context.business_id)\n  .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// In email-template.ts\nconst html = await generateEmailHTML({\n  subject: schedule.template.subject,\n  greeting: 'Hello!',\n  body: processedContent,\n  ctaText: 'View details & RSVP',\n  ctaLink: context.invite_link,\n  inviteToken: member.inviteToken,\n  businessName: context.business_name,\n  businessId: context.business_id,\n  // Global template variables\n  global_hero_title: 'Welcome to Evergreen AI',\n  global_hero_message: 'Thank you for your interest...',\n  global_signature_name: 'Gabriel Lacroix',\n  global_signature_title: 'AI Solutions Specialist',\n  global_signature_company: 'Evergreen Web Solutions',\n  global_signature_location: 'Terrace, BC',\n  global_event_date: 'October 23rd, 2025',\n  global_event_time: '6:00 PM - 8:00 PM',\n  global_event_location: 'Terrace, BC',\n  global_event_cost: 'Free',\n  global_event_includes: 'Coffee, refreshments, networking, and actionable AI insights'\n});",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "POST /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**2. GLOBAL TEMPLATE STRUCTURE**\n\nThe global template automatically wraps your campaign content:",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. EMAIL GENERATION PROCESS**\n\n**Step 1: Campaign Template Processing**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step 2: Global Template Processing**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. CREATE CAMPAIGN TEMPLATE**",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. GLOBAL TEMPLATE STRUCTURE**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. EMAIL GENERATION PROCESS**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. FINAL EMAIL STRUCTURE**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. TEMPLATE VARIABLE HIERARCHY**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "1. **Campaign Template Variables** - Your specific content",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. **Global Template Variables** - System-wide defaults",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. **Business Variables** - Dynamic recipient data",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. **Tracking Variables** - Generated links and tokens",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"AI Seminar Invitation\",\n  \"subject\": \"{{global_hero_title}} - {{greeting_title}}\",\n  \"htmlBody\": \"<h2>{{greeting_title}}</h2><p>{{greeting_message}}</p><h3>{{main_content_title}}</h3><p>{{main_content_body}}</p><div class=\\\"button-container\\\"><a href=\\\"{{button_link}}\\\" class=\\\"btn\\\">{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><h3>{{closing_title}}</h3><p>{{closing_message}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\n{{button_text}}: {{button_link}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_title}}\\n{{closing_message}}\"\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-id-123\",\n    \"name\": \"AI Seminar Invitation\",\n    \"subject\": \"{{global_hero_title}} - {{greeting_title}}\",\n    \"htmlBody\": \"<h2>{{greeting_title}}</h2><p>{{greeting_message}}</p>...\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}...\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\nThe global template automatically wraps your campaign content:",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Complete CSS styling */\n    </style>\n</head>\n<body>\n    <div class=\"evergreen-wrapper\">\n        <table class=\"evergreen-table\">\n            <!-- Header with logo and subject -->\n            <tr>\n                <td class=\"evergreen-header\">\n                    <h1>{{subject}}</h1>\n                    <div class=\"evergreen-logo\"></div>\n                </td>\n            </tr>\n            \n            <!-- Hero section with global variables -->\n            <tr>\n                <td>\n                    <table class=\"hero-inner\">\n                        <tr>\n                            <td class=\"hero-left\"></td>\n                            <td class=\"hero-right\">\n                                <div class=\"hero-title\">{{global_hero_title}}</div>\n                                <p class=\"hero-sub\">{{global_hero_message}}</p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n            \n            <!-- Your campaign content goes here -->\n            <tr>\n                <td class=\"content-cell\">\n                    {{greeting_title}}\n                    {{greeting_message}}\n                    {{main_content_title}}\n                    {{main_content_body}}\n                    {{button_text}}\n                    {{button_link}}\n                    {{additional_info_title}}\n                    {{additional_info_body}}\n                    {{closing_title}}\n                    {{closing_message}}\n                </td>\n            </tr>\n            \n            <!-- Event details section -->\n            <tr>\n                <td class=\"content-cell\">\n                    <div class=\"event-details\">\n                        <h3>{{global_event_title}}</h3>\n                        <p><strong>Date:</strong> {{global_event_date}}</p>\n                        <p><strong>Time:</strong> {{global_event_time}}</p>\n                        <p><strong>Location:</strong> {{global_event_location}}</p>\n                        <p><strong>Cost:</strong> {{global_event_cost}}</p>\n                        <p><strong>Includes:</strong> {{global_event_includes}}</p>\n                    </div>\n                </td>\n            </tr>\n            \n            <!-- Signature section -->\n            <tr>\n                <td class=\"content-cell\">\n                    <div class=\"evergreen-signature\">\n                        <p><strong>{{global_signature_name}}</strong><br>\n                        {{global_signature_title}}<br>\n                        {{global_signature_company}}<br>\n                        {{global_signature_location}}</p>\n                    </div>\n                </td>\n            </tr>\n            \n            <!-- Footer with social links and unsubscribe -->\n            <tr>\n                <td class=\"footer\">\n                    <div>© 2025 Gabriel Lacroix - Evergreen Web Solutions, Terrace BC</div>\n                    <div>\n                        <a href=\"https://www.linkedin.com/in/gabriel-marko-6b7aaa357/\">LinkedIn</a>\n                        <a href=\"https://www.facebook.com/share/14Exmoytvrs/\">Facebook</a>\n                        <a href=\"https://x.com/Evergreenweb3D\">X</a>\n                    </div>\n                    <div>\n                        <a href=\"{{unsubscribe_link}}\">unsubscribe here</a>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n</body>\n</html>\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Step 1: Campaign Template Processing**\n```javascript\n// In email-sender.ts\nconst processedContent = templateContent\n  .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n  .replace(/\\{\\{\\s*business_id\\s*\\}\\}/g, context.business_id)\n  .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```javascript\n// In email-template.ts\nconst html = await generateEmailHTML({\n  subject: schedule.template.subject,\n  greeting: 'Hello!',\n  body: processedContent,\n  ctaText: 'View details & RSVP',\n  ctaLink: context.invite_link,\n  inviteToken: member.inviteToken,\n  businessName: context.business_name,\n  businessId: context.business_id,\n  // Global template variables\n  global_hero_title: 'Welcome to Evergreen AI',\n  global_hero_message: 'Thank you for your interest...',\n  global_signature_name: 'Gabriel Lacroix',\n  global_signature_title: 'AI Solutions Specialist',\n  global_signature_company: 'Evergreen Web Solutions',\n  global_signature_location: 'Terrace, BC',\n  global_event_date: 'October 23rd, 2025',\n  global_event_time: '6:00 PM - 8:00 PM',\n  global_event_location: 'Terrace, BC',\n  global_event_cost: 'Free',\n  global_event_includes: 'Coffee, refreshments, networking, and actionable AI insights'\n});\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\nThe final email combines:\n- **Global Template**: HTML structure, CSS styling, branding\n- **Campaign Content**: Your specific message content\n- **Dynamic Variables**: Business info, tracking links, personalization\n- **Tracking**: Pixel tracking, link tracking, engagement tracking",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Priority Order:**\n1. **Campaign Template Variables** - Your specific content\n2. **Global Template Variables** - System-wide defaults\n3. **Business Variables** - Dynamic recipient data\n4. **Tracking Variables** - Generated links and tokens",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Template Design:**\n- Use semantic HTML structure\n- Include both HTML and text versions\n- Test with sample data\n- Keep content concise and focused\n- Use consistent variable naming",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Always provide fallback content\n- Use meaningful variable names\n- Test variable replacement\n- Document custom variables\n- Keep variables consistent across templates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Campaign templates store content only\n- Global template provides structure and styling\n- Variables are replaced during email generation\n- Both systems work together seamlessly",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- {{greeting_title}}\",\n  \"htmlBody\": \"<h2>{{greeting_title}}</h2><p>{{greeting_message}}</p><h3>{{main_content_title}}</h3><p>{{main_content_body}}</p><div class=\\\"button-container\\\"><a href=\\\"{{button_link}}\\\" class=\\\"btn\\\">{{button_text}}</a></div><h3>{{additional_info_title}}</h3><p>{{additional_info_body}}</p><h3>{{closing_title}}</h3><p>{{closing_message}}</p>\",\n  \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\n{{main_content_title}}\\n{{main_content_body}}\\n\\n{{button_text}}: {{button_link}}\\n\\n{{additional_info_title}}\\n{{additional_info_body}}\\n\\n{{closing_title}}\\n{{closing_message}}\"\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- {{greeting_title}}\",\n    \"htmlBody\": \"<h2>{{greeting_title}}</h2><p>{{greeting_message}}</p>...\",\n    \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}...\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Header with logo and subject -->\n            <tr>\n                <td class=\"evergreen-header\">\n                    <h1>{{subject}}</h1>\n                    <div class=\"evergreen-logo\"></div>\n                </td>\n            </tr>\n            \n            <!-- Hero section with global variables -->\n            <tr>\n                <td>\n                    <table class=\"hero-inner\">\n                        <tr>\n                            <td class=\"hero-left\"></td>\n                            <td class=\"hero-right\">\n                                <div class=\"hero-title\">{{global_hero_title}}</div>\n                                <p class=\"hero-sub\">{{global_hero_message}}</p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n            \n            <!-- Your campaign content goes here -->\n            <tr>\n                <td class=\"content-cell\">\n                    {{greeting_title}}\n                    {{greeting_message}}\n                    {{main_content_title}}\n                    {{main_content_body}}\n                    {{button_text}}\n                    {{button_link}}\n                    {{additional_info_title}}\n                    {{additional_info_body}}\n                    {{closing_title}}\n                    {{closing_message}}\n                </td>\n            </tr>\n            \n            <!-- Event details section -->\n            <tr>\n                <td class=\"content-cell\">\n                    <div class=\"event-details\">\n                        <h3>{{global_event_title}}</h3>\n                        <p><strong>Date:</strong> {{global_event_date}}</p>\n                        <p><strong>Time:</strong> {{global_event_time}}</p>\n                        <p><strong>Location:</strong> {{global_event_location}}</p>\n                        <p><strong>Cost:</strong> {{global_event_cost}}</p>\n                        <p><strong>Includes:</strong> {{global_event_includes}}</p>\n                    </div>\n                </td>\n            </tr>\n            \n            <!-- Signature section -->\n            <tr>\n                <td class=\"content-cell\">\n                    <div class=\"evergreen-signature\">\n                        <p><strong>{{global_signature_name}}</strong><br>\n                        {{global_signature_title}}<br>\n                        {{global_signature_company}}<br>\n                        {{global_signature_location}}</p>\n                    </div>\n                </td>\n            </tr>\n            \n            <!-- Footer with social links and unsubscribe -->\n            <tr>\n                <td class=\"footer\">\n                    <div>© 2025 Gabriel Lacroix - Evergreen Web Solutions, Terrace BC</div>\n                    <div>\n                        <a href=\"https://www.linkedin.com/in/gabriel-marko-6b7aaa357/\">LinkedIn</a>\n                        <a href=\"https://www.facebook.com/share/14Exmoytvrs/\">Facebook</a>\n                        <a href=\"https://x.com/Evergreenweb3D\">X</a>\n                    </div>\n                    <div>\n                        <a href=\"{{unsubscribe_link}}\">unsubscribe here</a>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n</body>\n</html>\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- 8:00 PM',\n  global_event_location: 'Terrace, BC',\n  global_event_cost: 'Free',\n  global_event_includes: 'Coffee, refreshments, networking, and actionable AI insights'\n});\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Global Template**: HTML structure, CSS styling, branding",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Campaign Content**: Your specific message content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Dynamic Variables**: Business info, tracking links, personalization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Tracking**: Pixel tracking, link tracking, engagement tracking",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Your specific content\n2. **Global Template Variables** - System-wide defaults\n3. **Business Variables** - Dynamic recipient data\n4. **Tracking Variables** - Generated links and tokens",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use semantic HTML structure",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Include both HTML and text versions",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test with sample data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep content concise and focused",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use consistent variable naming",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Always provide fallback content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use meaningful variable names",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test variable replacement",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Document custom variables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep variables consistent across templates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Campaign templates store content only",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Global template provides structure and styling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are replaced during email generation",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Both systems work together seamlessly",
        "type": "item",
        "category": "retrieval"
      }
    ],
    "interconnections": [
      "t",
      "Email Template Management",
      "Email Sending System"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "POST /api/admin/campaign/templates"
    ],
    "related_components": [
      "sender.ts",
      "template.ts"
    ],
    "tags": [
      "analytics",
      "typescript",
      "tailwind",
      "resend",
      "sendgrid",
      "global-template-system"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "06-template-management-accurate_1",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "List all email templates",
    "description": "List all email templates - Show me all my email templates",
    "code_snippets": [
      {
        "language": "code",
        "code": "GET /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nGET /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"templates\": [\n    {\n      \"id\": \"template-id-123\",\n      \"name\": \"Conference Announcement Template\",\n      \"subject\": \"Join us at Tech Conference 2025\",\n      \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference.</p><p>Best regards,<br>The Conference Team</p>\",\n      \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\",\n      \"meta\": {},\n      \"greeting_title\": null,\n      \"greeting_message\": null,\n      \"signature_name\": null,\n      \"signature_title\": null,\n      \"signature_company\": null,\n      \"signature_location\": null,\n      \"main_content_title\": null,\n      \"main_content_body\": null,\n      \"button_text\": null,\n      \"additional_info_title\": null,\n      \"additional_info_body\": null,\n      \"closing_title\": null,\n      \"closing_message\": null,\n      \"createdAt\": \"2025-01-15T10:00:00Z\",\n      \"updatedAt\": \"2025-01-15T10:00:00Z\"\n    },\n    {\n      \"id\": \"template-id-456\",\n      \"name\": \"Personalized Conference Invitation\",\n      \"subject\": \"{{greeting_title}} - You're Invited to Tech Conference 2025\",\n      \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n      \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\",\n      \"meta\": {},\n      \"greeting_title\": null,\n      \"greeting_message\": null,\n      \"signature_name\": null,\n      \"signature_title\": null,\n      \"signature_company\": null,\n      \"signature_location\": null,\n      \"main_content_title\": null,\n      \"main_content_body\": null,\n      \"button_text\": null,\n      \"additional_info_title\": null,\n      \"additional_info_body\": null,\n      \"closing_title\": null,\n      \"closing_message\": null,\n      \"createdAt\": \"2025-01-14T15:30:00Z\",\n      \"updatedAt\": \"2025-01-14T15:30:00Z\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `id` - Unique template identifier\n- `name` - Template name\n- `subject` - Email subject line\n- `htmlBody` - HTML email content\n- `textBody` - Plain text version (optional)\n- `meta` - Additional metadata\n- `greeting_title` - Greeting title variable\n- `greeting_message` - Greeting message variable\n- `signature_name` - Signature name variable\n- `signature_title` - Signature title variable\n- `signature_company` - Signature company variable\n- `signature_location` - Signature location variable\n- `main_content_title` - Main content title variable\n- `main_content_body` - Main content body variable\n- `button_text` - Button text variable\n- `additional_info_title` - Additional info title variable\n- `additional_info_body` - Additional info body variable\n- `closing_title` - Closing title variable\n- `closing_message` - Closing message variable\n- `createdAt` - Creation timestamp\n- `updatedAt` - Last update timestamp",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- You're Invited to Tech Conference 2025\",\n      \"htmlBody\": \"<h1>{{greeting_title}}</h1><p>{{greeting_message}}</p><h2>Main Event Details</h2><p>{{main_content_body}}</p><p>Best regards,<br>{{signature_name}}<br>{{signature_title}}<br>{{signature_company}}<br>{{signature_location}}</p>\",\n      \"textBody\": \"{{greeting_title}}\\n\\n{{greeting_message}}\\n\\nMain Event Details\\n{{main_content_body}}\\n\\nBest regards,\\n{{signature_name}}\\n{{signature_title}}\\n{{signature_company}}\\n{{signature_location}}\",\n      \"meta\": {},\n      \"greeting_title\": null,\n      \"greeting_message\": null,\n      \"signature_name\": null,\n      \"signature_title\": null,\n      \"signature_company\": null,\n      \"signature_location\": null,\n      \"main_content_title\": null,\n      \"main_content_body\": null,\n      \"button_text\": null,\n      \"additional_info_title\": null,\n      \"additional_info_body\": null,\n      \"closing_title\": null,\n      \"closing_message\": null,\n      \"createdAt\": \"2025-01-14T15:30:00Z\",\n      \"updatedAt\": \"2025-01-14T15:30:00Z\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `id` - Unique template identifier",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `name` - Template name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `subject` - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `htmlBody` - HTML email content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `textBody` - Plain text version (optional)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `meta` - Additional metadata",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `greeting_title` - Greeting title variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `greeting_message` - Greeting message variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `signature_name` - Signature name variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `signature_title` - Signature title variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `signature_company` - Signature company variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `signature_location` - Signature location variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `main_content_title` - Main content title variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `main_content_body` - Main content body variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `button_text` - Button text variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `additional_info_title` - Additional info title variable",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `additional_info_body` - Additional info body variable",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `closing_title` - Closing title variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `closing_message` - Closing message variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `createdAt` - Creation timestamp",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- `updatedAt` - Last update timestamp",
        "type": "item",
        "category": "modification"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "GET /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "06-template-management-accurate_3",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Get template details",
    "description": "Get template details - Show me details for template ID template-123",
    "code_snippets": [
      {
        "language": "code",
        "code": "GET /api/admin/campaign/templates/template-123",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "123. Here's how to retrieve specific template details:",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "*\n```\nGET /api/admin/campaign/templates/template-123\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-123\",\n    \"name\": \"Conference Announcement Template\",\n    \"subject\": \"Join us at Tech Conference 2025\",\n    \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference.</p><p>Best regards,<br>The Conference Team</p>\",\n    \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {\n      \"category\": \"conference\",\n      \"version\": \"1.0\",\n      \"tags\": [\"announcement\", \"tech\", \"2025\"]\n    },\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Basic Info**: ID, name, subject, HTML/text content\n- **Variables**: All available template variables\n- **Metadata**: Custom data stored in meta field\n- **Timestamps**: Created and updated dates",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- All variables are initially null\n- Variables are populated when used in campaigns\n- Use `{{variable_name}}` syntax in content\n- Variables are case-sensitive",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `category` - Template category for organization\n- `version` - Template version number\n- `tags` - Searchable tags for filtering",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- If template not found: 404 with \"Template not found\"\n- If invalid ID format: 400 with validation error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Basic Info**: ID, name, subject, HTML/text content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Variables**: All available template variables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Metadata**: Custom data stored in meta field",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Timestamps**: Created and updated dates",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- All variables are initially null",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are populated when used in campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use `{{variable_name}}` syntax in content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Variables are case-sensitive",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `category` - Template category for organization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `version` - Template version number",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `tags` - Searchable tags for filtering",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If template not found: 404 with \"Template not found\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid ID format: 400 with validation error",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates/template-123",
      "GET /api/admin/campaign/templates/template-123"
    ],
    "related_components": [],
    "tags": [
      "zod",
      "email-template-management",
      "security"
    ],
    "complexity_level": "simple",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "06-template-management-accurate_5",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Update template content",
    "description": "Update template content - Update template-123 subject to 'Updated Conference Invitation'",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"template-123\",\n  \"subject\": \"Updated Conference Invitation\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-123\",\n    \"name\": \"Conference Announcement Template\",\n    \"subject\": \"Updated Conference Invitation\",\n    \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference.</p><p>Best regards,<br>The Conference Team</p>\",\n    \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `name` (string) - Template name\n- `subject` (string) - Email subject line\n- `htmlBody` (string) - HTML email content\n- `textBody` (string or null) - Plain text version",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Only provided fields are updated\n- Other fields remain unchanged\n- `updatedAt` timestamp is automatically updated\n- Template ID cannot be changed",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- If `id` is missing: \"id is required\"\n- If template not found: 404 error\n- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Can be updated to a new string value\n- Can be set to null to remove text version\n- If not provided, remains unchanged",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `name` (string) - Template name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `subject` (string) - Email subject line",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `htmlBody` (string) - HTML email content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `textBody` (string or null) - Plain text version",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Only provided fields are updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Other fields remain unchanged",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `updatedAt` timestamp is automatically updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Template ID cannot be changed",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- If `id` is missing: \"id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If template not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be updated to a new string value",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Can be set to null to remove text version",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "- If not provided, remains unchanged",
        "type": "item",
        "category": "modification"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "PUT /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "resend",
      "email-template-management",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "06-template-management-accurate_7",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Update template content",
    "description": "Update template content - Update template-123 HTML body with new content",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"template-123\",\n  \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference happening on March 15-17, 2025.</p><p>Key highlights include:</p><ul><li>Keynote presentations from industry leaders</li><li>Hands-on workshops and sessions</li><li>Networking opportunities</li><li>Exhibition hall with latest technology</li></ul><p>Best regards,<br>The Conference Team</p>\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-123\",\n    \"name\": \"Conference Announcement Template\",\n    \"subject\": \"Join us at Tech Conference 2025\",\n    \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference happening on March 15-17, 2025.</p><p>Key highlights include:</p><ul><li>Keynote presentations from industry leaders</li><li>Hands-on workshops and sessions</li><li>Networking opportunities</li><li>Exhibition hall with latest technology</li></ul><p>Best regards,<br>The Conference Team</p>\",\n    \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference.\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- New content includes conference dates\n- Added bullet points for key highlights\n- Maintains `{{name}}` variable for personalization\n- Uses proper HTML structure with lists\n- Keeps existing signature section",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Use semantic HTML tags\n- Include proper heading hierarchy\n- Use lists for structured content\n- Maintain consistent formatting\n- Test across different email clients",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `{{name}}` - Recipient's full name\n- Other variables can be added as needed\n- Variables are case-sensitive\n- Use double curly braces: `{{variable_name}}`",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- If `id` is missing: \"id is required\"\n- If template not found: 404 error\n- If invalid HTML: No validation (client-side responsibility)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- New content includes conference dates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Added bullet points for key highlights",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Maintains `{{name}}` variable for personalization",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Uses proper HTML structure with lists",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keeps existing signature section",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use semantic HTML tags",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Include proper heading hierarchy",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use lists for structured content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Maintain consistent formatting",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Test across different email clients",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `{{name}}` - Recipient's full name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Other variables can be added as needed",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- Variables are case-sensitive",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use double curly braces: `{{variable_name}}`",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `id` is missing: \"id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If template not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid HTML: No validation (client-side responsibility)",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "PUT /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "zod",
      "email-template-management",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "06-template-management-accurate_9",
    "category": "Email Template Management",
    "subcategory": "Template Management",
    "title": "Update template content",
    "description": "Update template content - Update both HTML and text versions of template-123",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/templates",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "123. Here's the accurate API call:",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n```\nPUT /api/admin/campaign/templates\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"template-123\",\n  \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference happening on March 15-17, 2025.</p><p>Key highlights include:</p><ul><li>Keynote presentations from industry leaders</li><li>Hands-on workshops and sessions</li><li>Networking opportunities</li><li>Exhibition hall with latest technology</li></ul><p>Best regards,<br>The Conference Team</p>\",\n  \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference happening on March 15-17, 2025.\\n\\nKey highlights include:\\n- Keynote presentations from industry leaders\\n- Hands-on workshops and sessions\\n- Networking opportunities\\n- Exhibition hall with latest technology\\n\\nBest regards,\\nThe Conference Team\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"template\": {\n    \"id\": \"template-123\",\n    \"name\": \"Conference Announcement Template\",\n    \"subject\": \"Join us at Tech Conference 2025\",\n    \"htmlBody\": \"<h1>Welcome to Tech Conference 2025!</h1><p>Dear {{name}},</p><p>We're excited to invite you to our annual tech conference happening on March 15-17, 2025.</p><p>Key highlights include:</p><ul><li>Keynote presentations from industry leaders</li><li>Hands-on workshops and sessions</li><li>Networking opportunities</li><li>Exhibition hall with latest technology</li></ul><p>Best regards,<br>The Conference Team</p>\",\n    \"textBody\": \"Welcome to Tech Conference 2025!\\n\\nDear {{name}},\\n\\nWe're excited to invite you to our annual tech conference happening on March 15-17, 2025.\\n\\nKey highlights include:\\n- Keynote presentations from industry leaders\\n- Hands-on workshops and sessions\\n- Networking opportunities\\n- Exhibition hall with latest technology\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **HTML Version**: Uses proper HTML tags, lists, and formatting\n- **Text Version**: Uses plain text with line breaks and dashes\n- Both versions contain the same content\n- Both versions use `{{name}}` variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Same message in both versions\n- Same structure and flow\n- Same personalization variables\n- Same call-to-action",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Uses `\\n` for line breaks\n- Uses `-` for bullet points\n- Maintains proper spacing\n- Keeps content readable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Better deliverability\n- Accessibility compliance\n- Client compatibility\n- User preference support",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- If `id` is missing: \"id is required\"\n- If template not found: 404 error\n- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keynote presentations from industry leaders\\n- Hands-on workshops and sessions\\n- Networking opportunities\\n- Exhibition hall with latest technology\\n\\nBest regards,\\nThe Conference Team\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keynote presentations from industry leaders\\n- Hands-on workshops and sessions\\n- Networking opportunities\\n- Exhibition hall with latest technology\\n\\nBest regards,\\nThe Conference Team\",\n    \"meta\": {},\n    \"greeting_title\": null,\n    \"greeting_message\": null,\n    \"signature_name\": null,\n    \"signature_title\": null,\n    \"signature_company\": null,\n    \"signature_location\": null,\n    \"main_content_title\": null,\n    \"main_content_body\": null,\n    \"button_text\": null,\n    \"additional_info_title\": null,\n    \"additional_info_body\": null,\n    \"closing_title\": null,\n    \"closing_message\": null,\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **HTML Version**: Uses proper HTML tags, lists, and formatting",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Text Version**: Uses plain text with line breaks and dashes",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Both versions contain the same content",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Both versions use `{{name}}` variable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Same message in both versions",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Same structure and flow",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Same personalization variables",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Same call-to-action",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Uses `\\n` for line breaks",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Uses `-` for bullet points",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Maintains proper spacing",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keeps content readable",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Better deliverability",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Accessibility compliance",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Client compatibility",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- User preference support",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `id` is missing: \"id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If template not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Global Template System",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/templates",
      "PUT /api/admin/campaign/templates"
    ],
    "related_components": [],
    "tags": [
      "authentication",
      "email-template-management",
      "analytics",
      "typescript"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "01-campaign-creation-accurate_1",
    "category": "Campaign Management",
    "subcategory": "Campaign Creation",
    "title": "Create a new email campaign",
    "description": "Create a new email campaign - I want to create a campaign for our tech conference",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `name` (string) - Campaign name\n- `description` (string, optional) - Campaign description\n- `status` (CampaignStatus, optional) - DRAFT, SCHEDULED, SENDING, PAUSED, COMPLETED, CANCELLED\n- `steps` (array) - Campaign steps with templateId, groupId, sendAt",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Tech Conference Campaign\",\n  \"description\": \"Email campaign for tech conference attendees\",\n  \"status\": \"DRAFT\",\n  \"steps\": [\n    {\n      \"templateId\": \"welcome-template-id\",\n      \"groupId\": \"tech-professionals-group-id\",\n      \"sendAt\": \"2025-01-15T10:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-id\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `DRAFT` - Not yet ready to send\n- `SCHEDULED` - Scheduled for future send\n- `SENDING` - Currently being sent\n- `PAUSED` - Temporarily paused\n- `COMPLETED` - Finished sending\n- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `templateId` (string) - Email template ID\n- `groupId` (string) - Audience group ID\n- `sendAt` (ISO date string, optional) - When to send\n- `stepOrder` (number, optional) - Order of execution\n- `throttlePerMinute` (number, optional) - Email sending rate\n- `timeZone` (string, optional) - Timezone for scheduling",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `name` (string) - Campaign name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `description` (string, optional) - Campaign description",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `status` (CampaignStatus, optional) - DRAFT, SCHEDULED, SENDING, PAUSED, COMPLETED, CANCELLED",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `steps` (array) - Campaign steps with templateId, groupId, sendAt",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `DRAFT` - Not yet ready to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SCHEDULED` - Scheduled for future send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SENDING` - Currently being sent",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `PAUSED` - Temporarily paused",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `COMPLETED` - Finished sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `templateId` (string) - Email template ID",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `groupId` (string) - Audience group ID",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `sendAt` (ISO date string, optional) - When to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `stepOrder` (number, optional) - Order of execution",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute` (number, optional) - Email sending rate",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `timeZone` (string, optional) - Timezone for scheduling",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "POST /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid",
      "typescript"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "01-campaign-creation-accurate_3",
    "category": "Campaign Management",
    "subcategory": "Campaign Creation",
    "title": "Create a new email campaign",
    "description": "Create a new email campaign - Create a campaign for our summer event with multiple steps",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step Configuration:**\n- **Step 1**: Event announcement (sent 30 days before)\n- **Step 2**: Reminder (sent 15 days before)\n- **Step 3**: Final reminder (sent 1 day before)\n\n**Each Step Includes:**\n- `templateId` - Email template to use\n- `groupId` - Target audience group\n- `sendAt` - Specific send time\n- `stepOrder` - Execution order (1, 2, 3)\n- `throttlePerMinute` - Email sending rate\n- `timeZone` - Timezone for scheduling\n\n**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Summer Event Campaign\",\n  \"description\": \"Multi-step email sequence for summer event\",\n  \"status\": \"DRAFT\",\n  \"steps\": [\n    {\n      \"templateId\": \"event-announcement-template-id\",\n      \"groupId\": \"summer-event-group-id\",\n      \"sendAt\": \"2025-06-01T09:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    },\n    {\n      \"templateId\": \"reminder-template-id\",\n      \"groupId\": \"summer-event-group-id\",\n      \"sendAt\": \"2025-06-15T09:00:00Z\",\n      \"stepOrder\": 2,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    },\n    {\n      \"templateId\": \"final-reminder-template-id\",\n      \"groupId\": \"summer-event-group-id\",\n      \"sendAt\": \"2025-06-29T09:00:00Z\",\n      \"stepOrder\": 3,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **Step 1**: Event announcement (sent 30 days before)\n- **Step 2**: Reminder (sent 15 days before)\n- **Step 3**: Final reminder (sent 1 day before)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `templateId` - Email template to use\n- `groupId` - Target audience group\n- `sendAt` - Specific send time\n- `stepOrder` - Execution order (1, 2, 3)\n- `throttlePerMinute` - Email sending rate\n- `timeZone` - Timezone for scheduling",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"summer-event-campaign-id\",\n    \"name\": \"Summer Event Campaign\",\n    \"description\": \"Multi-step email sequence for summer event\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Step 1**: Event announcement (sent 30 days before)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 2**: Reminder (sent 15 days before)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 3**: Final reminder (sent 1 day before)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `templateId` - Email template to use",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `groupId` - Target audience group",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- `sendAt` - Specific send time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `stepOrder` - Execution order (1, 2, 3)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute` - Email sending rate",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `timeZone` - Timezone for scheduling",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "POST /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "01-campaign-creation-accurate_5",
    "category": "Campaign Management",
    "subcategory": "Campaign Creation",
    "title": "Create a new email campaign",
    "description": "Create a new email campaign - I need a campaign with smart sending windows",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Smart Window Features:**\n- `smartWindowStart` - Earliest send time\n- `smartWindowEnd` - Latest send time\n- `sendAt: null` - Let system choose optimal time within window\n- `throttlePerMinute: 30` - Slower sending for better deliverability\n\n**Smart Sending Logic:**\n- System analyzes recipient timezone and engagement patterns\n- Sends emails at optimal times within the window\n- Distributes sends evenly across the window\n- Avoids sending during non-business hours\n\n**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Smart Window Campaign\",\n  \"description\": \"Campaign with intelligent sending windows\",\n  \"status\": \"DRAFT\",\n  \"steps\": [\n    {\n      \"templateId\": \"smart-template-id\",\n      \"groupId\": \"smart-audience-group-id\",\n      \"sendAt\": null,\n      \"smartWindowStart\": \"2025-01-15T09:00:00Z\",\n      \"smartWindowEnd\": \"2025-01-15T17:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 30,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `smartWindowStart` - Earliest send time\n- `smartWindowEnd` - Latest send time\n- `sendAt: null` - Let system choose optimal time within window\n- `throttlePerMinute: 30` - Slower sending for better deliverability",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- System analyzes recipient timezone and engagement patterns\n- Sends emails at optimal times within the window\n- Distributes sends evenly across the window\n- Avoids sending during non-business hours",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"smart-window-campaign-id\",\n    \"name\": \"Smart Window Campaign\",\n    \"description\": \"Campaign with intelligent sending windows\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Better open rates\n- Improved deliverability\n- Reduced spam complaints\n- Optimal engagement timing",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `smartWindowStart` - Earliest send time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `smartWindowEnd` - Latest send time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `sendAt: null` - Let system choose optimal time within window",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `throttlePerMinute: 30` - Slower sending for better deliverability",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- System analyzes recipient timezone and engagement patterns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Sends emails at optimal times within the window",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Distributes sends evenly across the window",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Avoids sending during non-business hours",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Improved deliverability",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Reduced spam complaints",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Optimal engagement timing",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "POST /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid",
      "typescript"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "01-campaign-creation-accurate_7",
    "category": "Campaign Management",
    "subcategory": "Campaign Creation",
    "title": "Create a new email campaign",
    "description": "Create a new email campaign - Create a campaign with throttling for high volume",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Throttling Configuration:**\n- `throttlePerMinute: 100` - Send up to 100 emails per minute\n- `repeatIntervalMins: 60` - Repeat every 60 minutes if needed\n- `sendAt` - Start time for the campaign\n- `timeZone` - Timezone for scheduling\n\n**High-Volume Considerations:**\n- **Rate Limiting**: Prevents overwhelming email servers\n- **Deliverability**: Maintains good sender reputation\n- **Compliance**: Follows email service provider limits\n- **Monitoring**: Tracks sending progress and errors\n\n**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPOST /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"High Volume Campaign\",\n  \"description\": \"Large-scale campaign with throttling controls\",\n  \"status\": \"DRAFT\",\n  \"steps\": [\n    {\n      \"templateId\": \"high-volume-template-id\",\n      \"groupId\": \"large-audience-group-id\",\n      \"sendAt\": \"2025-01-15T08:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 100,\n      \"repeatIntervalMins\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `throttlePerMinute: 100` - Send up to 100 emails per minute\n- `repeatIntervalMins: 60` - Repeat every 60 minutes if needed\n- `sendAt` - Start time for the campaign\n- `timeZone` - Timezone for scheduling",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **Rate Limiting**: Prevents overwhelming email servers\n- **Deliverability**: Maintains good sender reputation\n- **Compliance**: Follows email service provider limits\n- **Monitoring**: Tracks sending progress and errors",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"high-volume-campaign-id\",\n    \"name\": \"High Volume Campaign\",\n    \"description\": \"Large-scale campaign with throttling controls\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T10:00:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- Start with lower rates (60/min) and increase gradually\n- Monitor bounce rates and adjust accordingly\n- Use smart windows to spread sends over time\n- Implement retry logic for failed sends",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `throttlePerMinute: 100` - Send up to 100 emails per minute",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `repeatIntervalMins: 60` - Repeat every 60 minutes if needed",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `sendAt` - Start time for the campaign",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `timeZone` - Timezone for scheduling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Rate Limiting**: Prevents overwhelming email servers",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Deliverability**: Maintains good sender reputation",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Compliance**: Follows email service provider limits",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Monitoring**: Tracks sending progress and errors",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Start with lower rates (60/min) and increase gradually",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Monitor bounce rates and adjust accordingly",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use smart windows to spread sends over time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Implement retry logic for failed sends",
        "type": "item",
        "category": "transmission"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "POST /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "typescript",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "01-campaign-creation-accurate_9",
    "category": "Campaign Management",
    "subcategory": "Campaign Creation",
    "title": "Create a new email campaign",
    "description": "Create a new email campaign - I want to create a campaign but I'm missing some information",
    "code_snippets": [
      {
        "language": "code",
        "code": "POST /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. **Campaign Name** - What should we call this campaign?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. **Email Template** - Do you have an existing template or need to create one?",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "3. **Audience Group** - Which audience group should receive this campaign?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. **Timing** - When should this campaign be sent?",
        "type": "step",
        "category": "general"
      },
      {
        "description": "1. **Check Available Templates**: `GET /api/admin/campaign/templates`",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "2. **Check Available Groups**: `GET /api/admin/campaign/groups`",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "3. **Create Template if Needed**: `POST /api/admin/campaign/templates`",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "4. **Create Audience Group if Needed**: `POST /api/admin/campaign/groups`",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n1. **Campaign Name** - What should we call this campaign?\n2. **Email Template** - Do you have an existing template or need to create one?\n3. **Audience Group** - Which audience group should receive this campaign?\n4. **Timing** - When should this campaign be sent?",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- **Description** - Any additional details about the campaign\n- **Status** - Should it start as DRAFT or SCHEDULED?\n- **Throttling** - How many emails per minute? (default: 60)\n- **Timezone** - What timezone for scheduling? (default: America/Vancouver)",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```\nPOST /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Your Campaign Name\",\n  \"steps\": [\n    {\n      \"templateId\": \"template-id-here\",\n      \"groupId\": \"audience-group-id-here\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n1. **Check Available Templates**: `GET /api/admin/campaign/templates`\n2. **Check Available Groups**: `GET /api/admin/campaign/groups`\n3. **Create Template if Needed**: `POST /api/admin/campaign/templates`\n4. **Create Audience Group if Needed**: `POST /api/admin/campaign/groups`",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n- If `name` is missing: \"Campaign name is required\"\n- If `templateId` is missing: \"Each step requires templateId and groupId\"\n- If `groupId` is missing: \"Each step requires templateId and groupId\"\n- If steps are invalid: \"Invalid steps payload\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- What should we call this campaign?\n2. **Email Template** - Do you have an existing template or need to create one?\n3. **Audience Group** - Which audience group should receive this campaign?\n4. **Timing** - When should this campaign be sent?",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Description** - Any additional details about the campaign",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Status** - Should it start as DRAFT or SCHEDULED?",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Throttling** - How many emails per minute? (default: 60)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Timezone** - What timezone for scheduling? (default: America/Vancouver)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `name` is missing: \"Campaign name is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `templateId` is missing: \"Each step requires templateId and groupId\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `groupId` is missing: \"Each step requires templateId and groupId\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If steps are invalid: \"Invalid steps payload\"",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "/api/admin/campaign/templates`",
      "/api/admin/campaign/groups`",
      "POST /api/admin/campaign/campaigns",
      "POST /api/admin/campaign/templates`",
      "POST /api/admin/campaign/groups`",
      "GET /api/admin/campaign/templates`",
      "GET /api/admin/campaign/groups`"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "08-email-sending-system-accurate_1",
    "category": "Email Sending System",
    "subcategory": "General",
    "title": "The email sending system",
    "description": "How does the email sending system work? - Explain the email sending process",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// Create campaign schedule\nconst schedule = await createSchedule({\n  name: \"AI Seminar Step 1\",\n  templateId: \"template-123\",\n  groupId: \"group-456\",\n  sendAt: \"2025-01-16T09:00:00Z\",\n  throttlePerMinute: 60,\n  timeZone: \"America/Vancouver\"\n});",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// In runSchedule function\nconst emailJobsToCreate = [];\nfor (const member of members) {\n  emailJobsToCreate.push({\n    campaignId: campaign.id,\n    recipientEmail: member.primaryEmail,\n    recipientId: member.businessId,\n    sendAt: calculatedSendTime,\n    status: 'scheduled',\n    meta: {\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      groupId: schedule.groupId,\n      businessId: member.businessId,\n      inviteToken: member.inviteToken\n    }\n  });\n}\n\n// Create email jobs in database\nawait prisma.emailJob.createMany({\n  data: emailJobsToCreate\n});",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// Find due email jobs\nconst due = await prisma.emailJob.findMany({\n  where: { \n    campaignId, \n    status: \"scheduled\", \n    sendAt: { lte: now } \n  },\n  orderBy: { sendAt: \"asc\" },\n  take: limit\n});\n\n// Lock jobs for processing\nconst locked = [];\nfor (const job of due) {\n  const update = await prisma.emailJob.updateMany({\n    where: { id: job.id, status: \"scheduled\" },\n    data: { \n      status: \"processing\", \n      processingStartedAt: now \n    }\n  });\n  if (update.count === 1) locked.push(job.id);\n}\n\n// Send emails\nfor (const id of locked) {\n  try {\n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"send_attempt\", meta: { via: \"cron\" } }\n    });\n    \n    const result = await sendCampaignEmail(id);\n    \n    await prisma.emailJob.update({\n      where: { id },\n      data: { \n        status: \"sent\", \n        sentAt: new Date(), \n        attempts: { increment: 1 }, \n        error: null \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"sent\", meta: { via: \"cron\" } }\n    });\n    \n  } catch (error) {\n    await prisma.emailJob.update({\n      where: { id },\n      data: { \n        status: \"scheduled\", \n        sendAt: new Date(Date.now() + 10 * 60 * 1000), // 10m backoff\n        attempts: { increment: 1 }, \n        error: String(error?.message ?? error) \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"failed\", meta: { via: \"cron\" } }\n    });\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get email job with related data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Get campaign and schedule info\n  const campaign = await prisma.campaign.findUnique({\n    where: { id: job.campaignId },\n    include: {\n      schedules: {\n        include: {\n          template: true,\n          group: {\n            include: {\n              members: {\n                where: { businessId: job.recipientId }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  const schedule = campaign.schedules.find(s => \n    s.group.members.some(m => m.businessId === job.recipientId)\n  );\n  \n  const member = schedule.group.members[0];\n  \n  // Prepare template context\n  const context = {\n    business_name: member.businessName || 'Valued Customer',\n    business_id: member.businessId,\n    invite_link: inviteLinkFromToken(member.inviteToken),\n    inviteToken: member.inviteToken\n  };\n  \n  // Process template content\n  const processedContent = schedule.template.htmlBody\n    .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n    .replace(/\\{\\{\\s*business_id\\s*\\}\\}/g, context.business_id)\n    .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  const text = generateEmailText({\n    greeting: 'Hello!',\n    body: schedule.template.textBody || processedContent.replace(/<[^>]*>/g, ''),\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link\n  });\n  \n  // Send email via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: schedule.template.subject.replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name),\n    html: html,\n    text: text\n  });\n  \n  if (emailResponse.error) {\n    throw new Error(`Resend error: ${emailResponse.error.message}`);\n  }\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date(),\n      meta: {\n        template: {\n          subject: schedule.template.subject,\n          html: html,\n          text: text,\n          content: processedContent\n        },\n        context\n      }\n    }\n  });\n  \n  // Update EmailJob\n  await prisma.emailJob.update({\n    where: { id: jobId },\n    data: {\n      status: 'sent',\n      sentAt: new Date(),\n      providerMessageId: emailResponse.data?.id,\n      attempts: { increment: 1 },\n      error: null\n    }\n  });\n  \n  // Send event to LeadMine\n  await postLeadMineEvent({\n    token: member.inviteToken,\n    businessId: member.businessId,\n    type: 'email_sent',\n    meta: {\n      campaignId: job.campaignId,\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      email: job.recipientEmail,\n      subject: schedule.template.subject,\n      messageId: emailResponse.data?.id,\n      sentAt: new Date().toISOString(),\n      inviteToken: member.inviteToken\n    }\n  });\n  \n  return {\n    success: true,\n    messageId: emailResponse.data?.id,\n    businessId: member.businessId,\n    businessName: member.businessName\n  };\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "javascript",
        "code": "// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';\n\n// Resend client\nconst resend = new Resend(resendKey);",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "const emailResponse = await resend.emails.send({\n  from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n  to: [job.recipientEmail],\n  subject: processedSubject,\n  html: finalHTML,\n  text: finalText\n});",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// Generate tracking link\nconst trackingLink = inviteLinkFromToken(inviteToken);\n// Link format: https://rsvp.evergreenwebsolutions.ca/?eid=biz_${token}",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "javascript",
        "code": "// Record email opens and RSVP clicks\nexport async function recordSendEngagement(params) {\n  const send = await prisma.campaignSend.findFirst({\n    where: { inviteToken: params.inviteToken },\n    orderBy: { sentAt: 'desc' }\n  });\n  \n  if (params.type === 'visit') {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { visitedAt: params.at ?? new Date() }\n    });\n  } else {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { rsvpAt: params.at ?? new Date() }\n    });\n  }\n}",
        "context": "Code snippet 8",
        "purpose": "API endpoint handler"
      },
      {
        "language": "code",
        "code": "**Step 2: Email Job Generation**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step 3: Email Processing**\n\n**API Endpoint:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Request Body:**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Processing Logic:**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. Email Generation & Sending**\n\n**sendCampaignEmail Function:**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. Resend API Integration**\n\n**Configuration:**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Email Sending:**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. Tracking & Analytics**\n\n**Tracking Pixel:**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Link Tracking:**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Engagement Tracking:**",
        "context": "Code snippet 10",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. Email Job System**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. Email Sending Process**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. Email Generation & Sending**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "4. Resend API Integration**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "5. Tracking & Analytics**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. Error Handling & Retry Logic**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "7. Throttling & Rate Limiting**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. Monitoring & Logging**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**1. Email Job System**",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- `EmailJob` - Individual email sending jobs\n- `EmailEvent` - Event tracking for each job\n- `CampaignSend` - Final send records\n- `CampaignSchedule` - Campaign scheduling\n- `CampaignTemplate` - Email templates\n- `AudienceGroup` - Target audiences",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n\n**Step 1: Schedule Creation**\n```javascript\n// Create campaign schedule\nconst schedule = await createSchedule({\n  name: \"AI Seminar Step 1\",\n  templateId: \"template-123\",\n  groupId: \"group-456\",\n  sendAt: \"2025-01-16T09:00:00Z\",\n  throttlePerMinute: 60,\n  timeZone: \"America/Vancouver\"\n});\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```javascript\n// In runSchedule function\nconst emailJobsToCreate = [];\nfor (const member of members) {\n  emailJobsToCreate.push({\n    campaignId: campaign.id,\n    recipientEmail: member.primaryEmail,\n    recipientId: member.businessId,\n    sendAt: calculatedSendTime,\n    status: 'scheduled',\n    meta: {\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      groupId: schedule.groupId,\n      businessId: member.businessId,\n      inviteToken: member.inviteToken\n    }\n  });\n}",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/cron\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"limit\": 50,\n  \"campaignId\": \"campaign-123\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```javascript\n// Find due email jobs\nconst due = await prisma.emailJob.findMany({\n  where: { \n    campaignId, \n    status: \"scheduled\", \n    sendAt: { lte: now } \n  },\n  orderBy: { sendAt: \"asc\" },\n  take: limit\n});",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "* 60 * 1000), // 10m backoff\n        attempts: { increment: 1 }, \n        error: String(error?.message ?? error) \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"failed\", meta: { via: \"cron\" } }\n    });\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**sendCampaignEmail Function:**\n```javascript\n// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get email job with related data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Get campaign and schedule info\n  const campaign = await prisma.campaign.findUnique({\n    where: { id: job.campaignId },\n    include: {\n      schedules: {\n        include: {\n          template: true,\n          group: {\n            include: {\n              members: {\n                where: { businessId: job.recipientId }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  const schedule = campaign.schedules.find(s => \n    s.group.members.some(m => m.businessId === job.recipientId)\n  );\n  \n  const member = schedule.group.members[0];\n  \n  // Prepare template context\n  const context = {\n    business_name: member.businessName || 'Valued Customer',\n    business_id: member.businessId,\n    invite_link: inviteLinkFromToken(member.inviteToken),\n    inviteToken: member.inviteToken\n  };\n  \n  // Process template content\n  const processedContent = schedule.template.htmlBody\n    .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n    .replace(/\\{\\{\\s*business_id\\s*\\}\\}/g, context.business_id)\n    .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  const text = generateEmailText({\n    greeting: 'Hello!',\n    body: schedule.template.textBody || processedContent.replace(/<[^>]*>/g, ''),\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link\n  });\n  \n  // Send email via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: schedule.template.subject.replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name),\n    html: html,\n    text: text\n  });\n  \n  if (emailResponse.error) {\n    throw new Error(`Resend error: ${emailResponse.error.message}`);\n  }\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date(),\n      meta: {\n        template: {\n          subject: schedule.template.subject,\n          html: html,\n          text: text,\n          content: processedContent\n        },\n        context\n      }\n    }\n  });\n  \n  // Update EmailJob\n  await prisma.emailJob.update({\n    where: { id: jobId },\n    data: {\n      status: 'sent',\n      sentAt: new Date(),\n      providerMessageId: emailResponse.data?.id,\n      attempts: { increment: 1 },\n      error: null\n    }\n  });\n  \n  // Send event to LeadMine\n  await postLeadMineEvent({\n    token: member.inviteToken,\n    businessId: member.businessId,\n    type: 'email_sent',\n    meta: {\n      campaignId: job.campaignId,\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      email: job.recipientEmail,\n      subject: schedule.template.subject,\n      messageId: emailResponse.data?.id,\n      sentAt: new Date().toISOString(),\n      inviteToken: member.inviteToken\n    }\n  });\n  \n  return {\n    success: true,\n    messageId: emailResponse.data?.id,\n    businessId: member.businessId,\n    businessName: member.businessName\n  };\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n\n**Configuration:**\n```javascript\n// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```javascript\nconst emailResponse = await resend.emails.send({\n  from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n  to: [job.recipientEmail],\n  subject: processedSubject,\n  html: finalHTML,\n  text: finalText\n});\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Tracking Pixel:**\n```html\n<img src=\"/api/__pixel?token=${inviteToken}&eid=biz_${inviteToken}\" width=\"1\" height=\"1\" style=\"display:none;\" />\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```javascript\n// Generate tracking link\nconst trackingLink = inviteLinkFromToken(inviteToken);\n// Link format: https://rsvp.evergreenwebsolutions.ca/?eid=biz_${token}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```javascript\n// Record email opens and RSVP clicks\nexport async function recordSendEngagement(params) {\n  const send = await prisma.campaignSend.findFirst({\n    where: { inviteToken: params.inviteToken },\n    orderBy: { sentAt: 'desc' }\n  });\n  \n  if (params.type === 'visit') {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { visitedAt: params.at ?? new Date() }\n    });\n  } else {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { rsvpAt: params.at ?? new Date() }\n    });\n  }\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n\n**Retry Strategy:**\n- Failed emails are retried after 10 minutes\n- Maximum retry attempts tracked\n- Error messages stored for debugging\n- Dead letter queue for permanently failed emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- **Resend API Errors**: Invalid API key, rate limits, invalid recipients\n- **Template Errors**: Missing variables, invalid HTML\n- **Database Errors**: Connection issues, constraint violations\n- **Network Errors**: Timeout, connection refused",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Throttling Configuration:**\n- `throttlePerMinute`: Maximum emails per minute\n- `repeatIntervalMins`: Repeat interval for recurring campaigns\n- Smart window scheduling for optimal delivery",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Respects Resend API limits\n- Implements exponential backoff\n- Monitors delivery rates\n- Adjusts sending speed based on success rates",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Email Events:**\n- `send_attempt`: Email sending started\n- `sent`: Email successfully sent\n- `failed`: Email sending failed\n- `bounced`: Email bounced back\n- `opened`: Email was opened\n- `clicked`: Link was clicked",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- Delivery rates\n- Open rates\n- Click rates\n- Bounce rates\n- Error rates\n- Processing times",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `EmailJob` - Individual email sending jobs",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `EmailEvent` - Event tracking for each job",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `CampaignSend` - Final send records",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `CampaignSchedule` - Campaign scheduling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `CampaignTemplate` - Email templates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `AudienceGroup` - Target audiences",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "- Failed emails are retried after 10 minutes",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Maximum retry attempts tracked",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Error messages stored for debugging",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Dead letter queue for permanently failed emails",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Resend API Errors**: Invalid API key, rate limits, invalid recipients",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **Template Errors**: Missing variables, invalid HTML",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Database Errors**: Connection issues, constraint violations",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Network Errors**: Timeout, connection refused",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute`: Maximum emails per minute",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `repeatIntervalMins`: Repeat interval for recurring campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Smart window scheduling for optimal delivery",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Respects Resend API limits",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Implements exponential backoff",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Monitors delivery rates",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Adjusts sending speed based on success rates",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `send_attempt`: Email sending started",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `sent`: Email successfully sent",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `failed`: Email sending failed",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `bounced`: Email bounced back",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `opened`: Email was opened",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `clicked`: Link was clicked",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "SendGrid API",
      "Resend API",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "null \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"sent\", meta: { via: \"cron\" } }\n    });\n    \n  } catch (error) {\n    await prisma.emailJob.update({\n      where: { id },\n      data: { \n        status: \"scheduled\", \n        sendAt: new Date(Date.now() + 10 * 60 * 1000), // 10m backoff\n        attempts: { increment: 1 }, \n        error: String(error?.message ?? error) \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"failed\", meta: { via: \"cron\" } }\n    });\n  }\n}\n```",
      "${emailResponse.error.message}`);\n  }\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date(),\n      meta: {\n        template: {\n          subject: schedule.template.subject,\n          html: html,\n          text: text,\n          content: processedContent\n        },\n        context\n      }\n    }\n  });\n  \n  // Update EmailJob\n  await prisma.emailJob.update({\n    where: { id: jobId },\n    data: {\n      status: 'sent',\n      sentAt: new Date(),\n      providerMessageId: emailResponse.data?.id,\n      attempts: { increment: 1 },\n      error: null\n    }\n  });\n  \n  // Send event to LeadMine\n  await postLeadMineEvent({\n    token: member.inviteToken,\n    businessId: member.businessId,\n    type: 'email_sent',\n    meta: {\n      campaignId: job.campaignId,\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      email: job.recipientEmail,\n      subject: schedule.template.subject,\n      messageId: emailResponse.data?.id,\n      sentAt: new Date().toISOString(),\n      inviteToken: member.inviteToken\n    }\n  });\n  \n  return {\n    success: true,\n    messageId: emailResponse.data?.id,\n    businessId: member.businessId,\n    businessName: member.businessName\n  };\n}\n```"
    ],
    "related_apis": [
      "/api/admin/campaign/cron",
      "/api/__pixel?token=${inviteToken}&eid=biz_${inviteToken}\"",
      "POST /api/admin/campaign/cron"
    ],
    "related_components": [
      "sender.ts"
    ],
    "tags": [
      "prisma",
      "email-sending-system",
      "analytics",
      "typescript",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "08-email-sending-system-accurate_3",
    "category": "Email Sending System",
    "subcategory": "General",
    "title": "How do i send a test email",
    "description": "How do I send a test email? - Send a test email to verify the system",
    "code_snippets": [
      {
        "language": "javascript",
        "code": "// Test email sending functionality\nasync function testEmailSending() {\n  try {\n    // Send test email\n    const response = await fetch('/api/admin/campaign/send', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        templateId: 'test-template-id',\n        groupId: 'test-group-id',\n        name: 'Automated Test',\n        previewOnly: false,\n        limit: 1\n      })\n    });\n    \n    const result = await response.json();\n    \n    if (result.result.sent > 0) {\n      console.log('✅ Test email sent successfully');\n      console.log('Message ID:', result.result.results[0].messageId);\n    } else {\n      console.log('❌ Test email failed to send');\n      console.log('Error:', result.result.results[0].error);\n    }\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "POST /api/admin/campaign/send",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**2. PREVIEW MODE (NO ACTUAL SENDING)**\n\n**Request Body:**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. CAMPAIGN STEP TESTING**\n\n**API Endpoint:**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Request Body:**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. CRON JOB TESTING**\n\n**API Endpoint:**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Request Body:**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 10",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. TEST EMAIL SETUP**\n\n**Step 1: Create Test Template**",
        "context": "Code snippet 11",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step 2: Create Test Audience Group**",
        "context": "Code snippet 12",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step 3: Add Test Member**",
        "context": "Code snippet 13",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. EMAIL VERIFICATION CHECKLIST**\n\n**Before Sending:**\n- [ ] Resend API key is configured\n- [ ] From email address is verified\n- [ ] Template has valid HTML and text versions\n- [ ] Audience group has at least one member\n- [ ] Test email address is valid\n- [ ] Global template is accessible\n\n**After Sending:**\n- [ ] Check email delivery in Resend dashboard\n- [ ] Verify email content and formatting\n- [ ] Test tracking links work correctly\n- [ ] Check database records are created\n- [ ] Verify tracking pixel loads\n- [ ] Test unsubscribe link functionality\n\n**7. TROUBLESHOOTING COMMON ISSUES**\n\n**Email Not Delivered:**\n- Check Resend API key configuration\n- Verify from email address is authorized\n- Check recipient email address validity\n- Review Resend dashboard for delivery status\n- Check spam/junk folders\n\n**Template Rendering Issues:**\n- Verify template variables are properly formatted\n- Check global template is accessible\n- Test variable replacement with sample data\n- Validate HTML structure\n- Check CSS compatibility\n\n**Database Issues:**\n- Verify database connection\n- Check table permissions\n- Review error logs\n- Validate data types and constraints\n- Check foreign key relationships\n\n**8. TEST EMAIL MONITORING**\n\n**Check EmailJob Status:**",
        "context": "Code snippet 14",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Check EmailEvent Logs:**",
        "context": "Code snippet 15",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Check CampaignSend Records:**",
        "context": "Code snippet 16",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. AUTOMATED TESTING**\n\n**Test Script Example:**",
        "context": "Code snippet 17",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. MANUAL EMAIL SENDING**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "2. PREVIEW MODE (NO ACTUAL SENDING)**",
        "type": "step",
        "category": "transmission"
      },
      {
        "description": "3. CAMPAIGN STEP TESTING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. CRON JOB TESTING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. TEST EMAIL SETUP**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. EMAIL VERIFICATION CHECKLIST**",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "7. TROUBLESHOOTING COMMON ISSUES**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. TEST EMAIL MONITORING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "9. AUTOMATED TESTING**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "10. PRODUCTION READINESS**",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/send\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"templateId\": \"template-123\",\n  \"groupId\": \"group-456\",\n  \"name\": \"Test Email\",\n  \"throttlePerMinute\": 60,\n  \"timeZone\": \"America/Vancouver\",\n  \"previewOnly\": false,\n  \"limit\": 1\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"result\": {\n    \"scheduleId\": \"temp-schedule-789\",\n    \"processed\": 1,\n    \"sent\": 1,\n    \"previewOnly\": false,\n    \"results\": [\n      {\n        \"businessId\": \"business-123\",\n        \"email\": \"test@example.com\",\n        \"status\": \"sent\",\n        \"messageId\": \"resend-message-id-456\"\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Request Body:**\n```json\n{\n  \"templateId\": \"template-123\",\n  \"groupId\": \"group-456\",\n  \"name\": \"Test Preview\",\n  \"previewOnly\": true,\n  \"limit\": 1\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"result\": {\n    \"scheduleId\": \"temp-schedule-789\",\n    \"processed\": 1,\n    \"sent\": 0,\n    \"previewOnly\": true,\n    \"results\": [\n      {\n        \"businessId\": \"business-123\",\n        \"email\": \"test@example.com\",\n        \"status\": \"preview\",\n        \"html\": \"<!DOCTYPE html>...\",\n        \"text\": \"Hello!\\n\\nThis is a test email...\",\n        \"subject\": \"Test Email Subject\"\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/[id]/send-next-batch\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"limit\": 1\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"processed\": 1,\n  \"sent\": 1,\n  \"failed\": 0,\n  \"paused\": false\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/cron\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"limit\": 1,\n  \"campaignId\": \"campaign-123\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"processed\": 1,\n  \"sent\": 1,\n  \"failed\": 0\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Step 1: Create Test Template**\n```json\n{\n  \"name\": \"Test Template\",\n  \"subject\": \"Test Email - {{business_name}}\",\n  \"htmlBody\": \"<h1>Test Email</h1><p>Hello {{business_name}},</p><p>This is a test email to verify the system is working.</p><p>Business ID: {{business_id}}</p><p>Invite Link: {{invite_link}}</p>\",\n  \"textBody\": \"Test Email\\n\\nHello {{business_name}},\\n\\nThis is a test email to verify the system is working.\\n\\nBusiness ID: {{business_id}}\\nInvite Link: {{invite_link}}\"\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```json\n{\n  \"name\": \"Test Group\",\n  \"description\": \"Test audience for email verification\",\n  \"color\": \"#10b981\",\n  \"criteria\": \"test\",\n  \"meta\": {\n    \"test\": true,\n    \"created_for\": \"email_verification\"\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```json\n{\n  \"businessId\": \"test-business-123\",\n  \"businessName\": \"Test Business\",\n  \"primaryEmail\": \"your-test-email@example.com\",\n  \"secondaryEmail\": null,\n  \"tags\": [\"test\"],\n  \"meta\": {\n    \"test\": true,\n    \"inviteToken\": \"test-token-123\"\n  }\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n\n**Before Sending:**\n- [ ] Resend API key is configured\n- [ ] From email address is verified\n- [ ] Template has valid HTML and text versions\n- [ ] Audience group has at least one member\n- [ ] Test email address is valid\n- [ ] Global template is accessible",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- [ ] Check email delivery in Resend dashboard\n- [ ] Verify email content and formatting\n- [ ] Test tracking links work correctly\n- [ ] Check database records are created\n- [ ] Verify tracking pixel loads\n- [ ] Test unsubscribe link functionality",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Email Not Delivered:**\n- Check Resend API key configuration\n- Verify from email address is authorized\n- Check recipient email address validity\n- Review Resend dashboard for delivery status\n- Check spam/junk folders",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n- Verify template variables are properly formatted\n- Check global template is accessible\n- Test variable replacement with sample data\n- Validate HTML structure\n- Check CSS compatibility",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n- Verify database connection\n- Check table permissions\n- Review error logs\n- Validate data types and constraints\n- Check foreign key relationships",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n\n**Check EmailJob Status:**\n```sql\nSELECT id, status, attempts, error, sentAt, createdAt \nFROM EmailJob \nWHERE recipientEmail = 'test@example.com' \nORDER BY createdAt DESC \nLIMIT 5;\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```sql\nSELECT e.type, e.meta, e.createdAt \nFROM EmailEvent e \nJOIN EmailJob j ON e.jobId = j.id \nWHERE j.recipientEmail = 'test@example.com' \nORDER BY e.createdAt DESC;\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```sql\nSELECT id, status, sentAt, resendMessageId, meta \nFROM CampaignSend \nWHERE email = 'test@example.com' \nORDER BY sentAt DESC \nLIMIT 5;\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n\n**Test Script Example:**\n```javascript\n// Test email sending functionality\nasync function testEmailSending() {\n  try {\n    // Send test email\n    const response = await fetch('/api/admin/campaign/send', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        templateId: 'test-template-id',\n        groupId: 'test-group-id',\n        name: 'Automated Test',\n        previewOnly: false,\n        limit: 1\n      })\n    });\n    \n    const result = await response.json();\n    \n    if (result.result.sent > 0) {\n      console.log('✅ Test email sent successfully');\n      console.log('Message ID:', result.result.results[0].messageId);\n    } else {\n      console.log('❌ Test email failed to send');\n      console.log('Error:', result.result.results[0].error);\n    }\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n\n**Before Going Live:**\n- [ ] Test with real email addresses\n- [ ] Verify deliverability rates\n- [ ] Test unsubscribe functionality\n- [ ] Check tracking and analytics\n- [ ] Validate error handling\n- [ ] Test rate limiting and throttling\n- [ ] Verify compliance with email regulations\n- [ ] Test with different email clients\n- [ ] Check mobile responsiveness\n- [ ] Validate accessibility features",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- {{business_name}}\",\n  \"htmlBody\": \"<h1>Test Email</h1><p>Hello {{business_name}},</p><p>This is a test email to verify the system is working.</p><p>Business ID: {{business_id}}</p><p>Invite Link: {{invite_link}}</p>\",\n  \"textBody\": \"Test Email\\n\\nHello {{business_name}},\\n\\nThis is a test email to verify the system is working.\\n\\nBusiness ID: {{business_id}}\\nInvite Link: {{invite_link}}\"\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Resend API key is configured",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- [ ] From email address is verified",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- [ ] Template has valid HTML and text versions",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Audience group has at least one member",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Test email address is valid",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- [ ] Global template is accessible",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Check email delivery in Resend dashboard",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Verify email content and formatting",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test tracking links work correctly",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Check database records are created",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Verify tracking pixel loads",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test unsubscribe link functionality",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Check Resend API key configuration",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Verify from email address is authorized",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Check recipient email address validity",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Review Resend dashboard for delivery status",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Check spam/junk folders",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Verify template variables are properly formatted",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Check global template is accessible",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Test variable replacement with sample data",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Validate HTML structure",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Check CSS compatibility",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Verify database connection",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Check table permissions",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Validate data types and constraints",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Check foreign key relationships",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test with real email addresses",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- [ ] Verify deliverability rates",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test unsubscribe functionality",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Check tracking and analytics",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Validate error handling",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test rate limiting and throttling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Verify compliance with email regulations",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Test with different email clients",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- [ ] Check mobile responsiveness",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- [ ] Validate accessibility features",
        "type": "item",
        "category": "validation"
      }
    ],
    "interconnections": [
      "SendGrid API",
      "Resend API",
      "Campaign Management"
    ],
    "usage_examples": [
      "**\n```javascript\n// Test email sending functionality"
    ],
    "troubleshooting": [
      "', result.result.results[0].error);\n    }\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n```"
    ],
    "related_apis": [
      "/api/admin/campaign/send",
      "/api/admin/campaign/[id]/send-next-batch",
      "/api/admin/campaign/cron",
      "/api/admin/campaign/send',",
      "POST /api/admin/campaign/send",
      "POST /api/admin/campaign/[id]/send-next-batch",
      "POST /api/admin/campaign/cron"
    ],
    "related_components": [
      "response.js"
    ],
    "tags": [
      "prisma",
      "email-sending-system",
      "analytics",
      "typescript",
      "authentication",
      "tailwind",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "10-rsvp-data-management-accurate_1",
    "category": "RSVP Data Management",
    "subcategory": "General",
    "title": "The rsvp form processing",
    "description": "How does the RSVP form processing work? - Explain the multi-step RSVP form system",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Core RSVP form schema with validation\nexport const coreRsvpFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  email: z.string().email('Valid email is required'),\n  phone: z.string().optional(),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE']),\n  attendeeCount: z.number().min(1).max(10),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER']),\n  dietaryOther: z.string().optional(),\n  accessibilityNeeds: z.string().optional(),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER']),\n  referralOther: z.string().optional(),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: z.string().optional()\n});",
        "context": "Code snippet 1",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Progressive validation for each step\nconst validateStep = async (idx: number) => {\n  if (idx === 0) {\n    // Contact validation\n    return form.trigger(['firstName', 'lastName', 'email', 'phone']);\n  }\n  if (idx === 1) {\n    // Attendance validation\n    const keys = ['attendanceStatus'];\n    if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n    return form.trigger(keys);\n  }\n  if (idx === 2) {\n    // Dietary validation\n    const keys = ['dietaryPreference', 'accessibilityNeeds'];\n    if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n    return form.trigger(keys);\n  }\n  if (idx === 3) {\n    // Referral validation\n    const keys = ['referralSource'];\n    if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n    return form.trigger(keys);\n  }\n  if (idx === 4) {\n    // Additional options validation\n    return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal']);\n  }\n  return true;\n};",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Complete form submission with analytics\nexport async function POST(req: Request) {\n  try {\n    // Security checks\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Rate limiting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse({ message: 'Rate limit exceeded' }, 429);\n    }\n    \n    // Parse and validate form data\n    const body = await req.json();\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data\n        visitorId: cookies().get('vid')?.value,\n        sessionId: cookies().get('sid')?.value,\n        referrer: headers().get('referer'),\n        eid: cookies().get('eid')?.value,\n        utmSource: cookies().get('utm_source')?.value,\n        utmMedium: cookies().get('utm_medium')?.value,\n        utmCampaign: cookies().get('utm_campaign')?.value,\n        utmTerm: cookies().get('utm_term')?.value,\n        utmContent: cookies().get('utm_content')?.value,\n        userAgent: headers().get('user-agent'),\n        language: headers().get('accept-language'),\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        country: headers().get('x-vercel-ip-country'),\n        region: headers().get('x-vercel-ip-country-region'),\n        city: headers().get('x-vercel-ip-city'),\n        ipHash: crypto.createHash('sha256').update(clientIP).digest('hex')\n      }\n    });\n    \n    // Send confirmation email\n    const emailResult = await sendRSVPConfirmation({\n      to: validatedData.email,\n      name: `${validatedData.firstName} ${validatedData.lastName}`,\n      rsvpId: rsvp.id\n    });\n    \n    // Post to LeadMine\n    await postLeadMineEvent({\n      token: 'rsvp-submission',\n      businessId: rsvp.id,\n      type: 'rsvp_submitted',\n      meta: {\n        rsvpId: rsvp.id,\n        email: validatedData.email,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        submittedAt: new Date().toISOString()\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    console.error('RSVP submission error:', error);\n    return NextResponse.json({ \n      error: 'Failed to submit RSVP'\n    }, { status: 500 });\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Phone field with formatting\nexport function PhoneField({ value, onChange, onBlur, id = \"phone\" }) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}",
        "context": "Code snippet 4",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Comprehensive error handling\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Analytics data collection\nconst collectAnalyticsData = (req: Request) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex')\n  };\n};",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**3. STEP-BY-STEP VALIDATION**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. FORM SUBMISSION PROCESS**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. DATABASE SCHEMA**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. FORM COMPONENTS**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. ERROR HANDLING**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. ANALYTICS INTEGRATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. FORM STRUCTURE**\nThe RSVP form is a 5-step process:\n- **Step 1**: Contact Information (firstName, lastName, email, phone)\n- **Step 2**: Attendance Status (attendanceStatus, attendeeCount if YES)\n- **Step 3**: Dietary & Accessibility (dietaryPreference, dietaryOther, accessibilityNeeds)\n- **Step 4**: Referral Source (referralSource, referralOther)\n- **Step 5**: Additional Options (wantsResources, wantsAudit, learningGoal)",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. VALIDATION SCHEMA**\n```typescript\n// Core RSVP form schema with validation\nexport const coreRsvpFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  email: z.string().email('Valid email is required'),\n  phone: z.string().optional(),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE']),\n  attendeeCount: z.number().min(1).max(10),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER']),\n  dietaryOther: z.string().optional(),\n  accessibilityNeeds: z.string().optional(),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER']),\n  referralOther: z.string().optional(),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: z.string().optional()\n});\n```",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "3. STEP-BY-STEP VALIDATION**\n```typescript\n// Progressive validation for each step\nconst validateStep = async (idx: number) => {\n  if (idx === 0) {\n    // Contact validation\n    return form.trigger(['firstName', 'lastName', 'email', 'phone']);\n  }\n  if (idx === 1) {\n    // Attendance validation\n    const keys = ['attendanceStatus'];\n    if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n    return form.trigger(keys);\n  }\n  if (idx === 2) {\n    // Dietary validation\n    const keys = ['dietaryPreference', 'accessibilityNeeds'];\n    if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n    return form.trigger(keys);\n  }\n  if (idx === 3) {\n    // Referral validation\n    const keys = ['referralSource'];\n    if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n    return form.trigger(keys);\n  }\n  if (idx === 4) {\n    // Additional options validation\n    return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal']);\n  }\n  return true;\n};\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "4. FORM SUBMISSION PROCESS**\n```typescript\n// Complete form submission with analytics\nexport async function POST(req: Request) {\n  try {\n    // Security checks\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Rate limiting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse({ message: 'Rate limit exceeded' }, 429);\n    }\n    \n    // Parse and validate form data\n    const body = await req.json();\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data\n        visitorId: cookies().get('vid')?.value,\n        sessionId: cookies().get('sid')?.value,\n        referrer: headers().get('referer'),\n        eid: cookies().get('eid')?.value,\n        utmSource: cookies().get('utm_source')?.value,\n        utmMedium: cookies().get('utm_medium')?.value,\n        utmCampaign: cookies().get('utm_campaign')?.value,\n        utmTerm: cookies().get('utm_term')?.value,\n        utmContent: cookies().get('utm_content')?.value,\n        userAgent: headers().get('user-agent'),\n        language: headers().get('accept-language'),\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        country: headers().get('x-vercel-ip-country'),\n        region: headers().get('x-vercel-ip-country-region'),\n        city: headers().get('x-vercel-ip-city'),\n        ipHash: crypto.createHash('sha256').update(clientIP).digest('hex')\n      }\n    });\n    \n    // Send confirmation email\n    const emailResult = await sendRSVPConfirmation({\n      to: validatedData.email,\n      name: `${validatedData.firstName} ${validatedData.lastName}`,\n      rsvpId: rsvp.id\n    });\n    \n    // Post to LeadMine\n    await postLeadMineEvent({\n      token: 'rsvp-submission',\n      businessId: rsvp.id,\n      type: 'rsvp_submitted',\n      meta: {\n        rsvpId: rsvp.id,\n        email: validatedData.email,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        submittedAt: new Date().toISOString()\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    console.error('RSVP submission error:', error);\n    return NextResponse.json({ \n      error: 'Failed to submit RSVP'\n    }, { status: 500 });\n  }\n}\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "5. DATABASE SCHEMA**\n```sql\n-- RSVP table with comprehensive analytics\nCREATE TABLE \"RSVP\" (\n  \"id\" TEXT PRIMARY KEY,\n  \"fullName\" TEXT NOT NULL,\n  \"organization\" TEXT,\n  \"email\" TEXT UNIQUE NOT NULL,\n  \"phone\" TEXT,\n  \"attendanceStatus\" TEXT NOT NULL,\n  \"attendeeCount\" INTEGER NOT NULL,\n  \"dietaryPreference\" TEXT NOT NULL,\n  \"dietaryOther\" TEXT,\n  \"accessibilityNeeds\" TEXT,\n  \"referralSource\" TEXT NOT NULL,\n  \"referralOther\" TEXT,\n  \"wantsResources\" BOOLEAN DEFAULT false,\n  \"wantsAudit\" BOOLEAN DEFAULT false,\n  \"learningGoal\" TEXT,\n  \"createdAt\" TIMESTAMP DEFAULT NOW(),\n  -- Analytics fields\n  \"visitorId\" TEXT,\n  \"sessionId\" TEXT,\n  \"referrer\" TEXT,\n  \"eid\" TEXT,\n  \"utmSource\" TEXT,\n  \"utmMedium\" TEXT,\n  \"utmCampaign\" TEXT,\n  \"utmTerm\" TEXT,\n  \"utmContent\" TEXT,\n  \"userAgent\" TEXT,\n  \"language\" TEXT,\n  \"tz\" TEXT,\n  \"country\" TEXT,\n  \"region\" TEXT,\n  \"city\" TEXT,\n  \"ipHash\" TEXT,\n  \"screenW\" INTEGER,\n  \"screenH\" INTEGER,\n  \"dpr\" DOUBLE PRECISION,\n  \"platform\" TEXT,\n  \"device\" TEXT,\n  \"browser\" TEXT,\n  \"meta\" TEXT\n);\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "6. FORM COMPONENTS**\n```typescript\n// Phone field with formatting\nexport function PhoneField({ value, onChange, onBlur, id = \"phone\" }) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "7. ERROR HANDLING**\n```typescript\n// Comprehensive error handling\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. ANALYTICS INTEGRATION**\n```typescript\n// Analytics data collection\nconst collectAnalyticsData = (req: Request) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex')\n  };\n};\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. FORM STRUCTURE**\nThe RSVP form is a 5-step process:\n- **Step 1**: Contact Information (firstName, lastName, email, phone)\n- **Step 2**: Attendance Status (attendanceStatus, attendeeCount if YES)\n- **Step 3**: Dietary & Accessibility (dietaryPreference, dietaryOther, accessibilityNeeds)\n- **Step 4**: Referral Source (referralSource, referralOther)\n- **Step 5**: Additional Options (wantsResources, wantsAudit, learningGoal)",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Core RSVP form schema with validation\nexport const coreRsvpFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  email: z.string().email('Valid email is required'),\n  phone: z.string().optional(),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE']),\n  attendeeCount: z.number().min(1).max(10),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER']),\n  dietaryOther: z.string().optional(),\n  accessibilityNeeds: z.string().optional(),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER']),\n  referralOther: z.string().optional(),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: z.string().optional()\n});\n```",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Progressive validation for each step\nconst validateStep = async (idx: number) => {\n  if (idx === 0) {\n    // Contact validation\n    return form.trigger(['firstName', 'lastName', 'email', 'phone']);\n  }\n  if (idx === 1) {\n    // Attendance validation\n    const keys = ['attendanceStatus'];\n    if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n    return form.trigger(keys);\n  }\n  if (idx === 2) {\n    // Dietary validation\n    const keys = ['dietaryPreference', 'accessibilityNeeds'];\n    if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n    return form.trigger(keys);\n  }\n  if (idx === 3) {\n    // Referral validation\n    const keys = ['referralSource'];\n    if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n    return form.trigger(keys);\n  }\n  if (idx === 4) {\n    // Additional options validation\n    return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal']);\n  }\n  return true;\n};\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Complete form submission with analytics\nexport async function POST(req: Request) {\n  try {\n    // Security checks\n    const clientIP = headers().get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    // CSRF Protection\n    const origin = headers().get('origin');\n    const referer = headers().get('referer');\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://rsvp.evergreenwebsolutions.ca'\n    ];\n    \n    // Rate limiting\n    const rateLimitCheck = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimitCheck.allowed) {\n      logRateLimitViolation(clientIP, '/api/rsvp');\n      return createSecureResponse({ message: 'Rate limit exceeded' }, 429);\n    }\n    \n    // Parse and validate form data\n    const body = await req.json();\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data\n        visitorId: cookies().get('vid')?.value,\n        sessionId: cookies().get('sid')?.value,\n        referrer: headers().get('referer'),\n        eid: cookies().get('eid')?.value,\n        utmSource: cookies().get('utm_source')?.value,\n        utmMedium: cookies().get('utm_medium')?.value,\n        utmCampaign: cookies().get('utm_campaign')?.value,\n        utmTerm: cookies().get('utm_term')?.value,\n        utmContent: cookies().get('utm_content')?.value,\n        userAgent: headers().get('user-agent'),\n        language: headers().get('accept-language'),\n        tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        country: headers().get('x-vercel-ip-country'),\n        region: headers().get('x-vercel-ip-country-region'),\n        city: headers().get('x-vercel-ip-city'),\n        ipHash: crypto.createHash('sha256').update(clientIP).digest('hex')\n      }\n    });\n    \n    // Send confirmation email\n    const emailResult = await sendRSVPConfirmation({\n      to: validatedData.email,\n      name: `${validatedData.firstName} ${validatedData.lastName}`,\n      rsvpId: rsvp.id\n    });\n    \n    // Post to LeadMine\n    await postLeadMineEvent({\n      token: 'rsvp-submission',\n      businessId: rsvp.id,\n      type: 'rsvp_submitted',\n      meta: {\n        rsvpId: rsvp.id,\n        email: validatedData.email,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        submittedAt: new Date().toISOString()\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    console.error('RSVP submission error:', error);\n    return NextResponse.json({ \n      error: 'Failed to submit RSVP'\n    }, { status: 500 });\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```sql\n-- RSVP table with comprehensive analytics\nCREATE TABLE \"RSVP\" (\n  \"id\" TEXT PRIMARY KEY,\n  \"fullName\" TEXT NOT NULL,\n  \"organization\" TEXT,\n  \"email\" TEXT UNIQUE NOT NULL,\n  \"phone\" TEXT,\n  \"attendanceStatus\" TEXT NOT NULL,\n  \"attendeeCount\" INTEGER NOT NULL,\n  \"dietaryPreference\" TEXT NOT NULL,\n  \"dietaryOther\" TEXT,\n  \"accessibilityNeeds\" TEXT,\n  \"referralSource\" TEXT NOT NULL,\n  \"referralOther\" TEXT,\n  \"wantsResources\" BOOLEAN DEFAULT false,\n  \"wantsAudit\" BOOLEAN DEFAULT false,\n  \"learningGoal\" TEXT,\n  \"createdAt\" TIMESTAMP DEFAULT NOW(),\n  -- Analytics fields\n  \"visitorId\" TEXT,\n  \"sessionId\" TEXT,\n  \"referrer\" TEXT,\n  \"eid\" TEXT,\n  \"utmSource\" TEXT,\n  \"utmMedium\" TEXT,\n  \"utmCampaign\" TEXT,\n  \"utmTerm\" TEXT,\n  \"utmContent\" TEXT,\n  \"userAgent\" TEXT,\n  \"language\" TEXT,\n  \"tz\" TEXT,\n  \"country\" TEXT,\n  \"region\" TEXT,\n  \"city\" TEXT,\n  \"ipHash\" TEXT,\n  \"screenW\" INTEGER,\n  \"screenH\" INTEGER,\n  \"dpr\" DOUBLE PRECISION,\n  \"platform\" TEXT,\n  \"device\" TEXT,\n  \"browser\" TEXT,\n  \"meta\" TEXT\n);\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Phone field with formatting\nexport function PhoneField({ value, onChange, onBlur, id = \"phone\" }) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```typescript\n// Comprehensive error handling\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Analytics data collection\nconst collectAnalyticsData = (req: Request) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex')\n  };\n};\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- **Step 1**: Contact Information (firstName, lastName, email, phone)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 2**: Attendance Status (attendanceStatus, attendeeCount if YES)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 3**: Dietary & Accessibility (dietaryPreference, dietaryOther, accessibilityNeeds)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 4**: Referral Source (referralSource, referralOther)",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **Step 5**: Additional Options (wantsResources, wantsAudit, learningGoal)",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- RSVP table with comprehensive analytics\nCREATE TABLE \"RSVP\" (\n  \"id\" TEXT PRIMARY KEY,\n  \"fullName\" TEXT NOT NULL,\n  \"organization\" TEXT,\n  \"email\" TEXT UNIQUE NOT NULL,\n  \"phone\" TEXT,\n  \"attendanceStatus\" TEXT NOT NULL,\n  \"attendeeCount\" INTEGER NOT NULL,\n  \"dietaryPreference\" TEXT NOT NULL,\n  \"dietaryOther\" TEXT,\n  \"accessibilityNeeds\" TEXT,\n  \"referralSource\" TEXT NOT NULL,\n  \"referralOther\" TEXT,\n  \"wantsResources\" BOOLEAN DEFAULT false,\n  \"wantsAudit\" BOOLEAN DEFAULT false,\n  \"learningGoal\" TEXT,\n  \"createdAt\" TIMESTAMP DEFAULT NOW(),\n  -- Analytics fields\n  \"visitorId\" TEXT,\n  \"sessionId\" TEXT,\n  \"referrer\" TEXT,\n  \"eid\" TEXT,\n  \"utmSource\" TEXT,\n  \"utmMedium\" TEXT,\n  \"utmCampaign\" TEXT,\n  \"utmTerm\" TEXT,\n  \"utmContent\" TEXT,\n  \"userAgent\" TEXT,\n  \"language\" TEXT,\n  \"tz\" TEXT,\n  \"country\" TEXT,\n  \"region\" TEXT,\n  \"city\" TEXT,\n  \"ipHash\" TEXT,\n  \"screenW\" INTEGER,\n  \"screenH\" INTEGER,\n  \"dpr\" DOUBLE PRECISION,\n  \"platform\" TEXT,\n  \"device\" TEXT,\n  \"browser\" TEXT,\n  \"meta\" TEXT\n);\n```",
        "type": "item",
        "category": "creation"
      }
    ],
    "interconnections": [
      "Event Management",
      "Analytics & Tracking",
      "Form Validation"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n    return NextResponse.json({ \n      error: 'Failed to submit RSVP'\n    }, { status: 500 });\n  }\n}\n```",
      "any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n```"
    ],
    "related_apis": [
      "/api/rsvp');"
    ],
    "related_components": [
      "req.js",
      "NextResponse.js"
    ],
    "tags": [
      "zod",
      "prisma",
      "weaviate",
      "rsvp-data-management",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "react",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "10-rsvp-data-management-accurate_3",
    "category": "RSVP Data Management",
    "subcategory": "General",
    "title": "What analytics data is collected for rsvps",
    "description": "What analytics data is collected for RSVPs? - Show me all the tracking fields",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Visitor and session identification\nvisitorId: string;        // Unique visitor ID (2-year cookie)\nsessionId: string;        // Session ID (30-minute rolling)\nreferrer: string;         // Page referrer URL\neid: string;             // Engagement ID from URL/cookie",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// UTM parameters for campaign tracking\nutmSource: string;        // Traffic source (e.g., 'google', 'facebook')\nutmMedium: string;        // Marketing medium (e.g., 'cpc', 'email')\nutmCampaign: string;      // Campaign name (e.g., 'ai-event-2025')\nutmTerm: string;          // Paid search keywords\nutmContent: string;       // Ad content variation\n\n// Ad click IDs\ngclid: string;            // Google Ads click ID\nfbclid: string;           // Facebook click ID\nmsclkid: string;          // Microsoft Ads click ID",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Browser and device details\nuserAgent: string;        // Full user agent string\nlanguage: string;         // User's preferred language\nlanguages: string[];      // Array of preferred languages\ntz: string;              // User's timezone (e.g., 'America/Vancouver')\nplatform: string;        // Operating system (e.g., 'MacOS', 'Windows')\ndevice: string;          // Device type (e.g., 'desktop', 'mobile')\nbrowser: string;         // Browser name (e.g., 'Chrome', 'Safari')",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Screen and viewport dimensions\nscreenW: number;          // Screen width in pixels\nscreenH: number;          // Screen height in pixels\nviewportW: number;        // Viewport width in pixels\nviewportH: number;        // Viewport height in pixels\ndpr: number;             // Device pixel ratio\norientation: string;      // Screen orientation ('portrait', 'landscape')",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Hardware and performance info\ndeviceMemory: number;     // Device memory in GB\nhardwareConcurrency: number; // Number of CPU cores\nmaxTouchPoints: number;   // Maximum touch points supported\nconnection: object;       // Network connection info",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Location information (from IP)\ncountry: string;          // Country code (e.g., 'CA', 'US')\nregion: string;           // Region/state (e.g., 'BC', 'CA')\ncity: string;             // City name (e.g., 'Vancouver')\nipHash: string;           // Hashed IP address for privacy",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Behavioral analytics\ninteractionCounts: object; // Click, scroll, form interaction counts\nscrollDepth: number;      // Maximum scroll percentage\npaint: object;            // Page paint timing metrics\nperformance: object;      // Performance timing data\ntimeOnPageMs: number;     // Time spent on page in milliseconds\nvisibility: object;       // Page visibility timeline",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// RSVP form specific data\nformInteractions: number; // Number of form field interactions\nerrorCount: number;       // Number of validation errors\nresizeCount: number;      // Number of window resize events\nbeforeUnloadCount: number; // Number of beforeunload events",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "typescript",
        "code": "// Full analytics data structure\nexport const analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});",
        "context": "Code snippet 9",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// How analytics data is collected\nconst collectRSVPAnalytics = (req: Request, formData: any) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    // Identification\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    \n    // Marketing attribution\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    gclid: cookies.get('gclid')?.value,\n    fbclid: cookies.get('fbclid')?.value,\n    msclkid: cookies.get('msclkid')?.value,\n    \n    // Device info\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    \n    // Geolocation\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex'),\n    \n    // Form-specific data\n    meta: JSON.stringify({\n      formStep: formData.currentStep,\n      validationErrors: formData.errors,\n      submissionTime: Date.now()\n    })\n  };\n};",
        "context": "Code snippet 10",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Privacy-preserving data collection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\n// Only collect analytics if user hasn't opted out\nif (!hasDoNotTrack()) {\n  // Collect analytics data\n  const analyticsData = collectRSVPAnalytics(req, formData);\n  await prisma.rsvp.create({ data: { ...formData, ...analyticsData } });\n}",
        "context": "Code snippet 11",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. MARKETING ATTRIBUTION**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. DEVICE & BROWSER INFORMATION**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. SCREEN & DISPLAY INFORMATION**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. DEVICE CAPABILITIES**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. GEOLOCATION DATA**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. USER INTERACTION TRACKING**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. FORM-SPECIFIC ANALYTICS**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. COMPLETE ANALYTICS SCHEMA**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**10. DATA COLLECTION PROCESS**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**11. PRIVACY CONSIDERATIONS**",
        "context": "Code snippet 10",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. IDENTIFICATION TRACKING**\n```typescript\n// Visitor and session identification\nvisitorId: string;        // Unique visitor ID (2-year cookie)\nsessionId: string;        // Session ID (30-minute rolling)\nreferrer: string;         // Page referrer URL\neid: string;             // Engagement ID from URL/cookie\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. MARKETING ATTRIBUTION**\n```typescript\n// UTM parameters for campaign tracking\nutmSource: string;        // Traffic source (e.g., 'google', 'facebook')\nutmMedium: string;        // Marketing medium (e.g., 'cpc', 'email')\nutmCampaign: string;      // Campaign name (e.g., 'ai-event-2025')\nutmTerm: string;          // Paid search keywords\nutmContent: string;       // Ad content variation",
        "type": "step",
        "category": "general"
      },
      {
        "description": "3. DEVICE & BROWSER INFORMATION**\n```typescript\n// Browser and device details\nuserAgent: string;        // Full user agent string\nlanguage: string;         // User's preferred language\nlanguages: string[];      // Array of preferred languages\ntz: string;              // User's timezone (e.g., 'America/Vancouver')\nplatform: string;        // Operating system (e.g., 'MacOS', 'Windows')\ndevice: string;          // Device type (e.g., 'desktop', 'mobile')\nbrowser: string;         // Browser name (e.g., 'Chrome', 'Safari')\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. SCREEN & DISPLAY INFORMATION**\n```typescript\n// Screen and viewport dimensions\nscreenW: number;          // Screen width in pixels\nscreenH: number;          // Screen height in pixels\nviewportW: number;        // Viewport width in pixels\nviewportH: number;        // Viewport height in pixels\ndpr: number;             // Device pixel ratio\norientation: string;      // Screen orientation ('portrait', 'landscape')\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "5. DEVICE CAPABILITIES**\n```typescript\n// Hardware and performance info\ndeviceMemory: number;     // Device memory in GB\nhardwareConcurrency: number; // Number of CPU cores\nmaxTouchPoints: number;   // Maximum touch points supported\nconnection: object;       // Network connection info\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "6. GEOLOCATION DATA**\n```typescript\n// Location information (from IP)\ncountry: string;          // Country code (e.g., 'CA', 'US')\nregion: string;           // Region/state (e.g., 'BC', 'CA')\ncity: string;             // City name (e.g., 'Vancouver')\nipHash: string;           // Hashed IP address for privacy\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "7. USER INTERACTION TRACKING**\n```typescript\n// Behavioral analytics\ninteractionCounts: object; // Click, scroll, form interaction counts\nscrollDepth: number;      // Maximum scroll percentage\npaint: object;            // Page paint timing metrics\nperformance: object;      // Performance timing data\ntimeOnPageMs: number;     // Time spent on page in milliseconds\nvisibility: object;       // Page visibility timeline\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. FORM-SPECIFIC ANALYTICS**\n```typescript\n// RSVP form specific data\nformInteractions: number; // Number of form field interactions\nerrorCount: number;       // Number of validation errors\nresizeCount: number;      // Number of window resize events\nbeforeUnloadCount: number; // Number of beforeunload events\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "9. COMPLETE ANALYTICS SCHEMA**\n```typescript\n// Full analytics data structure\nexport const analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```",
        "type": "step",
        "category": "general"
      },
      {
        "description": "10. DATA COLLECTION PROCESS**\n```typescript\n// How analytics data is collected\nconst collectRSVPAnalytics = (req: Request, formData: any) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    // Identification\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    \n    // Marketing attribution\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    gclid: cookies.get('gclid')?.value,\n    fbclid: cookies.get('fbclid')?.value,\n    msclkid: cookies.get('msclkid')?.value,\n    \n    // Device info\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    \n    // Geolocation\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex'),\n    \n    // Form-specific data\n    meta: JSON.stringify({\n      formStep: formData.currentStep,\n      validationErrors: formData.errors,\n      submissionTime: Date.now()\n    })\n  };\n};\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "11. PRIVACY CONSIDERATIONS**\n```typescript\n// Privacy-preserving data collection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n\n**1. IDENTIFICATION TRACKING**\n```typescript\n// Visitor and session identification\nvisitorId: string;        // Unique visitor ID (2-year cookie)\nsessionId: string;        // Session ID (30-minute rolling)\nreferrer: string;         // Page referrer URL\neid: string;             // Engagement ID from URL/cookie\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// UTM parameters for campaign tracking\nutmSource: string;        // Traffic source (e.g., 'google', 'facebook')\nutmMedium: string;        // Marketing medium (e.g., 'cpc', 'email')\nutmCampaign: string;      // Campaign name (e.g., 'ai-event-2025')\nutmTerm: string;          // Paid search keywords\nutmContent: string;       // Ad content variation",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Browser and device details\nuserAgent: string;        // Full user agent string\nlanguage: string;         // User's preferred language\nlanguages: string[];      // Array of preferred languages\ntz: string;              // User's timezone (e.g., 'America/Vancouver')\nplatform: string;        // Operating system (e.g., 'MacOS', 'Windows')\ndevice: string;          // Device type (e.g., 'desktop', 'mobile')\nbrowser: string;         // Browser name (e.g., 'Chrome', 'Safari')\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Screen and viewport dimensions\nscreenW: number;          // Screen width in pixels\nscreenH: number;          // Screen height in pixels\nviewportW: number;        // Viewport width in pixels\nviewportH: number;        // Viewport height in pixels\ndpr: number;             // Device pixel ratio\norientation: string;      // Screen orientation ('portrait', 'landscape')\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Hardware and performance info\ndeviceMemory: number;     // Device memory in GB\nhardwareConcurrency: number; // Number of CPU cores\nmaxTouchPoints: number;   // Maximum touch points supported\nconnection: object;       // Network connection info\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Location information (from IP)\ncountry: string;          // Country code (e.g., 'CA', 'US')\nregion: string;           // Region/state (e.g., 'BC', 'CA')\ncity: string;             // City name (e.g., 'Vancouver')\nipHash: string;           // Hashed IP address for privacy\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Behavioral analytics\ninteractionCounts: object; // Click, scroll, form interaction counts\nscrollDepth: number;      // Maximum scroll percentage\npaint: object;            // Page paint timing metrics\nperformance: object;      // Performance timing data\ntimeOnPageMs: number;     // Time spent on page in milliseconds\nvisibility: object;       // Page visibility timeline\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// RSVP form specific data\nformInteractions: number; // Number of form field interactions\nerrorCount: number;       // Number of validation errors\nresizeCount: number;      // Number of window resize events\nbeforeUnloadCount: number; // Number of beforeunload events\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Full analytics data structure\nexport const analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// How analytics data is collected\nconst collectRSVPAnalytics = (req: Request, formData: any) => {\n  const headers = req.headers;\n  const cookies = req.cookies;\n  \n  return {\n    // Identification\n    visitorId: cookies.get('vid')?.value,\n    sessionId: cookies.get('sid')?.value,\n    referrer: headers.get('referer'),\n    eid: cookies.get('eid')?.value,\n    \n    // Marketing attribution\n    utmSource: cookies.get('utm_source')?.value,\n    utmMedium: cookies.get('utm_medium')?.value,\n    utmCampaign: cookies.get('utm_campaign')?.value,\n    utmTerm: cookies.get('utm_term')?.value,\n    utmContent: cookies.get('utm_content')?.value,\n    gclid: cookies.get('gclid')?.value,\n    fbclid: cookies.get('fbclid')?.value,\n    msclkid: cookies.get('msclkid')?.value,\n    \n    // Device info\n    userAgent: headers.get('user-agent'),\n    language: headers.get('accept-language'),\n    tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    \n    // Geolocation\n    country: headers.get('x-vercel-ip-country'),\n    region: headers.get('x-vercel-ip-country-region'),\n    city: headers.get('x-vercel-ip-city'),\n    ipHash: crypto.createHash('sha256').update(\n      headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n    ).digest('hex'),\n    \n    // Form-specific data\n    meta: JSON.stringify({\n      formStep: formData.currentStep,\n      validationErrors: formData.errors,\n      submissionTime: Date.now()\n    })\n  };\n};\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Privacy-preserving data collection\nconst hasDoNotTrack = () => {\n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Event Management",
      "Analytics & Tracking",
      "Form Validation"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [],
    "related_components": [],
    "tags": [
      "zod",
      "prisma",
      "weaviate",
      "rsvp-data-management",
      "analytics",
      "typescript",
      "authentication",
      "tailwind",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "14-audience-management-accurate_1",
    "category": "Audience Management",
    "subcategory": "General",
    "title": "Audience management",
    "description": "How does audience management work? - Explain the audience group and member management system",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Audience Group database model\n// prisma/schema.prisma\nmodel AudienceGroup {\n  id          String             @id @default(cuid())\n  name        String\n  description String?\n  color       String?            @default(\"#10b981\")\n  criteria    Json?\n  meta        Json\n  createdAt   DateTime           @default(now())\n  updatedAt   DateTime           @updatedAt\n  members     AudienceMember[]\n  schedules   CampaignSchedule[]\n}",
        "context": "Code snippet 1",
        "purpose": "Database schema model"
      },
      {
        "language": "typescript",
        "code": "// Audience Member database model\nmodel AudienceMember {\n  id             String        @id @default(cuid())\n  groupId        String\n  businessId     String\n  businessName   String?\n  primaryEmail   String\n  secondaryEmail String?\n  tagsSnapshot   String[]\n  inviteToken    String?\n  meta           Json\n  createdAt      DateTime      @default(now())\n  unsubscribed   Boolean       @default(false)\n  group          AudienceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)\n\n  @@unique([groupId, businessId])\n  @@index([groupId])\n  @@index([businessId])\n}",
        "context": "Code snippet 2",
        "purpose": "Database schema model"
      },
      {
        "language": "typescript",
        "code": "// Audience Group API routes\n// src/app/api/admin/campaign/groups/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport prisma from '@/lib/prisma';\n\nexport async function GET() {\n  const auth = requireAdminSession();\n  if ('response' in auth) return auth.response;\n\n  const groups = await prisma.audienceGroup.findMany({\n    include: {\n      members: true,\n      _count: {\n        select: {\n          members: true,\n        },\n      },\n    },\n    orderBy: { createdAt: 'desc' },\n  });\n\n  return NextResponse.json({ groups });\n}\n\nexport async function POST(request: NextRequest) {\n  const auth = requireAdminSession();\n  if ('response' in auth) return auth.response;\n\n  try {\n    const body = await request.json();\n    const { name, description, color, criteria, meta } = body;\n\n    const group = await prisma.audienceGroup.create({\n      data: {\n        name,\n        description,\n        color: color || '#10b981',\n        criteria: criteria || {},\n        meta: meta || {},\n      },\n      include: {\n        members: true,\n        _count: {\n          select: {\n            members: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json({ group });\n  } catch (error) {\n    console.error('Error creating audience group:', error);\n    return NextResponse.json(\n      { error: 'Failed to create audience group' },\n      { status: 500 }\n    );\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Audience Member management functions\n// src/lib/campaigns.ts\nexport async function addAudienceMember(\n  groupId: string,\n  businessData: {\n    businessId: string;\n    businessName?: string;\n    primaryEmail: string;\n    secondaryEmail?: string;\n    tagsSnapshot?: string[];\n    inviteToken?: string;\n    meta?: any;\n  }\n) {\n  try {\n    const member = await prisma.audienceMember.create({\n      data: {\n        groupId,\n        businessId: businessData.businessId,\n        businessName: businessData.businessName,\n        primaryEmail: businessData.primaryEmail,\n        secondaryEmail: businessData.secondaryEmail,\n        tagsSnapshot: businessData.tagsSnapshot || [],\n        inviteToken: businessData.inviteToken,\n        meta: businessData.meta || {},\n      },\n    });\n\n    return member;\n  } catch (error) {\n    if (error.code === 'P2002') {\n      // Unique constraint violation - member already exists\n      throw new Error('Member already exists in this group');\n    }\n    throw error;\n  }\n}\n\nexport async function removeAudienceMember(groupId: string, businessId: string) {\n  try {\n    await prisma.audienceMember.delete({\n      where: {\n        groupId_businessId: {\n          groupId,\n          businessId,\n        },\n      },\n    });\n  } catch (error) {\n    throw new Error('Failed to remove member from group');\n  }\n}\n\nexport async function updateAudienceMember(\n  groupId: string,\n  businessId: string,\n  updateData: {\n    businessName?: string;\n    primaryEmail?: string;\n    secondaryEmail?: string;\n    tagsSnapshot?: string[];\n    inviteToken?: string;\n    meta?: any;\n    unsubscribed?: boolean;\n  }\n) {\n  try {\n    const member = await prisma.audienceMember.update({\n      where: {\n        groupId_businessId: {\n          groupId,\n          businessId,\n        },\n      },\n      data: updateData,\n    });\n\n    return member;\n  } catch (error) {\n    throw new Error('Failed to update member');\n  }\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Create audience group with criteria\nconst createAudienceGroup = async (groupData: {\n  name: string;\n  description?: string;\n  color?: string;\n  criteria?: {\n    tags?: string[];\n    location?: string;\n    industry?: string;\n    size?: string;\n  };\n  meta?: any;\n}) => {\n  const group = await prisma.audienceGroup.create({\n    data: {\n      name: groupData.name,\n      description: groupData.description,\n      color: groupData.color || '#10b981',\n      criteria: groupData.criteria || {},\n      meta: groupData.meta || {},\n    },\n  });\n\n  return group;\n};\n\n// Example usage\nconst techCompaniesGroup = await createAudienceGroup({\n  name: 'Tech Companies',\n  description: 'Technology companies in Northern BC',\n  color: '#3b82f6',\n  criteria: {\n    tags: ['technology', 'software', 'IT'],\n    location: 'Northern BC',\n    industry: 'Technology',\n    size: 'small-medium'\n  },\n  meta: {\n    createdBy: 'admin',\n    source: 'manual'\n  }\n});",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Sync audience members from LeadMine\n// src/lib/campaigns.ts\nexport async function syncAudienceFromLeadMine(\n  groupId: string,\n  leadMineData: LeadMineBusiness[]\n) {\n  const results = {\n    added: 0,\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };\n\n  for (const business of leadMineData) {\n    try {\n      // Check if member already exists\n      const existingMember = await prisma.audienceMember.findUnique({\n        where: {\n          groupId_businessId: {\n            groupId,\n            businessId: business.id,\n          },\n        },\n      });\n\n      if (existingMember) {\n        // Update existing member\n        await prisma.audienceMember.update({\n          where: {\n            groupId_businessId: {\n              groupId,\n              businessId: business.id,\n            },\n          },\n          data: {\n            businessName: business.name,\n            primaryEmail: business.contact.primaryEmail,\n            secondaryEmail: business.contact.alternateEmail,\n            tagsSnapshot: business.contact.tags,\n            inviteToken: business.invite?.token,\n            meta: {\n              ...existingMember.meta,\n              lastSynced: new Date().toISOString(),\n              leadMineData: {\n                status: business.lead.status,\n                priority: business.lead.priority,\n                assignedTo: business.lead.assignedTo,\n                nextFollowUpDate: business.lead.nextFollowUpDate,\n              },\n            },\n          },\n        });\n        results.updated++;\n      } else {\n        // Create new member\n        await prisma.audienceMember.create({\n          data: {\n            groupId,\n            businessId: business.id,\n            businessName: business.name,\n            primaryEmail: business.contact.primaryEmail,\n            secondaryEmail: business.contact.alternateEmail,\n            tagsSnapshot: business.contact.tags,\n            inviteToken: business.invite?.token,\n            meta: {\n              lastSynced: new Date().toISOString(),\n              leadMineData: {\n                status: business.lead.status,\n                priority: business.lead.priority,\n                assignedTo: business.lead.assignedTo,\n                nextFollowUpDate: business.lead.nextFollowUpDate,\n              },\n            },\n          },\n        });\n        results.added++;\n      }\n    } catch (error) {\n      results.errors++;\n      results.errors.push(`Failed to sync business ${business.id}: ${error.message}`);\n    }\n  }\n\n  return results;\n}",
        "context": "Code snippet 6",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Audience segmentation based on criteria\nconst segmentAudience = async (groupId: string, criteria: {\n  tags?: string[];\n  location?: string;\n  industry?: string;\n  size?: string;\n  unsubscribed?: boolean;\n}) => {\n  const whereClause: any = {\n    groupId,\n  };\n\n  if (criteria.tags && criteria.tags.length > 0) {\n    whereClause.tagsSnapshot = {\n      hasSome: criteria.tags,\n    };\n  }\n\n  if (criteria.unsubscribed !== undefined) {\n    whereClause.unsubscribed = criteria.unsubscribed;\n  }\n\n  // Add more criteria based on meta fields\n  if (criteria.location) {\n    whereClause.meta = {\n      path: ['location'],\n      equals: criteria.location,\n    };\n  }\n\n  const members = await prisma.audienceMember.findMany({\n    where: whereClause,\n    include: {\n      group: true,\n    },\n  });\n\n  return members;\n};\n\n// Example segmentation\nconst techMembers = await segmentAudience('tech-group-id', {\n  tags: ['technology', 'software'],\n  location: 'Northern BC',\n  unsubscribed: false,\n});",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Audience analytics and reporting\nconst getAudienceAnalytics = async (groupId: string) => {\n  const group = await prisma.audienceGroup.findUnique({\n    where: { id: groupId },\n    include: {\n      members: {\n        include: {\n          // Include campaign sends for engagement metrics\n          group: {\n            include: {\n              schedules: {\n                include: {\n                  sends: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });\n\n  if (!group) {\n    throw new Error('Group not found');\n  }\n\n  const analytics = {\n    totalMembers: group.members.length,\n    activeMembers: group.members.filter(m => !m.unsubscribed).length,\n    unsubscribedMembers: group.members.filter(m => m.unsubscribed).length,\n    \n    // Engagement metrics\n    totalEmailsSent: group.members.reduce((sum, member) => {\n      return sum + (member.group?.schedules?.reduce((scheduleSum, schedule) => {\n        return scheduleSum + schedule.sends.length;\n      }, 0) || 0);\n    }, 0),\n    \n    // Tag distribution\n    tagDistribution: group.members.reduce((acc, member) => {\n      member.tagsSnapshot.forEach(tag => {\n        acc[tag] = (acc[tag] || 0) + 1;\n      });\n      return acc;\n    }, {} as Record<string, number>),\n    \n    // Recent activity\n    recentActivity: group.members\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, 10),\n  };\n\n  return analytics;\n};",
        "context": "Code snippet 8",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Bulk operations for audience members\nconst bulkUpdateAudienceMembers = async (\n  groupId: string,\n  updates: Array<{\n    businessId: string;\n    updateData: any;\n  }>\n) => {\n  const results = {\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };\n\n  for (const update of updates) {\n    try {\n      await prisma.audienceMember.update({\n        where: {\n          groupId_businessId: {\n            groupId,\n            businessId: update.businessId,\n          },\n        },\n        data: update.updateData,\n      });\n      results.updated++;\n    } catch (error) {\n      results.errors++;\n      results.errors.push(`Failed to update ${update.businessId}: ${error.message}`);\n    }\n  }\n\n  return results;\n};\n\n// Bulk unsubscribe\nconst bulkUnsubscribe = async (groupId: string, businessIds: string[]) => {\n  const result = await prisma.audienceMember.updateMany({\n    where: {\n      groupId,\n      businessId: {\n        in: businessIds,\n      },\n    },\n    data: {\n      unsubscribed: true,\n      meta: {\n        unsubscribedAt: new Date().toISOString(),\n        unsubscribedBy: 'bulk-operation',\n      },\n    },\n  });\n\n  return result;\n};",
        "context": "Code snippet 9",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Audience Group management UI\n// src/components/admin/campaign/AudienceGroups.tsx\nexport default function AudienceGroups({ groups, onGroupSelect }) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Audience Groups</h3>\n        <button \n          onClick={() => setShowCreateGroup(true)}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n        >\n          Create Group\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {groups.map((group) => (\n          <div \n            key={group.id}\n            className=\"p-4 border rounded-lg hover:shadow-md cursor-pointer\"\n            onClick={() => onGroupSelect(group)}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-medium\">{group.name}</h4>\n              <div \n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: group.color }}\n              />\n            </div>\n            <p className=\"text-sm text-gray-600 mb-2\">{group.description}</p>\n            <div className=\"text-sm text-gray-500\">\n              {group._count.members} members\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}",
        "context": "Code snippet 10",
        "purpose": "React component"
      },
      {
        "language": "code",
        "code": "**2. AUDIENCE MEMBER MODEL**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. AUDIENCE GROUP API ENDPOINTS**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. AUDIENCE MEMBER MANAGEMENT**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. AUDIENCE GROUP CREATION**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. AUDIENCE MEMBER SYNC FROM LEADMINE**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. AUDIENCE SEGMENTATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**8. AUDIENCE ANALYTICS**",
        "context": "Code snippet 7",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**9. AUDIENCE MEMBER BULK OPERATIONS**",
        "context": "Code snippet 8",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**10. AUDIENCE GROUP UI COMPONENTS**",
        "context": "Code snippet 9",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. AUDIENCE GROUP MODEL**\n```typescript\n// Audience Group database model\n// prisma/schema.prisma\nmodel AudienceGroup {\n  id          String             @id @default(cuid())\n  name        String\n  description String?\n  color       String?            @default(\"#10b981\")\n  criteria    Json?\n  meta        Json\n  createdAt   DateTime           @default(now())\n  updatedAt   DateTime           @updatedAt\n  members     AudienceMember[]\n  schedules   CampaignSchedule[]\n}\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "2. AUDIENCE MEMBER MODEL**\n```typescript\n// Audience Member database model\nmodel AudienceMember {\n  id             String        @id @default(cuid())\n  groupId        String\n  businessId     String\n  businessName   String?\n  primaryEmail   String\n  secondaryEmail String?\n  tagsSnapshot   String[]\n  inviteToken    String?\n  meta           Json\n  createdAt      DateTime      @default(now())\n  unsubscribed   Boolean       @default(false)\n  group          AudienceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "3. AUDIENCE GROUP API ENDPOINTS**\n```typescript\n// Audience Group API routes\n// src/app/api/admin/campaign/groups/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport prisma from '@/lib/prisma';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "4. AUDIENCE MEMBER MANAGEMENT**\n```typescript\n// Audience Member management functions\n// src/lib/campaigns.ts\nexport async function addAudienceMember(\n  groupId: string,\n  businessData: {\n    businessId: string;\n    businessName?: string;\n    primaryEmail: string;\n    secondaryEmail?: string;\n    tagsSnapshot?: string[];\n    inviteToken?: string;\n    meta?: any;\n  }\n) {\n  try {\n    const member = await prisma.audienceMember.create({\n      data: {\n        groupId,\n        businessId: businessData.businessId,\n        businessName: businessData.businessName,\n        primaryEmail: businessData.primaryEmail,\n        secondaryEmail: businessData.secondaryEmail,\n        tagsSnapshot: businessData.tagsSnapshot || [],\n        inviteToken: businessData.inviteToken,\n        meta: businessData.meta || {},\n      },\n    });",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "5. AUDIENCE GROUP CREATION**\n```typescript\n// Create audience group with criteria\nconst createAudienceGroup = async (groupData: {\n  name: string;\n  description?: string;\n  color?: string;\n  criteria?: {\n    tags?: string[];\n    location?: string;\n    industry?: string;\n    size?: string;\n  };\n  meta?: any;\n}) => {\n  const group = await prisma.audienceGroup.create({\n    data: {\n      name: groupData.name,\n      description: groupData.description,\n      color: groupData.color || '#10b981',\n      criteria: groupData.criteria || {},\n      meta: groupData.meta || {},\n    },\n  });",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "6. AUDIENCE MEMBER SYNC FROM LEADMINE**\n```typescript\n// Sync audience members from LeadMine\n// src/lib/campaigns.ts\nexport async function syncAudienceFromLeadMine(\n  groupId: string,\n  leadMineData: LeadMineBusiness[]\n) {\n  const results = {\n    added: 0,\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "7. AUDIENCE SEGMENTATION**\n```typescript\n// Audience segmentation based on criteria\nconst segmentAudience = async (groupId: string, criteria: {\n  tags?: string[];\n  location?: string;\n  industry?: string;\n  size?: string;\n  unsubscribed?: boolean;\n}) => {\n  const whereClause: any = {\n    groupId,\n  };",
        "type": "step",
        "category": "general"
      },
      {
        "description": "8. AUDIENCE ANALYTICS**\n```typescript\n// Audience analytics and reporting\nconst getAudienceAnalytics = async (groupId: string) => {\n  const group = await prisma.audienceGroup.findUnique({\n    where: { id: groupId },\n    include: {\n      members: {\n        include: {\n          // Include campaign sends for engagement metrics\n          group: {\n            include: {\n              schedules: {\n                include: {\n                  sends: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "9. AUDIENCE MEMBER BULK OPERATIONS**\n```typescript\n// Bulk operations for audience members\nconst bulkUpdateAudienceMembers = async (\n  groupId: string,\n  updates: Array<{\n    businessId: string;\n    updateData: any;\n  }>\n) => {\n  const results = {\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "step",
        "category": "modification"
      },
      {
        "description": "10. AUDIENCE GROUP UI COMPONENTS**\n```typescript\n// Audience Group management UI\n// src/components/admin/campaign/AudienceGroups.tsx\nexport default function AudienceGroups({ groups, onGroupSelect }) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Audience Groups</h3>\n        <button \n          onClick={() => setShowCreateGroup(true)}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n        >\n          Create Group\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {groups.map((group) => (\n          <div \n            key={group.id}\n            className=\"p-4 border rounded-lg hover:shadow-md cursor-pointer\"\n            onClick={() => onGroupSelect(group)}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-medium\">{group.name}</h4>\n              <div \n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: group.color }}\n              />\n            </div>\n            <p className=\"text-sm text-gray-600 mb-2\">{group.description}</p>\n            <div className=\"text-sm text-gray-500\">\n              {group._count.members} members\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "*\n\n**1. AUDIENCE GROUP MODEL**\n```typescript\n// Audience Group database model\n// prisma/schema.prisma\nmodel AudienceGroup {\n  id          String             @id @default(cuid())\n  name        String\n  description String?\n  color       String?            @default(\"#10b981\")\n  criteria    Json?\n  meta        Json\n  createdAt   DateTime           @default(now())\n  updatedAt   DateTime           @updatedAt\n  members     AudienceMember[]\n  schedules   CampaignSchedule[]\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Audience Member database model\nmodel AudienceMember {\n  id             String        @id @default(cuid())\n  groupId        String\n  businessId     String\n  businessName   String?\n  primaryEmail   String\n  secondaryEmail String?\n  tagsSnapshot   String[]\n  inviteToken    String?\n  meta           Json\n  createdAt      DateTime      @default(now())\n  unsubscribed   Boolean       @default(false)\n  group          AudienceGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Audience Group API routes\n// src/app/api/admin/campaign/groups/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { requireAdminSession } from '@/lib/adminSession';\nimport prisma from '@/lib/prisma';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Audience Member management functions\n// src/lib/campaigns.ts\nexport async function addAudienceMember(\n  groupId: string,\n  businessData: {\n    businessId: string;\n    businessName?: string;\n    primaryEmail: string;\n    secondaryEmail?: string;\n    tagsSnapshot?: string[];\n    inviteToken?: string;\n    meta?: any;\n  }\n) {\n  try {\n    const member = await prisma.audienceMember.create({\n      data: {\n        groupId,\n        businessId: businessData.businessId,\n        businessName: businessData.businessName,\n        primaryEmail: businessData.primaryEmail,\n        secondaryEmail: businessData.secondaryEmail,\n        tagsSnapshot: businessData.tagsSnapshot || [],\n        inviteToken: businessData.inviteToken,\n        meta: businessData.meta || {},\n      },\n    });",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Create audience group with criteria\nconst createAudienceGroup = async (groupData: {\n  name: string;\n  description?: string;\n  color?: string;\n  criteria?: {\n    tags?: string[];\n    location?: string;\n    industry?: string;\n    size?: string;\n  };\n  meta?: any;\n}) => {\n  const group = await prisma.audienceGroup.create({\n    data: {\n      name: groupData.name,\n      description: groupData.description,\n      color: groupData.color || '#10b981',\n      criteria: groupData.criteria || {},\n      meta: groupData.meta || {},\n    },\n  });",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Sync audience members from LeadMine\n// src/lib/campaigns.ts\nexport async function syncAudienceFromLeadMine(\n  groupId: string,\n  leadMineData: LeadMineBusiness[]\n) {\n  const results = {\n    added: 0,\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Audience segmentation based on criteria\nconst segmentAudience = async (groupId: string, criteria: {\n  tags?: string[];\n  location?: string;\n  industry?: string;\n  size?: string;\n  unsubscribed?: boolean;\n}) => {\n  const whereClause: any = {\n    groupId,\n  };",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Audience analytics and reporting\nconst getAudienceAnalytics = async (groupId: string) => {\n  const group = await prisma.audienceGroup.findUnique({\n    where: { id: groupId },\n    include: {\n      members: {\n        include: {\n          // Include campaign sends for engagement metrics\n          group: {\n            include: {\n              schedules: {\n                include: {\n                  sends: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  });",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Bulk operations for audience members\nconst bulkUpdateAudienceMembers = async (\n  groupId: string,\n  updates: Array<{\n    businessId: string;\n    updateData: any;\n  }>\n) => {\n  const results = {\n    updated: 0,\n    errors: 0,\n    errors: [] as string[]\n  };",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```typescript\n// Audience Group management UI\n// src/components/admin/campaign/AudienceGroups.tsx\nexport default function AudienceGroups({ groups, onGroupSelect }) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Audience Groups</h3>\n        <button \n          onClick={() => setShowCreateGroup(true)}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n        >\n          Create Group\n        </button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {groups.map((group) => (\n          <div \n            key={group.id}\n            className=\"p-4 border rounded-lg hover:shadow-md cursor-pointer\"\n            onClick={() => onGroupSelect(group)}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-medium\">{group.name}</h4>\n              <div \n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: group.color }}\n              />\n            </div>\n            <p className=\"text-sm text-gray-600 mb-2\">{group.description}</p>\n            <div className=\"text-sm text-gray-500\">\n              {group._count.members} members\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- member already exists\n      throw new Error('Member already exists in this group');\n    }\n    throw error;\n  }\n}",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- a.createdAt.getTime())\n      .slice(0, 10),\n  };",
        "type": "item",
        "category": "creation"
      }
    ],
    "interconnections": [
      "LeadMine Integration",
      "Campaign Management"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "'Failed to create audience group' },\n      { status: 500 }\n    );\n  }\n}\n```"
    ],
    "related_apis": [
      "/api/admin/campaign/groups/route.ts"
    ],
    "related_components": [
      "AudienceGroups.tsx",
      "route.ts",
      "campaigns.ts",
      "AudienceGroups.ts",
      "NextResponse.js",
      "request.js",
      "src/app/api/admin/campaign/groups/route.ts",
      "src/lib/campaigns.ts",
      "src/components/admin/campaign/AudienceGroups.tsx",
      "components/admin/campaign/AudienceGroups.tsx"
    ],
    "tags": [
      "zod",
      "prisma",
      "analytics",
      "typescript",
      "authentication",
      "audience-management",
      "react",
      "nextjs",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "regional_focus": "Northern BC",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  },
  {
    "id": "20-middleware-features-accurate_1",
    "category": "Middleware Features",
    "subcategory": "General",
    "title": "Middleware",
    "description": "How does middleware work? - Explain cookie management and UTM tracking middleware",
    "code_snippets": [
      {
        "language": "typescript",
        "code": "// Next.js middleware configuration\n// middleware.ts\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nconst SESSION_MS = 30 * 60 * 1000; // 30 minutes\n\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  const url = req.nextUrl;\n\n  // 1) Visitor ID (2 years)\n  let vid = req.cookies.get('vid')?.value;\n  if (!vid) {\n    vid = crypto.randomUUID();\n    res.cookies.set('vid', vid, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n    });\n  }\n\n  // 2) Session ID (30-min rolling)\n  const now = Date.now();\n  let sid = req.cookies.get('sid')?.value;\n  const sidTs = Number(req.cookies.get('sid_ts')?.value || 0);\n  if (!sid || now - sidTs > SESSION_MS) {\n    sid = crypto.randomUUID();\n    res.cookies.set('sid', sid, { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }\n\n  // 3) Persist UTM/eid/click IDs (90 days)\n  const sp = url.searchParams;\n  const utmKeys = [\n    'utm_source', 'utm_medium', 'utm_campaign', \n    'utm_term', 'utm_content', 'eid',\n    'gclid', 'fbclid', 'msclkid'\n  ];\n  \n  for (const k of utmKeys) {\n    const v = sp.get(k);\n    if (v) {\n      res.cookies.set(k, v, {\n        path: '/',\n        httpOnly: true,\n        sameSite: 'lax',\n        secure: true,\n        maxAge: 60 * 60 * 24 * 90, // 90 days\n      });\n    }\n  }\n\n  return res;\n}\n\nexport const config = {\n  matcher: ['/((?!_next/static|_next/image|favicon.ico|api/__pixel).*)']\n};",
        "context": "Code snippet 1",
        "purpose": "Module import/export"
      },
      {
        "language": "typescript",
        "code": "// Cookie management utilities\n// src/lib/cookies.ts\nexport class CookieManager {\n  private static instance: CookieManager;\n  \n  static getInstance(): CookieManager {\n    if (!CookieManager.instance) {\n      CookieManager.instance = new CookieManager();\n    }\n    return CookieManager.instance;\n  }\n  \n  // Set cookie with security defaults\n  setCookie(\n    name: string,\n    value: string,\n    options: {\n      maxAge?: number;\n      httpOnly?: boolean;\n      secure?: boolean;\n      sameSite?: 'strict' | 'lax' | 'none';\n      path?: string;\n    } = {}\n  ) {\n    const defaults = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax' as const,\n      path: '/',\n      maxAge: 60 * 60 * 24 * 30 // 30 days\n    };\n    \n    const config = { ...defaults, ...options };\n    \n    return {\n      name,\n      value,\n      ...config\n    };\n  }\n  \n  // Get cookie value\n  getCookie(name: string, cookies: any): string | undefined {\n    return cookies.get(name)?.value;\n  }\n  \n  // Delete cookie\n  deleteCookie(name: string) {\n    return {\n      name,\n      value: '',\n      maxAge: 0,\n      path: '/'\n    };\n  }\n  \n  // Check if cookie exists\n  hasCookie(name: string, cookies: any): boolean {\n    return cookies.has(name);\n  }\n}\n\n// UTM parameter management\nexport class UTMManager {\n  private static instance: UTMManager;\n  \n  static getInstance(): UTMManager {\n    if (!UTMManager.instance) {\n      UTMManager.instance = new UTMManager();\n    }\n    return UTMManager.instance;\n  }\n  \n  // Extract UTM parameters from URL\n  extractUTMParams(url: URL): Record<string, string> {\n    const utmParams: Record<string, string> = {};\n    const utmKeys = [\n      'utm_source', 'utm_medium', 'utm_campaign',\n      'utm_term', 'utm_content', 'eid',\n      'gclid', 'fbclid', 'msclkid'\n    ];\n    \n    for (const key of utmKeys) {\n      const value = url.searchParams.get(key);\n      if (value) {\n        utmParams[key] = value;\n      }\n    }\n    \n    return utmParams;\n  }\n  \n  // Get UTM parameters from cookies\n  getUTMFromCookies(cookies: any): Record<string, string> {\n    const utmParams: Record<string, string> = {};\n    const utmKeys = [\n      'utm_source', 'utm_medium', 'utm_campaign',\n      'utm_term', 'utm_content', 'eid',\n      'gclid', 'fbclid', 'msclkid'\n    ];\n    \n    for (const key of utmKeys) {\n      const value = cookies.get(key)?.value;\n      if (value) {\n        utmParams[key] = value;\n      }\n    }\n    \n    return utmParams;\n  }\n  \n  // Validate UTM parameters\n  validateUTMParams(params: Record<string, string>): {\n    valid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n    \n    // Check for required UTM parameters\n    if (params.utm_source && !params.utm_medium) {\n      errors.push('utm_medium is required when utm_source is provided');\n    }\n    \n    // Validate UTM source\n    if (params.utm_source) {\n      const validSources = ['google', 'facebook', 'twitter', 'linkedin', 'email', 'direct'];\n      if (!validSources.includes(params.utm_source.toLowerCase())) {\n        errors.push('Invalid utm_source value');\n      }\n    }\n    \n    // Validate UTM medium\n    if (params.utm_medium) {\n      const validMediums = ['cpc', 'cpm', 'email', 'social', 'organic', 'referral'];\n      if (!validMediums.includes(params.utm_medium.toLowerCase())) {\n        errors.push('Invalid utm_medium value');\n      }\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}",
        "context": "Code snippet 2",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Visitor tracking and session management\n// src/lib/visitor-tracking.ts\nexport class VisitorTracker {\n  private static instance: VisitorTracker;\n  \n  static getInstance(): VisitorTracker {\n    if (!VisitorTracker.instance) {\n      VisitorTracker.instance = new VisitorTracker();\n    }\n    return VisitorTracker.instance;\n  }\n  \n  // Generate visitor ID\n  generateVisitorId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Generate session ID\n  generateSessionId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Check if session is expired\n  isSessionExpired(sessionTimestamp: number): boolean {\n    const now = Date.now();\n    const sessionAge = now - sessionTimestamp;\n    return sessionAge > SESSION_MS;\n  }\n  \n  // Get visitor fingerprint\n  getVisitorFingerprint(req: NextRequest): string {\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    const ip = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    const fingerprint = `${userAgent}-${acceptLanguage}-${acceptEncoding}-${ip}`;\n    return crypto.createHash('sha256').update(fingerprint).digest('hex');\n  }\n  \n  // Track page visit\n  async trackPageVisit(\n    req: NextRequest,\n    path: string,\n    query: string\n  ): Promise<void> {\n    try {\n      const visitorId = req.cookies.get('vid')?.value;\n      const sessionId = req.cookies.get('sid')?.value;\n      \n      if (!visitorId || !sessionId) {\n        return; // Skip tracking if no visitor/session ID\n      }\n      \n      const utmParams = UTMManager.getInstance().getUTMFromCookies(req.cookies);\n      const fingerprint = this.getVisitorFingerprint(req);\n      \n      await prisma.visit.create({\n        data: {\n          visitorId,\n          sessionId,\n          path,\n          query,\n          referrer: req.headers.get('referer'),\n          ...utmParams,\n          userAgent: req.headers.get('user-agent'),\n          language: req.headers.get('accept-language'),\n          country: req.headers.get('x-vercel-ip-country'),\n          region: req.headers.get('x-vercel-ip-country-region'),\n          city: req.headers.get('x-vercel-ip-city'),\n          ipHash: crypto.createHash('sha256').update(\n            req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n          ).digest('hex'),\n          meta: JSON.stringify({\n            fingerprint,\n            timestamp: new Date().toISOString()\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Visitor tracking error:', error);\n    }\n  }\n}",
        "context": "Code snippet 3",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Link tracking for campaign attribution\n// src/app/api/l/route.ts\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });\n\n  const c = cookies();\n  const h = (k: string) => headers().get(k);\n  const vid = c.get('vid')?.value ?? 'unknown';\n  const sid = c.get('sid')?.value ?? 'unknown';\n\n  // Prefer explicit eid in the link; fallback to cookie\n  const eid = url.searchParams.get('eid') ?? c.get('eid')?.value ?? undefined;\n\n  // Get UTM parameters from cookies\n  const utmSource = c.get('utm_source')?.value;\n  const utmMedium = c.get('utm_medium')?.value;\n  const utmCampaign = c.get('utm_campaign')?.value;\n  const utmTerm = c.get('utm_term')?.value;\n  const utmContent = c.get('utm_content')?.value;\n\n  // Parse user agent\n  const ua = h('user-agent') || undefined;\n  const parsed = ua ? new UAParser(ua).getResult() : undefined;\n  const browser = parsed?.browser?.name;\n  const device = parsed?.device?.type || 'desktop';\n  const platform = parsed?.os?.name;\n\n  // Get geolocation\n  const referer = h('referer') || undefined;\n  const country = h('x-vercel-ip-country') || undefined;\n  const region = h('x-vercel-ip-country-region') || undefined;\n  const city = h('x-vercel-ip-city') || undefined;\n  const ip = h('x-forwarded-for')?.split(',')[0]?.trim();\n  const ipHash = ip ? crypto.createHash('sha256').update(ip).digest('hex') : undefined;\n\n  // Track the link click\n  try {\n    await prisma.visit.create({\n      data: {\n        visitorId: vid,\n        sessionId: sid,\n        path: '/api/l',\n        query: url.search,\n        referrer: referer,\n        eid, utmSource, utmMedium, utmCampaign, utmTerm, utmContent,\n        userAgent: ua, browser, device, platform,\n        country, region, city, ipHash,\n      },\n    });\n  } catch {\n    // Stay silent on errors\n  }\n\n  return NextResponse.redirect(to, { status: 302 });\n}",
        "context": "Code snippet 4",
        "purpose": "API endpoint handler"
      },
      {
        "language": "typescript",
        "code": "// Security headers middleware\n// src/lib/security-middleware.ts\nexport function addSecurityHeaders(res: NextResponse): NextResponse {\n  // Security headers\n  res.headers.set('X-Content-Type-Options', 'nosniff');\n  res.headers.set('X-Frame-Options', 'DENY');\n  res.headers.set('X-XSS-Protection', '1; mode=block');\n  res.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n  \n  // Content Security Policy\n  res.headers.set(\n    'Content-Security-Policy',\n    [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live\",\n      \"style-src 'self' 'unsafe-inline'\",\n      \"img-src 'self' data: https: blob:\",\n      \"font-src 'self' data:\",\n      \"connect-src 'self' https://api.lead-mine.vercel.app https://api.resend.com https://api.sendgrid.com\",\n      \"frame-src 'none'\",\n      \"object-src 'none'\",\n      \"base-uri 'self'\",\n      \"form-action 'self'\",\n      \"frame-ancestors 'none'\"\n    ].join('; ')\n  );\n  \n  return res;\n}\n\n// Admin route protection middleware\nexport function protectAdminRoutes(req: NextRequest): NextResponse | null {\n  if (req.nextUrl.pathname.startsWith('/admin')) {\n    const token = req.cookies.get(getSessionCookieName())?.value;\n    const config = getAdminConfig();\n    \n    if (!config) {\n      return NextResponse.redirect(new URL('/admin/login?error=config', req.url));\n    }\n    \n    const session = verifySessionToken(token, config.sessionSecret);\n    if (!session) {\n      const loginUrl = new URL('/admin/login', req.url);\n      loginUrl.searchParams.set('next', req.nextUrl.pathname);\n      return NextResponse.redirect(loginUrl);\n    }\n  }\n  \n  return null;\n}",
        "context": "Code snippet 5",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Rate limiting middleware\n// src/lib/rate-limiting.ts\nexport class RateLimiter {\n  private static instance: RateLimiter;\n  private limits: Map<string, { count: number; resetTime: number }> = new Map();\n  \n  static getInstance(): RateLimiter {\n    if (!RateLimiter.instance) {\n      RateLimiter.instance = new RateLimiter();\n    }\n    return RateLimiter.instance;\n  }\n  \n  // Check rate limit\n  checkRateLimit(\n    key: string,\n    maxRequests: number,\n    windowMs: number\n  ): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const limit = this.limits.get(key);\n    \n    if (!limit || now > limit.resetTime) {\n      // Create new limit\n      this.limits.set(key, {\n        count: 1,\n        resetTime: now + windowMs\n      });\n      \n      return {\n        allowed: true,\n        remaining: maxRequests - 1,\n        resetTime: now + windowMs\n      };\n    }\n    \n    if (limit.count >= maxRequests) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: limit.resetTime\n      };\n    }\n    \n    // Increment count\n    limit.count++;\n    this.limits.set(key, limit);\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - limit.count,\n      resetTime: limit.resetTime\n    };\n  }\n  \n  // Clean up expired limits\n  cleanupExpiredLimits(): void {\n    const now = Date.now();\n    for (const [key, limit] of this.limits) {\n      if (now > limit.resetTime) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}\n\n// Rate limiting for RSVP submissions\nexport function checkRSVPRateLimit(\n  clientIP: string,\n  userAgent: string,\n  acceptLanguage: string,\n  acceptEncoding: string\n): { allowed: boolean; remaining: number; resetTime: number } {\n  const fingerprint = crypto\n    .createHash('sha256')\n    .update(`${clientIP}-${userAgent}-${acceptLanguage}-${acceptEncoding}`)\n    .digest('hex');\n  \n  const rateLimiter = RateLimiter.getInstance();\n  return rateLimiter.checkRateLimit(\n    `rsvp:${fingerprint}`,\n    5, // 5 requests\n    60 * 60 * 1000 // 1 hour\n  );\n}",
        "context": "Code snippet 6",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "typescript",
        "code": "// Complete middleware integration\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Add security headers\n  addSecurityHeaders(res);\n  \n  // Check admin route protection\n  const adminProtection = protectAdminRoutes(req);\n  if (adminProtection) {\n    return adminProtection;\n  }\n  \n  // Rate limiting for API routes\n  if (req.nextUrl.pathname.startsWith('/api/')) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    \n    const rateLimit = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimit.allowed) {\n      return NextResponse.json(\n        { error: 'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n  }\n  \n  // Visitor and session management\n  const url = req.nextUrl;\n  \n  // Visitor ID management\n  let vid = req.cookies.get('vid')?.value;\n  if (!vid) {\n    vid = crypto.randomUUID();\n    res.cookies.set('vid', vid, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n    });\n  }\n\n  // Session ID management\n  const now = Date.now();\n  let sid = req.cookies.get('sid')?.value;\n  const sidTs = Number(req.cookies.get('sid_ts')?.value || 0);\n  if (!sid || now - sidTs > SESSION_MS) {\n    sid = crypto.randomUUID();\n    res.cookies.set('sid', sid, { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }\n\n  // UTM parameter persistence\n  const sp = url.searchParams;\n  const utmKeys = [\n    'utm_source', 'utm_medium', 'utm_campaign', \n    'utm_term', 'utm_content', 'eid',\n    'gclid', 'fbclid', 'msclkid'\n  ];\n  \n  for (const k of utmKeys) {\n    const v = sp.get(k);\n    if (v) {\n      res.cookies.set(k, v, {\n        path: '/',\n        httpOnly: true,\n        sameSite: 'lax',\n        secure: true,\n        maxAge: 60 * 60 * 24 * 90, // 90 days\n      });\n    }\n  }\n\n  return res;\n}",
        "context": "Code snippet 7",
        "purpose": "Configuration or constant definition"
      },
      {
        "language": "code",
        "code": "**2. COOKIE MANAGEMENT UTILITIES**",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**3. VISITOR TRACKING**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**4. LINK TRACKING MIDDLEWARE**",
        "context": "Code snippet 3",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**5. SECURITY HEADERS MIDDLEWARE**",
        "context": "Code snippet 4",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**6. RATE LIMITING MIDDLEWARE**",
        "context": "Code snippet 5",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**7. MIDDLEWARE INTEGRATION**",
        "context": "Code snippet 6",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "1. MIDDLEWARE CONFIGURATION**\n```typescript\n// Next.js middleware configuration\n// middleware.ts\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';",
        "type": "step",
        "category": "general"
      },
      {
        "description": "2. COOKIE MANAGEMENT UTILITIES**\n```typescript\n// Cookie management utilities\n// src/lib/cookies.ts\nexport class CookieManager {\n  private static instance: CookieManager;\n  \n  static getInstance(): CookieManager {\n    if (!CookieManager.instance) {\n      CookieManager.instance = new CookieManager();\n    }\n    return CookieManager.instance;\n  }\n  \n  // Set cookie with security defaults\n  setCookie(\n    name: string,\n    value: string,\n    options: {\n      maxAge?: number;\n      httpOnly?: boolean;\n      secure?: boolean;\n      sameSite?: 'strict' | 'lax' | 'none';\n      path?: string;\n    } = {}\n  ) {\n    const defaults = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax' as const,\n      path: '/',\n      maxAge: 60 * 60 * 24 * 30 // 30 days\n    };\n    \n    const config = { ...defaults, ...options };\n    \n    return {\n      name,\n      value,\n      ...config\n    };\n  }\n  \n  // Get cookie value\n  getCookie(name: string, cookies: any): string | undefined {\n    return cookies.get(name)?.value;\n  }\n  \n  // Delete cookie\n  deleteCookie(name: string) {\n    return {\n      name,\n      value: '',\n      maxAge: 0,\n      path: '/'\n    };\n  }\n  \n  // Check if cookie exists\n  hasCookie(name: string, cookies: any): boolean {\n    return cookies.has(name);\n  }\n}",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "3. VISITOR TRACKING**\n```typescript\n// Visitor tracking and session management\n// src/lib/visitor-tracking.ts\nexport class VisitorTracker {\n  private static instance: VisitorTracker;\n  \n  static getInstance(): VisitorTracker {\n    if (!VisitorTracker.instance) {\n      VisitorTracker.instance = new VisitorTracker();\n    }\n    return VisitorTracker.instance;\n  }\n  \n  // Generate visitor ID\n  generateVisitorId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Generate session ID\n  generateSessionId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Check if session is expired\n  isSessionExpired(sessionTimestamp: number): boolean {\n    const now = Date.now();\n    const sessionAge = now - sessionTimestamp;\n    return sessionAge > SESSION_MS;\n  }\n  \n  // Get visitor fingerprint\n  getVisitorFingerprint(req: NextRequest): string {\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    const ip = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    const fingerprint = `${userAgent}-${acceptLanguage}-${acceptEncoding}-${ip}`;\n    return crypto.createHash('sha256').update(fingerprint).digest('hex');\n  }\n  \n  // Track page visit\n  async trackPageVisit(\n    req: NextRequest,\n    path: string,\n    query: string\n  ): Promise<void> {\n    try {\n      const visitorId = req.cookies.get('vid')?.value;\n      const sessionId = req.cookies.get('sid')?.value;\n      \n      if (!visitorId || !sessionId) {\n        return; // Skip tracking if no visitor/session ID\n      }\n      \n      const utmParams = UTMManager.getInstance().getUTMFromCookies(req.cookies);\n      const fingerprint = this.getVisitorFingerprint(req);\n      \n      await prisma.visit.create({\n        data: {\n          visitorId,\n          sessionId,\n          path,\n          query,\n          referrer: req.headers.get('referer'),\n          ...utmParams,\n          userAgent: req.headers.get('user-agent'),\n          language: req.headers.get('accept-language'),\n          country: req.headers.get('x-vercel-ip-country'),\n          region: req.headers.get('x-vercel-ip-country-region'),\n          city: req.headers.get('x-vercel-ip-city'),\n          ipHash: crypto.createHash('sha256').update(\n            req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n          ).digest('hex'),\n          meta: JSON.stringify({\n            fingerprint,\n            timestamp: new Date().toISOString()\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Visitor tracking error:', error);\n    }\n  }\n}\n```",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "4. LINK TRACKING MIDDLEWARE**\n```typescript\n// Link tracking for campaign attribution\n// src/app/api/l/route.ts\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });",
        "type": "step",
        "category": "retrieval"
      },
      {
        "description": "5. SECURITY HEADERS MIDDLEWARE**\n```typescript\n// Security headers middleware\n// src/lib/security-middleware.ts\nexport function addSecurityHeaders(res: NextResponse): NextResponse {\n  // Security headers\n  res.headers.set('X-Content-Type-Options', 'nosniff');\n  res.headers.set('X-Frame-Options', 'DENY');\n  res.headers.set('X-XSS-Protection', '1; mode=block');\n  res.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n  \n  // Content Security Policy\n  res.headers.set(\n    'Content-Security-Policy',\n    [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live\",\n      \"style-src 'self' 'unsafe-inline'\",\n      \"img-src 'self' data: https: blob:\",\n      \"font-src 'self' data:\",\n      \"connect-src 'self' https://api.lead-mine.vercel.app https://api.resend.com https://api.sendgrid.com\",\n      \"frame-src 'none'\",\n      \"object-src 'none'\",\n      \"base-uri 'self'\",\n      \"form-action 'self'\",\n      \"frame-ancestors 'none'\"\n    ].join('; ')\n  );\n  \n  return res;\n}",
        "type": "step",
        "category": "creation"
      },
      {
        "description": "6. RATE LIMITING MIDDLEWARE**\n```typescript\n// Rate limiting middleware\n// src/lib/rate-limiting.ts\nexport class RateLimiter {\n  private static instance: RateLimiter;\n  private limits: Map<string, { count: number; resetTime: number }> = new Map();\n  \n  static getInstance(): RateLimiter {\n    if (!RateLimiter.instance) {\n      RateLimiter.instance = new RateLimiter();\n    }\n    return RateLimiter.instance;\n  }\n  \n  // Check rate limit\n  checkRateLimit(\n    key: string,\n    maxRequests: number,\n    windowMs: number\n  ): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const limit = this.limits.get(key);\n    \n    if (!limit || now > limit.resetTime) {\n      // Create new limit\n      this.limits.set(key, {\n        count: 1,\n        resetTime: now + windowMs\n      });\n      \n      return {\n        allowed: true,\n        remaining: maxRequests - 1,\n        resetTime: now + windowMs\n      };\n    }\n    \n    if (limit.count >= maxRequests) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: limit.resetTime\n      };\n    }\n    \n    // Increment count\n    limit.count++;\n    this.limits.set(key, limit);\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - limit.count,\n      resetTime: limit.resetTime\n    };\n  }\n  \n  // Clean up expired limits\n  cleanupExpiredLimits(): void {\n    const now = Date.now();\n    for (const [key, limit] of this.limits) {\n      if (now > limit.resetTime) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "7. MIDDLEWARE INTEGRATION**\n```typescript\n// Complete middleware integration\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Add security headers\n  addSecurityHeaders(res);\n  \n  // Check admin route protection\n  const adminProtection = protectAdminRoutes(req);\n  if (adminProtection) {\n    return adminProtection;\n  }\n  \n  // Rate limiting for API routes\n  if (req.nextUrl.pathname.startsWith('/api/')) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    \n    const rateLimit = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimit.allowed) {\n      return NextResponse.json(\n        { error: 'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n  }\n  \n  // Visitor and session management\n  const url = req.nextUrl;\n  \n  // Visitor ID management\n  let vid = req.cookies.get('vid')?.value;\n  if (!vid) {\n    vid = crypto.randomUUID();\n    res.cookies.set('vid', vid, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n    });\n  }",
        "type": "step",
        "category": "validation"
      },
      {
        "description": "*\n\n**1. MIDDLEWARE CONFIGURATION**\n```typescript\n// Next.js middleware configuration\n// middleware.ts\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 1000; // 30 minutes",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 24 * 365 * 2, // 2 years\n    });\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 24 * 90, // 90 days\n      });\n    }\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Cookie management utilities\n// src/lib/cookies.ts\nexport class CookieManager {\n  private static instance: CookieManager;\n  \n  static getInstance(): CookieManager {\n    if (!CookieManager.instance) {\n      CookieManager.instance = new CookieManager();\n    }\n    return CookieManager.instance;\n  }\n  \n  // Set cookie with security defaults\n  setCookie(\n    name: string,\n    value: string,\n    options: {\n      maxAge?: number;\n      httpOnly?: boolean;\n      secure?: boolean;\n      sameSite?: 'strict' | 'lax' | 'none';\n      path?: string;\n    } = {}\n  ) {\n    const defaults = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax' as const,\n      path: '/',\n      maxAge: 60 * 60 * 24 * 30 // 30 days\n    };\n    \n    const config = { ...defaults, ...options };\n    \n    return {\n      name,\n      value,\n      ...config\n    };\n  }\n  \n  // Get cookie value\n  getCookie(name: string, cookies: any): string | undefined {\n    return cookies.get(name)?.value;\n  }\n  \n  // Delete cookie\n  deleteCookie(name: string) {\n    return {\n      name,\n      value: '',\n      maxAge: 0,\n      path: '/'\n    };\n  }\n  \n  // Check if cookie exists\n  hasCookie(name: string, cookies: any): boolean {\n    return cookies.has(name);\n  }\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Visitor tracking and session management\n// src/lib/visitor-tracking.ts\nexport class VisitorTracker {\n  private static instance: VisitorTracker;\n  \n  static getInstance(): VisitorTracker {\n    if (!VisitorTracker.instance) {\n      VisitorTracker.instance = new VisitorTracker();\n    }\n    return VisitorTracker.instance;\n  }\n  \n  // Generate visitor ID\n  generateVisitorId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Generate session ID\n  generateSessionId(): string {\n    return crypto.randomUUID();\n  }\n  \n  // Check if session is expired\n  isSessionExpired(sessionTimestamp: number): boolean {\n    const now = Date.now();\n    const sessionAge = now - sessionTimestamp;\n    return sessionAge > SESSION_MS;\n  }\n  \n  // Get visitor fingerprint\n  getVisitorFingerprint(req: NextRequest): string {\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    const ip = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    const fingerprint = `${userAgent}-${acceptLanguage}-${acceptEncoding}-${ip}`;\n    return crypto.createHash('sha256').update(fingerprint).digest('hex');\n  }\n  \n  // Track page visit\n  async trackPageVisit(\n    req: NextRequest,\n    path: string,\n    query: string\n  ): Promise<void> {\n    try {\n      const visitorId = req.cookies.get('vid')?.value;\n      const sessionId = req.cookies.get('sid')?.value;\n      \n      if (!visitorId || !sessionId) {\n        return; // Skip tracking if no visitor/session ID\n      }\n      \n      const utmParams = UTMManager.getInstance().getUTMFromCookies(req.cookies);\n      const fingerprint = this.getVisitorFingerprint(req);\n      \n      await prisma.visit.create({\n        data: {\n          visitorId,\n          sessionId,\n          path,\n          query,\n          referrer: req.headers.get('referer'),\n          ...utmParams,\n          userAgent: req.headers.get('user-agent'),\n          language: req.headers.get('accept-language'),\n          country: req.headers.get('x-vercel-ip-country'),\n          region: req.headers.get('x-vercel-ip-country-region'),\n          city: req.headers.get('x-vercel-ip-city'),\n          ipHash: crypto.createHash('sha256').update(\n            req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n          ).digest('hex'),\n          meta: JSON.stringify({\n            fingerprint,\n            timestamp: new Date().toISOString()\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Visitor tracking error:', error);\n    }\n  }\n}\n```",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n```typescript\n// Link tracking for campaign attribution\n// src/app/api/l/route.ts\nexport async function GET(req: Request) {\n  const url = new URL(req.url);\n  const to = url.searchParams.get('to');\n  if (!to) return NextResponse.json({ error: 'Missing \"to\" param' }, { status: 400 });",
        "type": "item",
        "category": "retrieval"
      },
      {
        "description": "*\n```typescript\n// Security headers middleware\n// src/lib/security-middleware.ts\nexport function addSecurityHeaders(res: NextResponse): NextResponse {\n  // Security headers\n  res.headers.set('X-Content-Type-Options', 'nosniff');\n  res.headers.set('X-Frame-Options', 'DENY');\n  res.headers.set('X-XSS-Protection', '1; mode=block');\n  res.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  res.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n  \n  // Content Security Policy\n  res.headers.set(\n    'Content-Security-Policy',\n    [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live\",\n      \"style-src 'self' 'unsafe-inline'\",\n      \"img-src 'self' data: https: blob:\",\n      \"font-src 'self' data:\",\n      \"connect-src 'self' https://api.lead-mine.vercel.app https://api.resend.com https://api.sendgrid.com\",\n      \"frame-src 'none'\",\n      \"object-src 'none'\",\n      \"base-uri 'self'\",\n      \"form-action 'self'\",\n      \"frame-ancestors 'none'\"\n    ].join('; ')\n  );\n  \n  return res;\n}",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n```typescript\n// Rate limiting middleware\n// src/lib/rate-limiting.ts\nexport class RateLimiter {\n  private static instance: RateLimiter;\n  private limits: Map<string, { count: number; resetTime: number }> = new Map();\n  \n  static getInstance(): RateLimiter {\n    if (!RateLimiter.instance) {\n      RateLimiter.instance = new RateLimiter();\n    }\n    return RateLimiter.instance;\n  }\n  \n  // Check rate limit\n  checkRateLimit(\n    key: string,\n    maxRequests: number,\n    windowMs: number\n  ): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const limit = this.limits.get(key);\n    \n    if (!limit || now > limit.resetTime) {\n      // Create new limit\n      this.limits.set(key, {\n        count: 1,\n        resetTime: now + windowMs\n      });\n      \n      return {\n        allowed: true,\n        remaining: maxRequests - 1,\n        resetTime: now + windowMs\n      };\n    }\n    \n    if (limit.count >= maxRequests) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: limit.resetTime\n      };\n    }\n    \n    // Increment count\n    limit.count++;\n    this.limits.set(key, limit);\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - limit.count,\n      resetTime: limit.resetTime\n    };\n  }\n  \n  // Clean up expired limits\n  cleanupExpiredLimits(): void {\n    const now = Date.now();\n    for (const [key, limit] of this.limits) {\n      if (now > limit.resetTime) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "* 60 * 1000 // 1 hour\n  );\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```typescript\n// Complete middleware integration\n// middleware.ts\nexport function middleware(req: NextRequest) {\n  const res = NextResponse.next();\n  \n  // Add security headers\n  addSecurityHeaders(res);\n  \n  // Check admin route protection\n  const adminProtection = protectAdminRoutes(req);\n  if (adminProtection) {\n    return adminProtection;\n  }\n  \n  // Rate limiting for API routes\n  if (req.nextUrl.pathname.startsWith('/api/')) {\n    const clientIP = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    \n    const rateLimit = checkRSVPRateLimit(clientIP, userAgent, acceptLanguage, acceptEncoding);\n    if (!rateLimit.allowed) {\n      return NextResponse.json(\n        { error: 'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n  }\n  \n  // Visitor and session management\n  const url = req.nextUrl;\n  \n  // Visitor ID management\n  let vid = req.cookies.get('vid')?.value;\n  if (!vid) {\n    vid = crypto.randomUUID();\n    res.cookies.set('vid', vid, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n    });\n  }",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "* 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* 60 * 24 * 90, // 90 days\n      });\n    }\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- sidTs > SESSION_MS) {\n    sid = crypto.randomUUID();\n    res.cookies.set('sid', sid, { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- sessionTimestamp;\n    return sessionAge > SESSION_MS;\n  }\n  \n  // Get visitor fingerprint\n  getVisitorFingerprint(req: NextRequest): string {\n    const userAgent = req.headers.get('user-agent') || '';\n    const acceptLanguage = req.headers.get('accept-language') || '';\n    const acceptEncoding = req.headers.get('accept-encoding') || '';\n    const ip = req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown';\n    \n    const fingerprint = `${userAgent}-${acceptLanguage}-${acceptEncoding}-${ip}`;\n    return crypto.createHash('sha256').update(fingerprint).digest('hex');\n  }\n  \n  // Track page visit\n  async trackPageVisit(\n    req: NextRequest,\n    path: string,\n    query: string\n  ): Promise<void> {\n    try {\n      const visitorId = req.cookies.get('vid')?.value;\n      const sessionId = req.cookies.get('sid')?.value;\n      \n      if (!visitorId || !sessionId) {\n        return; // Skip tracking if no visitor/session ID\n      }\n      \n      const utmParams = UTMManager.getInstance().getUTMFromCookies(req.cookies);\n      const fingerprint = this.getVisitorFingerprint(req);\n      \n      await prisma.visit.create({\n        data: {\n          visitorId,\n          sessionId,\n          path,\n          query,\n          referrer: req.headers.get('referer'),\n          ...utmParams,\n          userAgent: req.headers.get('user-agent'),\n          language: req.headers.get('accept-language'),\n          country: req.headers.get('x-vercel-ip-country'),\n          region: req.headers.get('x-vercel-ip-country-region'),\n          city: req.headers.get('x-vercel-ip-city'),\n          ipHash: crypto.createHash('sha256').update(\n            req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || 'unknown'\n          ).digest('hex'),\n          meta: JSON.stringify({\n            fingerprint,\n            timestamp: new Date().toISOString()\n          })\n        }\n      });\n    } catch (error) {\n      console.error('Visitor tracking error:', error);\n    }\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- 1,\n        resetTime: now + windowMs\n      };\n    }\n    \n    if (limit.count >= maxRequests) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: limit.resetTime\n      };\n    }\n    \n    // Increment count\n    limit.count++;\n    this.limits.set(key, limit);\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - limit.count,\n      resetTime: limit.resetTime\n    };\n  }\n  \n  // Clean up expired limits\n  cleanupExpiredLimits(): void {\n    const now = Date.now();\n    for (const [key, limit] of this.limits) {\n      if (now > limit.resetTime) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "- sidTs > SESSION_MS) {\n    sid = crypto.randomUUID();\n    res.cookies.set('sid', sid, { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  } else {\n    res.cookies.set('sid_ts', String(now), { \n      path: '/', \n      httpOnly: true, \n      sameSite: 'lax', \n      secure: true, \n      maxAge: 60 * 60 * 24 \n    });\n  }",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Admin Authentication",
      "Security Features",
      "Analytics & Tracking"
    ],
    "usage_examples": [],
    "troubleshooting": [
      "', error);\n    }\n  }\n}\n```",
      "'Missing \"to\" param' }, { status: 400 });",
      "'Rate limit exceeded' },\n        { status: 429 }\n      );\n    }\n  }\n  \n  // Visitor and session management\n  const url = req.nextUrl;\n  \n  // Visitor ID management\n  let vid = req.cookies.get('vid')?.value;\n  if (!vid) {\n    vid = crypto.randomUUID();\n    res.cookies.set('vid', vid, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: true,\n      maxAge: 60 * 60 * 24 * 365 * 2, // 2 years\n    });\n  }"
    ],
    "related_apis": [
      "/api/l/route.ts",
      "/api/l',",
      "/api/'))"
    ],
    "related_components": [
      "middleware.ts",
      "cookies.ts",
      "tracking.ts",
      "route.ts",
      "limiting.ts",
      "Next.js",
      "NextResponse.js",
      "src/lib/cookies.ts",
      "src/lib/visitor-tracking.ts",
      "src/app/api/l/route.ts",
      "src/lib/security-middleware.ts",
      "src/lib/rate-limiting.ts"
    ],
    "tags": [
      "prisma",
      "weaviate",
      "middleware-features",
      "analytics",
      "typescript",
      "authentication",
      "resend",
      "nextjs",
      "security",
      "sendgrid"
    ],
    "complexity_level": "advanced",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "03-campaign-updates-accurate_1",
    "category": "Campaign Management",
    "subcategory": "Campaign Updates",
    "title": "Update campaign name",
    "description": "Update campaign name - Change the name of campaign-123 to 'Updated Tech Conference Campaign'",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"name\": \"Updated Tech Conference Campaign\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Updated Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `id` (required) - Campaign ID to update\n- `name` (optional) - New campaign name\n- `description` (optional) - New description\n- `status` (optional) - New status\n- `steps` (optional) - Updated campaign steps",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- If `id` is missing: \"Campaign id is required\"\n- If campaign not found: 404 error\n- If invalid data: 400 with validation error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "* Only provided fields are updated. Other fields remain unchanged.",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `id` (required) - Campaign ID to update",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `name` (optional) - New campaign name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `description` (optional) - New description",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `status` (optional) - New status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `steps` (optional) - Updated campaign steps",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- If `id` is missing: \"Campaign id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If campaign not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid data: 400 with validation error",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "zod",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "03-campaign-updates-accurate_3",
    "category": "Campaign Management",
    "subcategory": "Campaign Updates",
    "title": "Update campaign status",
    "description": "Update campaign status - Change campaign-123 status to SCHEDULED",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"status\": \"SCHEDULED\"\n}\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"SCHEDULED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `DRAFT` - Not yet ready to send\n- `SCHEDULED` - Scheduled for future send\n- `SENDING` - Currently being sent\n- `PAUSED` - Temporarily paused\n- `COMPLETED` - Finished sending\n- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- **DRAFT → SCHEDULED**: Campaign is ready to send at scheduled time\n- **SCHEDULED → SENDING**: Campaign is actively being sent\n- **SENDING → PAUSED**: Campaign is temporarily stopped\n- **PAUSED → SENDING**: Campaign resumes sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- Campaign must have valid steps\n- Steps must have templateId and groupId\n- Send times must be in the future",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `DRAFT` - Not yet ready to send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SCHEDULED` - Scheduled for future send",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `SENDING` - Currently being sent",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `PAUSED` - Temporarily paused",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `COMPLETED` - Finished sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `CANCELLED` - Cancelled",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- **DRAFT → SCHEDULED**: Campaign is ready to send at scheduled time",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **SCHEDULED → SENDING**: Campaign is actively being sent",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **SENDING → PAUSED**: Campaign is temporarily stopped",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- **PAUSED → SENDING**: Campaign resumes sending",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Campaign must have valid steps",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Steps must have templateId and groupId",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Send times must be in the future",
        "type": "item",
        "category": "transmission"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "resend",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "03-campaign-updates-accurate_5",
    "category": "Campaign Management",
    "subcategory": "Campaign Updates",
    "title": "Update campaign steps",
    "description": "Update campaign steps - Add a new step to campaign-123 with template-456 and group-789",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Step Configuration:**\n- `templateId` (required) - Email template to use\n- `groupId` (required) - Audience group to send to\n- `sendAt` (optional) - When to send (ISO date string)\n- `stepOrder` (optional) - Order of execution\n- `throttlePerMinute` (optional) - Email sending rate\n- `timeZone` (optional) - Timezone for scheduling\n\n**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "123. Here's the accurate API call:",
        "type": "step",
        "category": "general"
      },
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"steps\": [\n    {\n      \"templateId\": \"template-456\",\n      \"groupId\": \"group-789\",\n      \"sendAt\": \"2025-02-01T10:00:00Z\",\n      \"stepOrder\": 1,\n      \"throttlePerMinute\": 60,\n      \"timeZone\": \"America/Vancouver\"\n    }\n  ]\n}\n```",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- `templateId` (required) - Email template to use\n- `groupId` (required) - Audience group to send to\n- `sendAt` (optional) - When to send (ISO date string)\n- `stepOrder` (optional) - Order of execution\n- `throttlePerMinute` (optional) - Email sending rate\n- `timeZone` (optional) - Timezone for scheduling",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Email campaign for tech conference attendees\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": [\n      {\n        \"id\": \"schedule-456\",\n        \"name\": \"Tech Conference Step 1\",\n        \"templateId\": \"template-456\",\n        \"groupId\": \"group-789\",\n        \"status\": \"DRAFT\",\n        \"sendAt\": \"2025-02-01T10:00:00Z\",\n        \"timeZone\": \"America/Vancouver\",\n        \"throttlePerMinute\": 60,\n        \"stepOrder\": 1\n      }\n    ]\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `templateId` must exist in the system\n- `groupId` must exist in the system\n- `sendAt` must be a valid ISO date string\n- `stepOrder` must be a positive number",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "*\n- If templateId missing: \"Each step requires templateId and groupId\"\n- If groupId missing: \"Each step requires templateId and groupId\"\n- If invalid sendAt: Date parsing error\n- If invalid steps: \"Invalid steps payload\"",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `templateId` (required) - Email template to use",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `groupId` (required) - Audience group to send to",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `sendAt` (optional) - When to send (ISO date string)",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `stepOrder` (optional) - Order of execution",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `throttlePerMinute` (optional) - Email sending rate",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `timeZone` (optional) - Timezone for scheduling",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `templateId` must exist in the system",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `groupId` must exist in the system",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `sendAt` must be a valid ISO date string",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- `stepOrder` must be a positive number",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If templateId missing: \"Each step requires templateId and groupId\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If groupId missing: \"Each step requires templateId and groupId\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid sendAt: Date parsing error",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- If invalid steps: \"Invalid steps payload\"",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "zod",
      "resend",
      "security",
      "sendgrid"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "03-campaign-updates-accurate_7",
    "category": "Campaign Management",
    "subcategory": "Campaign Updates",
    "title": "Update campaign description",
    "description": "Update campaign description - Update campaign-123 description to 'Updated description for tech conference'",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"description\": \"Updated description for tech conference\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Tech Conference Campaign\",\n    \"description\": \"Updated description for tech conference\",\n    \"status\": \"DRAFT\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `description` (optional) - Campaign description\n- Can be null to remove description\n- Can be empty string\n- Maximum length depends on database constraints",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "*\n- Only the description field is updated\n- Other fields remain unchanged\n- `updatedAt` timestamp is automatically updated\n- Campaign ID and name remain the same",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- If `id` is missing: \"Campaign id is required\"\n- If campaign not found: 404 error\n- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- Keep descriptions concise but informative\n- Include key details about the campaign purpose\n- Use consistent formatting across campaigns\n- Include relevant tags or keywords",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `description` (optional) - Campaign description",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Can be null to remove description",
        "type": "item",
        "category": "deletion"
      },
      {
        "description": "- Can be empty string",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Maximum length depends on database constraints",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Only the description field is updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Other fields remain unchanged",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `updatedAt` timestamp is automatically updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Campaign ID and name remain the same",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If `id` is missing: \"Campaign id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If campaign not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid JSON: \"Invalid JSON body\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Keep descriptions concise but informative",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Include key details about the campaign purpose",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Use consistent formatting across campaigns",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- Include relevant tags or keywords",
        "type": "item",
        "category": "general"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "d",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "prisma",
      "typescript"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation"
    }
  },
  {
    "id": "03-campaign-updates-accurate_9",
    "category": "Campaign Management",
    "subcategory": "Campaign Updates",
    "title": "Update multiple campaign fields",
    "description": "Update multiple campaign fields - Update campaign-123 name, description, and status all at once",
    "code_snippets": [
      {
        "language": "code",
        "code": "PUT /api/admin/campaign/campaigns",
        "context": "Code snippet 1",
        "purpose": "General code implementation"
      },
      {
        "language": "code",
        "code": "**Response:**",
        "context": "Code snippet 2",
        "purpose": "General code implementation"
      }
    ],
    "processes": [
      {
        "description": "*\n```\nPUT /api/admin/campaign/campaigns\n```",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n```json\n{\n  \"id\": \"campaign-123\",\n  \"name\": \"Updated Tech Conference Campaign\",\n  \"description\": \"Updated description for tech conference\",\n  \"status\": \"SCHEDULED\"\n}\n```",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n```json\n{\n  \"campaign\": {\n    \"id\": \"campaign-123\",\n    \"name\": \"Updated Tech Conference Campaign\",\n    \"description\": \"Updated description for tech conference\",\n    \"status\": \"SCHEDULED\",\n    \"meta\": {},\n    \"createdAt\": \"2025-01-15T10:00:00Z\",\n    \"updatedAt\": \"2025-01-15T11:30:00Z\",\n    \"schedules\": []\n  }\n}\n```",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "*\n- `name` (string) - Campaign name\n- `description` (string or null) - Campaign description\n- `status` (CampaignStatus) - Campaign status\n- `steps` (array) - Campaign steps",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- All provided fields are updated in a single transaction\n- Fields not provided remain unchanged\n- `updatedAt` timestamp is automatically updated\n- Campaign ID cannot be changed",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "*\n- Must be one of: DRAFT, SCHEDULED, SENDING, PAUSED, COMPLETED, CANCELLED\n- Status changes are validated for business logic\n- Some status changes may require additional validation",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "*\n- If `id` is missing: \"Campaign id is required\"\n- If invalid status: Validation error\n- If invalid steps: \"Invalid steps payload\"\n- If campaign not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "*\n- All fields are updated together\n- If any field fails validation, entire update fails\n- No partial updates are applied",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `name` (string) - Campaign name",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `description` (string or null) - Campaign description",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `status` (CampaignStatus) - Campaign status",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- `steps` (array) - Campaign steps",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- All provided fields are updated in a single transaction",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Fields not provided remain unchanged",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- `updatedAt` timestamp is automatically updated",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Campaign ID cannot be changed",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- Must be one of: DRAFT, SCHEDULED, SENDING, PAUSED, COMPLETED, CANCELLED",
        "type": "item",
        "category": "transmission"
      },
      {
        "description": "- Status changes are validated for business logic",
        "type": "item",
        "category": "validation"
      },
      {
        "description": "- Some status changes may require additional validation",
        "type": "item",
        "category": "creation"
      },
      {
        "description": "- If `id` is missing: \"Campaign id is required\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid status: Validation error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If invalid steps: \"Invalid steps payload\"",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- If campaign not found: 404 error",
        "type": "item",
        "category": "general"
      },
      {
        "description": "- All fields are updated together",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- If any field fails validation, entire update fails",
        "type": "item",
        "category": "modification"
      },
      {
        "description": "- No partial updates are applied",
        "type": "item",
        "category": "modification"
      }
    ],
    "interconnections": [
      "Email Template Management",
      "Email Sending System",
      "Audience Management"
    ],
    "usage_examples": [],
    "troubleshooting": [],
    "related_apis": [
      "/api/admin/campaign/campaigns",
      "PUT /api/admin/campaign/campaigns"
    ],
    "related_components": [],
    "tags": [
      "campaign-management",
      "zod",
      "security",
      "resend"
    ],
    "complexity_level": "intermediate",
    "evergreen_brand_context": {
      "company": "Evergreen Web Solutions",
      "owner": "Gabriel Lacroix",
      "location": "Terrace, BC, Canada",
      "business_focus": "AI automation and web solutions for Northern BC businesses",
      "target_audience": "Northern BC businesses",
      "services": [
        "AI implementation",
        "Web development",
        "Business automation"
      ],
      "event_context": "AI in Northern BC: Information Session",
      "venue": "Sunshine Inn Terrace — Jasmine Room",
      "event_date": "October 23, 2025",
      "technology_focus": "AI and automation",
      "target_market": "Businesses"
    }
  }
]