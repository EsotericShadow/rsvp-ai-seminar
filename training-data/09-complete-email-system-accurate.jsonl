{"instruction": "How does the complete email system work?", "input": "Explain the email system with Resend, SendGrid, and ImprovMX", "output": "I'll explain the complete email system in your RSVP application. Here's how all three email services work together:\n\n**COMPLETE EMAIL SYSTEM ARCHITECTURE**\n\n**1. EMAIL PROVIDERS OVERVIEW**\n\n**Resend (Campaign Emails):**\n- **Purpose**: Outbound marketing campaigns\n- **Use Case**: Sending campaign emails to business audiences\n- **Features**: Template rendering, tracking, analytics\n- **From Address**: `gabriel@evergreenwebsolutions.ca`\n\n**SendGrid (Transactional Emails):**\n- **Purpose**: RSVP confirmation emails\n- **Use Case**: Automated responses to user actions\n- **Features**: Event confirmations, reminders, notifications\n- **From Address**: `events@evergreenwebsolutions.ca`\n\n**ImprovMX (Email Receiving):**\n- **Purpose**: Receive emails at custom domains\n- **Use Case**: Handle replies, bounces, unsubscribes\n- **Features**: Email forwarding, domain management\n- **Configuration**: MX records for `evergreenwebsolutions.ca`\n\n**2. RESEND CAMPAIGN SYSTEM**\n\n**Configuration:**\n```javascript\n// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';\nconst linkBase = process.env.CAMPAIGN_LINK_BASE?.replace(/\\/$/, '') || 'https://rsvp.evergreenwebsolutions.ca';\n\n// Resend client\nconst resend = new Resend(resendKey);\n```\n\n**Email Sending Process:**\n```javascript\n// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get campaign data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  // Send via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: processedSubject,\n    html: html,\n    text: text\n  });\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date()\n    }\n  });\n}\n```\n\n**3. SENDGRID TRANSACTIONAL SYSTEM**\n\n**Configuration:**\n```javascript\n// In sendgrid-email.ts\nimport sgMail from '@sendgrid/mail';\n\n// Initialize SendGrid\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\n// Email configuration\nconst EMAIL_CONFIG = {\n  from: process.env.FROM_EMAIL || 'AI Events <events@evergreenwebsolutions.ca>',\n  replyTo: process.env.REPLY_TO_EMAIL || 'gabriel@evergreenwebsolutions.ca',\n  domain: process.env.SENDGRID_DOMAIN || 'evergreenwebsolutions.ca'\n};\n```\n\n**RSVP Confirmation Email:**\n```javascript\n// Send RSVP confirmation email\nexport async function sendRSVPConfirmation({ to, name, rsvpId }) {\n  const msg = {\n    to: [to],\n    from: {\n      email: 'events@evergreenwebsolutions.ca',\n      name: 'AI Events'\n    },\n    replyTo: 'gabriel@evergreenwebsolutions.ca',\n    subject: `RSVP Confirmed: AI in Northern BC - October 23, 2025`,\n    html: generateRSVPConfirmationHTML(name, eventDetails),\n    text: generateRSVPConfirmationText(name, eventDetails),\n    headers: {\n      'List-Unsubscribe': '<mailto:unsubscribe@evergreenwebsolutions.ca>',\n      'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n      'X-Campaign-ID': 'ai-event-2025',\n      'X-RSVP-ID': rsvpId,\n      'X-Mailer': 'Evergreen Web Solutions RSVP System'\n    },\n    categories: ['rsvp-confirmation', 'ai-event-2025'],\n    customArgs: {\n      rsvp_id: rsvpId,\n      event_type: 'rsvp-confirmation'\n    }\n  };\n  \n  const response = await sgMail.send(msg);\n  return { \n    success: true, \n    messageId: response[0].headers['x-message-id'] as string\n  };\n}\n```\n\n**4. IMPROVMX EMAIL RECEIVING**\n\n**Configuration:**\n- **Domain**: `evergreenwebsolutions.ca`\n- **MX Records**: Point to ImprovMX servers\n- **Purpose**: Receive replies, bounces, unsubscribes\n- **Forwarding**: Emails forwarded to your personal inbox\n\n**Use Cases:**\n- **Reply Handling**: Process replies to campaign emails\n- **Bounce Management**: Handle bounced emails\n- **Unsubscribe Processing**: Process unsubscribe requests\n- **Support Inquiries**: Handle support emails\n\n**5. EMAIL WORKFLOW INTEGRATION**\n\n**Campaign Email Flow:**\n```\n1. User submits RSVP\n2. SendGrid sends confirmation email\n3. Resend sends campaign emails to audience\n4. ImprovMX receives replies/bounces\n5. System processes responses\n```\n\n**Email Processing Pipeline:**\n```javascript\n// RSVP submission triggers both systems\nconst emailResult = await sendRSVPConfirmation({\n  to: values.email,\n  name: fullName,\n  rsvpId: rsvp.id\n});\n\n// Campaign emails sent via Resend\nconst campaignResult = await sendCampaignEmail(jobId);\n\n// Replies handled via ImprovMX\n// (Configured at domain level)\n```\n\n**6. EMAIL TRACKING & ANALYTICS**\n\n**Resend Tracking:**\n- **Open Tracking**: Pixel tracking in emails\n- **Click Tracking**: Link tracking with UTM parameters\n- **Delivery Status**: Real-time delivery status\n- **Bounce Handling**: Automatic bounce processing\n\n**SendGrid Tracking:**\n- **Webhook Events**: Bounce, open, click, spam reports\n- **Event Processing**: Real-time event handling\n- **Suppression Lists**: Automatic bounce suppression\n- **Engagement Metrics**: Open and click rates\n\n**ImprovMX Integration:**\n- **Reply Processing**: Handle incoming replies\n- **Bounce Forwarding**: Forward bounces to system\n- **Unsubscribe Handling**: Process unsubscribe requests\n- **Support Routing**: Route support emails\n\n**7. EMAIL SECURITY & COMPLIANCE**\n\n**Security Headers:**\n```javascript\n// In security-headers.ts\n'connect-src': [\n  \"'self'\", \n  \"https://api.lead-mine.vercel.app\", \n  \"https://api.resend.com\", \n  \"https://api.sendgrid.com\"\n]\n```\n\n**Compliance Features:**\n- **Unsubscribe Links**: Required in all emails\n- **Privacy Policy**: Linked in email footers\n- **Data Protection**: GDPR/CCPA compliance\n- **Audit Trails**: Complete email logging\n\n**8. EMAIL MONITORING & MAINTENANCE**\n\n**Health Checks:**\n```javascript\n// Test Resend configuration\nexport async function testResendConfiguration() {\n  try {\n    const response = await resend.emails.send({\n      from: 'test@evergreenwebsolutions.ca',\n      to: ['test@example.com'],\n      subject: 'Test Email',\n      html: '<p>Test email</p>'\n    });\n    return response.data?.id ? true : false;\n  } catch (error) {\n    console.error('Resend test failed:', error);\n    return false;\n  }\n}\n\n// Test SendGrid configuration\nexport async function testSendGridConfiguration() {\n  try {\n    const msg = {\n      to: 'test@example.com',\n      from: {\n        email: 'events@evergreenwebsolutions.ca',\n        name: 'AI Events'\n      },\n      subject: 'Test Email Configuration',\n      html: '<p>This is a test email to verify SendGrid configuration.</p>'\n    };\n    await sgMail.send(msg);\n    return true;\n  } catch (error) {\n    console.error('SendGrid test failed:', error);\n    return false;\n  }\n}\n```\n\n**9. EMAIL SYSTEM TROUBLESHOOTING**\n\n**Common Issues:**\n- **Resend API Errors**: Check API key, rate limits\n- **SendGrid Delivery Issues**: Verify domain authentication\n- **ImprovMX Setup**: Check MX records, forwarding rules\n- **Template Rendering**: Validate HTML, test variables\n- **Tracking Issues**: Check pixel placement, link formatting\n\n**Debugging Steps:**\n1. **Check API Keys**: Verify all API keys are configured\n2. **Test Email Sending**: Send test emails to verify functionality\n3. **Review Logs**: Check error logs for specific issues\n4. **Validate Templates**: Test template rendering\n5. **Check DNS**: Verify MX records for ImprovMX\n6. **Monitor Metrics**: Check delivery rates and engagement\n\n**10. EMAIL SYSTEM OPTIMIZATION**\n\n**Performance Tips:**\n- **Batch Processing**: Send emails in batches\n- **Rate Limiting**: Respect provider rate limits\n- **Template Caching**: Cache rendered templates\n- **Database Optimization**: Index email-related tables\n- **Error Handling**: Implement retry logic\n\n**Best Practices:**\n- **Consistent Branding**: Use global template system\n- **Personalization**: Use dynamic variables\n- **Testing**: Test all email types before sending\n- **Monitoring**: Track delivery and engagement metrics\n- **Compliance**: Follow email regulations and best practices\n\nThis integrated email system provides comprehensive email functionality for your RSVP application, handling both outbound campaigns and transactional emails while maintaining proper tracking and compliance."}

{"instruction": "How do I configure email receiving with ImprovMX?", "input": "Set up email receiving for replies and bounces", "output": "I'll help you configure email receiving with ImprovMX for handling replies, bounces, and unsubscribes. Here's the complete setup:\n\n**IMPROVMX EMAIL RECEIVING CONFIGURATION**\n\n**1. IMPROVMX SETUP**\n\n**Domain Configuration:**\n- **Domain**: `evergreenwebsolutions.ca`\n- **Service**: ImprovMX (improvmx.com)\n- **Purpose**: Receive emails at custom addresses\n- **Forwarding**: Forward to your personal inbox\n\n**MX Records Setup:**\n```\n# DNS Configuration for evergreenwebsolutions.ca\nType: MX\nPriority: 10\nValue: mx1.improvmx.com\n\nType: MX\nPriority: 20\nValue: mx2.improvmx.com\n```\n\n**2. EMAIL ADDRESSES CONFIGURATION**\n\n**Campaign Email Addresses:**\n- **From Address**: `gabriel@evergreenwebsolutions.ca`\n- **Reply-To**: `gabriel@evergreenwebsolutions.ca`\n- **Bounce Address**: `bounces@evergreenwebsolutions.ca`\n- **Unsubscribe**: `unsubscribe@evergreenwebsolutions.ca`\n\n**Transactional Email Addresses:**\n- **From Address**: `events@evergreenwebsolutions.ca`\n- **Reply-To**: `gabriel@evergreenwebsolutions.ca`\n- **Support**: `support@evergreenwebsolutions.ca`\n- **Admin**: `admin@evergreenwebsolutions.ca`\n\n**3. IMPROVMX FORWARDING RULES**\n\n**Basic Forwarding:**\n```\n# Forward all emails to your personal inbox\ngabriel@evergreenwebsolutions.ca → your-personal-email@gmail.com\nevents@evergreenwebsolutions.ca → your-personal-email@gmail.com\nsupport@evergreenwebsolutions.ca → your-personal-email@gmail.com\n```\n\n**Advanced Forwarding Rules:**\n```\n# Bounce handling\nbounces@evergreenwebsolutions.ca → bounce-processor@evergreenwebsolutions.ca\n\n# Unsubscribe handling\nunsubscribe@evergreenwebsolutions.ca → unsubscribe-processor@evergreenwebsolutions.ca\n\n# Support routing\nsupport@evergreenwebsolutions.ca → support-system@evergreenwebsolutions.ca\n```\n\n**4. EMAIL PROCESSING INTEGRATION**\n\n**Webhook Configuration:**\n```javascript\n// In your application\nconst IMPROVMX_WEBHOOK_URL = 'https://rsvp.evergreenwebsolutions.ca/api/webhooks/improvmx';\n\n// ImprovMX webhook endpoint\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    \n    // Process incoming email\n    const { from, to, subject, body: emailBody, headers } = body;\n    \n    // Determine email type\n    if (to.includes('bounces@')) {\n      await handleBounceEmail({ from, subject, emailBody });\n    } else if (to.includes('unsubscribe@')) {\n      await handleUnsubscribeEmail({ from, subject, emailBody });\n    } else if (to.includes('support@')) {\n      await handleSupportEmail({ from, subject, emailBody });\n    } else {\n      await handleReplyEmail({ from, subject, emailBody });\n    }\n    \n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('ImprovMX webhook error:', error);\n    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 });\n  }\n}\n```\n\n**5. BOUNCE EMAIL HANDLING**\n\n**Bounce Processing:**\n```javascript\n// Handle bounced emails\nexport async function handleBounceEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original recipient from bounce email\n    const recipientMatch = emailBody.match(/Original-Recipient: (.+)/i);\n    const recipient = recipientMatch ? recipientMatch[1] : null;\n    \n    if (recipient) {\n      // Update database to mark email as bounced\n      await prisma.audienceMember.updateMany({\n        where: { primaryEmail: recipient },\n        data: { \n          unsubscribed: true,\n          meta: {\n            ...existingMeta,\n            bounceReason: 'Hard bounce',\n            bouncedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Log bounce event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'bounce',\n          meta: {\n            recipient,\n            bounceType: 'hard',\n            bounceReason: subject,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Bounce processing failed:', error);\n  }\n}\n```\n\n**6. UNSUBSCRIBE EMAIL HANDLING**\n\n**Unsubscribe Processing:**\n```javascript\n// Handle unsubscribe emails\nexport async function handleUnsubscribeEmail({ from, subject, emailBody }) {\n  try {\n    // Extract email address from unsubscribe request\n    const emailMatch = from.match(/<(.+)>/);\n    const email = emailMatch ? emailMatch[1] : from;\n    \n    // Update database to mark as unsubscribed\n    await prisma.audienceMember.updateMany({\n      where: { primaryEmail: email },\n      data: { \n        unsubscribed: true,\n        meta: {\n          ...existingMeta,\n          unsubscribedAt: new Date().toISOString(),\n          unsubscribeMethod: 'email'\n        }\n      }\n    });\n    \n    // Log unsubscribe event\n    await prisma.emailEvent.create({\n      data: {\n        type: 'unsubscribe',\n        meta: {\n          email,\n          unsubscribeMethod: 'email',\n          processedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send confirmation email\n    await sendUnsubscribeConfirmation(email);\n  } catch (error) {\n    console.error('Unsubscribe processing failed:', error);\n  }\n}\n```\n\n**7. REPLY EMAIL HANDLING**\n\n**Reply Processing:**\n```javascript\n// Handle reply emails\nexport async function handleReplyEmail({ from, subject, emailBody }) {\n  try {\n    // Extract original campaign info from subject\n    const campaignMatch = subject.match(/Re: (.+)/i);\n    const originalSubject = campaignMatch ? campaignMatch[1] : subject;\n    \n    // Find corresponding campaign send\n    const campaignSend = await prisma.campaignSend.findFirst({\n      where: {\n        email: from,\n        meta: {\n          path: ['template', 'subject'],\n          equals: originalSubject\n        }\n      },\n      include: { schedule: { include: { campaign: true } } }\n    });\n    \n    if (campaignSend) {\n      // Log reply event\n      await prisma.emailEvent.create({\n        data: {\n          type: 'reply',\n          meta: {\n            campaignId: campaignSend.schedule.campaignId,\n            scheduleId: campaignSend.scheduleId,\n            businessId: campaignSend.businessId,\n            replyContent: emailBody,\n            processedAt: new Date().toISOString()\n          }\n        }\n      });\n      \n      // Send to LeadMine\n      await postLeadMineEvent({\n        token: campaignSend.inviteToken,\n        businessId: campaignSend.businessId,\n        type: 'email_reply',\n        meta: {\n          campaignId: campaignSend.schedule.campaignId,\n          replyContent: emailBody,\n          repliedAt: new Date().toISOString()\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Reply processing failed:', error);\n  }\n}\n```\n\n**8. SUPPORT EMAIL HANDLING**\n\n**Support Email Processing:**\n```javascript\n// Handle support emails\nexport async function handleSupportEmail({ from, subject, emailBody }) {\n  try {\n    // Create support ticket\n    const ticket = await prisma.supportTicket.create({\n      data: {\n        email: from,\n        subject: subject,\n        content: emailBody,\n        status: 'open',\n        priority: 'normal',\n        meta: {\n          source: 'email',\n          receivedAt: new Date().toISOString()\n        }\n      }\n    });\n    \n    // Send auto-reply\n    await sendSupportAutoReply(from, ticket.id);\n    \n    // Notify admin\n    await notifyAdminOfNewTicket(ticket);\n  } catch (error) {\n    console.error('Support email processing failed:', error);\n  }\n}\n```\n\n**9. EMAIL ADDRESS VALIDATION**\n\n**Validation Rules:**\n```javascript\n// Validate email addresses before processing\nexport function validateIncomingEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email) && email.length <= 254;\n}\n\n// Check if email is from allowed domain\nexport function isAllowedDomain(email: string): boolean {\n  const allowedDomains = [\n    'evergreenwebsolutions.ca',\n    'gmail.com',\n    'outlook.com',\n    'yahoo.com'\n  ];\n  \n  const domain = email.split('@')[1];\n  return allowedDomains.includes(domain?.toLowerCase());\n}\n```\n\n**10. MONITORING & MAINTENANCE**\n\n**Health Checks:**\n```javascript\n// Check ImprovMX configuration\nexport async function checkImprovMXConfiguration(): Promise<boolean> {\n  try {\n    // Test MX records\n    const mxRecords = await dns.resolveMx('evergreenwebsolutions.ca');\n    const hasImprovMX = mxRecords.some(record => \n      record.exchange.includes('improvmx.com')\n    );\n    \n    if (!hasImprovMX) {\n      console.error('ImprovMX MX records not found');\n      return false;\n    }\n    \n    // Test webhook endpoint\n    const response = await fetch('/api/webhooks/improvmx', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ test: true })\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('ImprovMX configuration check failed:', error);\n    return false;\n  }\n}\n```\n\n**11. EMAIL SYSTEM INTEGRATION**\n\n**Complete Email Flow:**\n```\n1. Resend sends campaign email\n2. User replies to gabriel@evergreenwebsolutions.ca\n3. ImprovMX receives reply\n4. Webhook processes reply\n5. System logs engagement\n6. LeadMine receives event\n7. Admin gets notification\n```\n\n**Database Schema Updates:**\n```sql\n-- Add support for incoming emails\nCREATE TABLE SupportTicket (\n  id TEXT PRIMARY KEY,\n  email TEXT NOT NULL,\n  subject TEXT NOT NULL,\n  content TEXT NOT NULL,\n  status TEXT DEFAULT 'open',\n  priority TEXT DEFAULT 'normal',\n  meta JSONB,\n  createdAt TIMESTAMP DEFAULT NOW(),\n  updatedAt TIMESTAMP DEFAULT NOW()\n);\n\n-- Add email processing events\nALTER TABLE EmailEvent ADD COLUMN processedAt TIMESTAMP;\nALTER TABLE EmailEvent ADD COLUMN emailType TEXT;\n```\n\nThis ImprovMX integration provides complete email receiving functionality for your RSVP system, handling replies, bounces, unsubscribes, and support inquiries automatically."}

