{"instruction": "How does form validation work?", "input": "Explain Zod schemas and input sanitization", "output": "I'll explain the complete form validation system. Here's how Zod schemas and input sanitization work:\n\n**FORM VALIDATION SYSTEM**\n\n**1. INPUT SANITIZATION**\n```typescript\n// Input sanitization to prevent XSS attacks\n// src/lib/validators.ts\nfunction sanitizeString(input: string): string {\n  return input\n    .replace(/[<>\"'&]/g, (match) => {\n      const escapeMap: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '&': '&amp;'\n      };\n      return escapeMap[match];\n    })\n    .trim()\n    .slice(0, 255); // Limit length to prevent buffer overflow\n}\n\n// Custom string validation with sanitization\nconst sanitizedString = (minLength?: number) => {\n  if (minLength !== undefined) {\n    return z.string()\n      .min(minLength, `Minimum length is ${minLength} characters`)\n      .transform(sanitizeString);\n  }\n  return z.string().transform(sanitizeString);\n};\n\n// Phone number validation and formatting\nexport const phoneRegex = /^\\d{3}-\\d{3}-\\d{4}$/;\nconst phoneSchema = z.string()\n  .optional()\n  .refine((val) => !val || phoneRegex.test(val), {\n    message: 'Phone number must be in format 123-456-7890'\n  })\n  .transform((val) => val ? sanitizeString(val) : val);\n```\n\n**2. RSVP FORM SCHEMA**\n```typescript\n// Complete RSVP form validation schema\n// src/lib/validators.ts\nexport const coreRsvpFormSchema = z.object({\n  firstName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'First name must be between 1 and 50 characters' }\n  ),\n  lastName: sanitizedString(1).refine(\n    (val) => val.length >= 1 && val.length <= 50,\n    { message: 'Last name must be between 1 and 50 characters' }\n  ),\n  email: z.string()\n    .email('Valid email is required')\n    .max(254, 'Email must be less than 254 characters')\n    .transform(sanitizeString),\n  phone: phoneSchema,\n  organization: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 100,\n    { message: 'Organization name must be less than 100 characters' }\n  ),\n  attendanceStatus: z.enum(['YES', 'NO', 'MAYBE'], {\n    errorMap: () => ({ message: 'Please select an attendance status' })\n  }),\n  attendeeCount: z.number()\n    .int('Attendee count must be a whole number')\n    .min(1, 'At least 1 attendee is required')\n    .max(10, 'Maximum 10 attendees allowed'),\n  dietaryPreference: z.enum(['NONE', 'VEGETARIAN', 'VEGAN', 'GLUTEN_FREE', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a dietary preference' })\n  }),\n  dietaryOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Dietary other must be less than 200 characters' }\n  ),\n  accessibilityNeeds: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 500,\n    { message: 'Accessibility needs must be less than 500 characters' }\n  ),\n  referralSource: z.enum(['WORD_OF_MOUTH', 'SOCIAL_MEDIA', 'WEBSITE', 'EMAIL', 'OTHER'], {\n    errorMap: () => ({ message: 'Please select a referral source' })\n  }),\n  referralOther: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 200,\n    { message: 'Referral other must be less than 200 characters' }\n  ),\n  wantsResources: z.boolean().default(false),\n  wantsAudit: z.boolean().default(false),\n  learningGoal: sanitizedString().optional().refine(\n    (val) => !val || val.length <= 1000,\n    { message: 'Learning goal must be less than 1000 characters' }\n  )\n});\n\n// Conditional validation for RSVP form\nexport const rsvpSchema = coreRsvpFormSchema\n  .refine((data) => {\n    // If dietary preference is OTHER, dietaryOther is required\n    if (data.dietaryPreference === 'OTHER' && !data.dietaryOther) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Please specify dietary requirements when selecting OTHER',\n    path: ['dietaryOther']\n  })\n  .refine((data) => {\n    // If referral source is OTHER, referralOther is required\n    if (data.referralSource === 'OTHER' && !data.referralOther) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Please specify referral source when selecting OTHER',\n    path: ['referralOther']\n  })\n  .refine((data) => {\n    // If attendance status is YES, attendeeCount must be at least 1\n    if (data.attendanceStatus === 'YES' && data.attendeeCount < 1) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'Attendee count must be at least 1 when attending',\n    path: ['attendeeCount']\n  });\n```\n\n**3. ANALYTICS VALIDATION**\n```typescript\n// Analytics data validation schema\nconst analyticsSchema = z.object({\n  // Basic device info\n  language: z.string().optional(),\n  languages: z.array(z.string()).optional(),\n  tz: z.string().optional(),\n  screenW: z.number().optional(),\n  screenH: z.number().optional(),\n  viewportW: z.number().optional(),\n  viewportH: z.number().optional(),\n  dpr: z.number().optional(),\n  orientation: z.string().optional(),\n  platform: z.string().optional(),\n  device: z.string().optional(),\n  browser: z.string().optional(),\n  \n  // Device capabilities\n  deviceMemory: z.number().optional(),\n  hardwareConcurrency: z.number().optional(),\n  maxTouchPoints: z.number().optional(),\n  \n  // Network info\n  connection: z.object({\n    downlink: z.number().optional(),\n    effectiveType: z.string().optional(),\n    rtt: z.number().optional()\n  }).optional(),\n  \n  // User interactions\n  interactionCounts: z.object({\n    clicks: z.number().optional(),\n    keypresses: z.number().optional(),\n    copies: z.number().optional(),\n    pointerMoves: z.number().optional()\n  }).optional(),\n  \n  // Performance metrics\n  paint: z.object({\n    firstContentfulPaint: z.number().optional(),\n    largestContentfulPaint: z.number().optional()\n  }).optional(),\n  \n  performance: z.object({\n    navigationStart: z.number().optional(),\n    loadEventEnd: z.number().optional(),\n    domContentLoadedEventEnd: z.number().optional()\n  }).optional(),\n  \n  // Page visibility\n  visibility: z.array(z.object({\n    state: z.string(),\n    at: z.number()\n  })).optional(),\n  \n  // Storage info\n  storage: z.object({\n    localStorage: z.number().optional(),\n    sessionStorage: z.number().optional()\n  }).optional(),\n  \n  // Navigation info\n  navigation: z.object({\n    type: z.string().optional(),\n    redirectCount: z.number().optional()\n  }).optional()\n});\n```\n\n**4. FORM VALIDATION IN REACT**\n```typescript\n// React Hook Form integration with Zod\n// src/components/RsvpForm.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { coreRsvpFormSchema } from '@/lib/validators';\n\nexport function RsvpForm() {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const form = useForm<RsvpFormValues>({\n    resolver: zodResolver(coreRsvpFormSchema),\n    mode: 'onTouched', // Show errors on blur\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      attendanceStatus: 'YES',\n      attendeeCount: 1,\n      dietaryPreference: 'NONE',\n      accessibilityNeeds: '',\n      referralSource: 'WORD_OF_MOUTH',\n      wantsResources: false,\n      wantsAudit: false,\n      learningGoal: '',\n    },\n  });\n\n  // Step-by-step validation\n  const validateStep = async (idx: number) => {\n    if (idx === 0) {\n      // Contact information validation\n      return form.trigger(['firstName', 'lastName', 'email', 'phone'] as (keyof RsvpFormValues)[]);\n    }\n    if (idx === 1) {\n      // Attendance validation\n      const keys: (keyof RsvpFormValues)[] = ['attendanceStatus'];\n      if (form.getValues('attendanceStatus') === 'YES') keys.push('attendeeCount');\n      return form.trigger(keys);\n    }\n    if (idx === 2) {\n      // Dietary & accessibility validation\n      const keys: (keyof RsvpFormValues)[] = ['dietaryPreference', 'accessibilityNeeds'];\n      if (form.getValues('dietaryPreference') === 'OTHER') keys.push('dietaryOther');\n      return form.trigger(keys);\n    }\n    if (idx === 3) {\n      // Referral validation\n      const keys: (keyof RsvpFormValues)[] = ['referralSource'];\n      if (form.getValues('referralSource') === 'OTHER') keys.push('referralOther');\n      return form.trigger(keys);\n    }\n    if (idx === 4) {\n      // Additional options validation\n      return form.trigger(['wantsResources', 'wantsAudit', 'learningGoal'] as (keyof RsvpFormValues)[]);\n    }\n    return true;\n  };\n\n  const onNext = async () => {\n    const ok = await validateStep(currentStep);\n    if (ok) {\n      setCurrentStep(prev => Math.min(prev + 1, 4));\n    }\n  };\n\n  const onSubmit = async (data: RsvpFormValues) => {\n    try {\n      // Validate complete form\n      const validatedData = rsvpSchema.parse(data);\n      \n      // Submit to API\n      const response = await fetch('/api/rsvp', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(validatedData)\n      });\n      \n      if (response.ok) {\n        // Success handling\n        setCurrentStep(5); // Success step\n      } else {\n        // Error handling\n        const error = await response.json();\n        console.error('RSVP submission error:', error);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        // Handle validation errors\n        error.errors.forEach(err => {\n          form.setError(err.path[0] as keyof RsvpFormValues, {\n            message: err.message\n          });\n        });\n      } else {\n        console.error('Unexpected error:', error);\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Form steps and validation */}\n      {currentStep === 0 && (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              First Name *\n            </label>\n            <input\n              {...form.register('firstName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.firstName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your first name\"\n            />\n            {form.formState.errors.firstName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.firstName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Last Name *\n            </label>\n            <input\n              {...form.register('lastName')}\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.lastName ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your last name\"\n            />\n            {form.formState.errors.lastName && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.lastName.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email Address *\n            </label>\n            <input\n              {...form.register('email')}\n              type=\"email\"\n              className={`mt-1 block w-full rounded-lg border px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60 ${\n                form.formState.errors.email ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter your email address\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Phone Number\n            </label>\n            <PhoneField\n              value={form.watch('phone')}\n              onChange={(value) => form.setValue('phone', value)}\n              onBlur={() => form.trigger('phone')}\n            />\n            {form.formState.errors.phone && (\n              <p className=\"mt-1 text-sm text-red-600\">\n                {form.formState.errors.phone.message}\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Other form steps... */}\n      \n      <div className=\"flex justify-between\">\n        <button\n          type=\"button\"\n          onClick={() => setCurrentStep(prev => Math.max(prev - 1, 0))}\n          className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n          disabled={currentStep === 0}\n        >\n          Previous\n        </button>\n        \n        {currentStep < 4 ? (\n          <button\n            type=\"button\"\n            onClick={onNext}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Next\n          </button>\n        ) : (\n          <button\n            type=\"submit\"\n            className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={form.formState.isSubmitting}\n          >\n            {form.formState.isSubmitting ? 'Submitting...' : 'Submit RSVP'}\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}\n```\n\n**5. API VALIDATION**\n```typescript\n// API endpoint validation\n// src/app/api/rsvp/route.ts\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    \n    // Validate with Zod schema\n    const validatedData = rsvpSchema.parse(body);\n    \n    // Additional security checks\n    if (validatedData.email.length > 254) {\n      logInvalidInput(clientIP, '/api/rsvp', { email: 'too long' });\n      return createSecureResponse(\n        { message: 'Invalid email format' }, \n        400\n      );\n    }\n    \n    // Check for potential XSS in text fields\n    const textFields = ['firstName', 'lastName', 'organization', 'learningGoal'];\n    for (const field of textFields) {\n      if (validatedData[field] && /<script|javascript:|on\\w+=/i.test(validatedData[field])) {\n        logXSSAttempt(clientIP, '/api/rsvp', validatedData[field]);\n        return createSecureResponse(\n          { message: 'Invalid input detected' }, \n          400\n        );\n      }\n    }\n    \n    // Create RSVP record\n    const rsvp = await prisma.rsvp.create({\n      data: {\n        fullName: `${validatedData.firstName} ${validatedData.lastName}`,\n        organization: validatedData.organization,\n        email: validatedData.email,\n        phone: validatedData.phone,\n        attendanceStatus: validatedData.attendanceStatus,\n        attendeeCount: validatedData.attendeeCount,\n        dietaryPreference: validatedData.dietaryPreference,\n        dietaryOther: validatedData.dietaryOther,\n        accessibilityNeeds: validatedData.accessibilityNeeds,\n        referralSource: validatedData.referralSource,\n        referralOther: validatedData.referralOther,\n        wantsResources: validatedData.wantsResources,\n        wantsAudit: validatedData.wantsAudit,\n        learningGoal: validatedData.learningGoal,\n        // Analytics data...\n      }\n    });\n    \n    return NextResponse.json({ \n      success: true, \n      rsvpId: rsvp.id,\n      message: 'RSVP submitted successfully'\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors = error.errors.reduce((acc, err) => {\n        acc[err.path[0]] = err.message;\n        return acc;\n      }, {} as Record<string, string>);\n      \n      return NextResponse.json({\n        error: 'Validation failed',\n        fieldErrors\n      }, { status: 400 });\n    }\n    \n    if (error.code === 'P2002') {\n      return NextResponse.json({\n        error: 'Email already exists',\n        fieldErrors: { email: 'This email has already been used for an RSVP' }\n      }, { status: 409 });\n    }\n    \n    console.error('RSVP processing error:', error);\n    return NextResponse.json({\n      error: 'Internal server error'\n    }, { status: 500 });\n  }\n}\n```\n\n**6. PHONE FIELD COMPONENT**\n```typescript\n// Phone field with formatting and validation\n// src/components/RsvpForm.tsx\nfunction PhoneField({\n  value,\n  onChange,\n  onBlur,\n  id = \"phone\",\n}: {\n  value?: string;\n  onChange: (v: string) => void;\n  onBlur?: () => void;\n  id?: string;\n}) {\n  const [displayValue, setDisplayValue] = useState(value || '');\n  \n  const formatPhone = (input: string) => {\n    const digits = input.replace(/\\D/g, '');\n    if (digits.length <= 3) return digits;\n    if (digits.length <= 6) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n    return `${digits.slice(0, 3)}-${digits.slice(3, 6)}-${digits.slice(6, 10)}`;\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhone(e.target.value);\n    setDisplayValue(formatted);\n    onChange(formatted);\n  };\n  \n  return (\n    <input\n      id={id}\n      type=\"tel\"\n      value={displayValue}\n      onChange={handleChange}\n      onBlur={onBlur}\n      placeholder=\"123-456-7890\"\n      className=\"mt-1 block w-full rounded-lg border border-gray-300 bg-white px-3 py-3 text-base text-gray-900 placeholder:text-gray-400 shadow-sm focus:border-brand-sage focus:ring-2 focus:ring-brand-sage/60\"\n    />\n  );\n}\n```\n\n**7. VALIDATION ERROR HANDLING**\n```typescript\n// Comprehensive error handling for validation\nconst handleFormError = (error: any) => {\n  if (error instanceof z.ZodError) {\n    const fieldErrors = error.errors.reduce((acc, err) => {\n      acc[err.path[0]] = err.message;\n      return acc;\n    }, {} as Record<string, string>);\n    \n    return NextResponse.json({\n      error: 'Validation failed',\n      fieldErrors\n    }, { status: 400 });\n  }\n  \n  if (error.code === 'P2002') {\n    return NextResponse.json({\n      error: 'Email already exists',\n      fieldErrors: { email: 'This email has already been used for an RSVP' }\n    }, { status: 409 });\n  }\n  \n  return NextResponse.json({\n    error: 'Internal server error'\n  }, { status: 500 });\n};\n\n// Client-side error display\nconst ErrorMessage = ({ error }: { error: string }) => (\n  <div className=\"mt-1 text-sm text-red-600\">\n    {error}\n  </div>\n);\n\n// Field error display\nconst FieldError = ({ field, errors }: { field: string; errors: any }) => {\n  if (errors[field]) {\n    return <ErrorMessage error={errors[field]} />;\n  }\n  return null;\n};\n```\n\nThis comprehensive form validation system provides XSS protection, input sanitization, step-by-step validation, real-time error feedback, and secure API validation for your RSVP application."}


