{"instruction": "What is the database schema for the RSVP system?", "input": "", "output": "The RSVP system uses PostgreSQL with the following key models:\n\n**Campaign Model:**\n- id: String (Primary Key)\n- name: String\n- status: Enum (DRAFT, SCHEDULED, SENT, PAUSED, COMPLETED, FAILED)\n- meta: Json (stores audienceGroup, templateId, scheduledAt, etc.)\n- createdAt: DateTime\n- updatedAt: DateTime\n\n**CampaignTemplate Model:**\n- id: String (Primary Key)\n- name: String\n- subject: String\n- htmlBody: String\n- textBody: String\n- meta: Json (stores isActive, audienceGroup, etc.)\n- createdAt: DateTime\n- updatedAt: DateTime\n\n**AudienceMember Model:**\n- id: String (Primary Key)\n- email: String (Unique)\n- firstName: String?\n- lastName: String?\n- status: Enum (SUBSCRIBED, UNSUBSCRIBED, BOUNCED, COMPLAINED)\n- meta: Json (stores custom fields, tags, etc.)\n- createdAt: DateTime\n- updatedAt: DateTime\n\n**AudienceGroup Model:**\n- id: String (Primary Key)\n- name: String (Unique)\n- description: String?\n- meta: Json (stores rules, criteria, etc.)\n- createdAt: DateTime\n- updatedAt: DateTime\n- members: AudienceMember[] (Relation)\n\n**RSVP Model:**\n- id: String (Primary Key)\n- eventId: String\n- email: String\n- name: String?\n- status: Enum (PENDING, CONFIRMED, CANCELLED)\n- meta: Json (stores additional RSVP details)\n- createdAt: DateTime\n- updatedAt: DateTime\n\n**WorkflowRule Model:**\n- id: String (Primary Key)\n- name: String\n- trigger: String (e.g., 'CAMPAIGN_SENT', 'RSVP_CONFIRMED')\n- conditions: Json (e.g., { \"campaignId\": \"xyz\", \"minOpenRate\": 0.2 })\n- actions: Json (e.g., { \"type\": \"SEND_EMAIL\", \"templateId\": \"abc\" })\n- isEnabled: Boolean\n- createdAt: DateTime\n- updatedAt: DateTime\n\n**WorkflowExecution Model:**\n- id: String (Primary Key)\n- ruleId: String (Foreign Key to WorkflowRule)\n- triggeredAt: DateTime\n- status: Enum (PENDING, RUNNING, COMPLETED, FAILED)\n- logs: Json (stores execution details, errors)\n- createdAt: DateTime\n- updatedAt: DateTime"}
{"instruction": "What are the main API endpoints for campaign management?", "input": "", "output": "The RSVP system has the following key API endpoints:\n\n**Campaign Management:**\n- GET /api/admin/campaign/campaigns - List all campaigns\n- POST /api/admin/campaign/campaigns - Create a new campaign\n- GET /api/admin/campaign/campaigns/[id] - Get campaign details\n- PUT /api/admin/campaign/campaigns/[id] - Update campaign\n- DELETE /api/admin/campaign/campaigns/[id] - Delete campaign\n- POST /api/admin/campaign/campaigns/[id]/schedule - Schedule a campaign\n- POST /api/admin/campaign/campaigns/[id]/pause - Pause a running campaign\n- POST /api/admin/campaign/campaigns/[id]/resume - Resume a paused campaign\n- GET /api/admin/campaign/campaigns/[id]/overview - Get campaign overview analytics\n- POST /api/admin/campaign/campaigns/[id]/send-next-batch - Manually trigger next batch send\n\n**Email Template Management:**\n- GET /api/admin/campaign/templates - List all templates\n- POST /api/admin/campaign/templates - Create a new template\n- GET /api/admin/campaign/templates/[id] - Get template details\n- PUT /api/admin/campaign/templates/[id] - Update template\n- DELETE /api/admin/campaign/templates/[id] - Delete template\n\n**Audience Management:**\n- GET /api/admin/campaign/groups - List all audience groups\n- POST /api/admin/campaign/groups - Create a new audience group\n- GET /api/admin/campaign/groups/[id] - Get audience group details\n- PUT /api/admin/campaign/groups/[id] - Update audience group\n- DELETE /api/admin/campaign/groups/[id] - Delete audience group\n- POST /api/admin/campaign/members/add-to-group - Add members to a group\n- POST /api/admin/campaign/members/move - Move members between groups\n- POST /api/admin/export - Export audience data\n\n**Workflow Automation:**\n- GET /api/admin/workflows - List all workflow rules\n- POST /api/admin/workflows - Create a new workflow rule\n- GET /api/admin/workflows/[id] - Get workflow rule details\n- PUT /api/admin/workflows/[id] - Update workflow rule\n- DELETE /api/admin/workflows/[id] - Delete workflow rule\n- POST /api/admin/workflows/[id]/toggle - Toggle workflow rule enabled status\n\n**Analytics & Reporting:**\n- GET /api/admin/analytics/visitors - Get website visitor analytics\n- GET /api/admin/analytics/tracking-links - Get tracking link performance\n- GET /api/admin/campaigns/analytics - Get overall campaign analytics\n\n**System & Auth:**\n- GET /api/admin/auth/check - Check admin authentication status\n- POST /api/admin/auth - Admin login\n- POST /api/admin/logout - Admin logout\n- GET /api/ai/rag - RAG endpoint for AI context retrieval"}
{"instruction": "How do I create a new email campaign?", "input": "I want to create a campaign", "output": "To create a new email campaign, you need to:\n\n1. **Navigate to the campaign management page** at `/admin/campaign`\n2. **Click 'Create New Campaign'** button\n3. **Fill in the required fields:**\n   - Campaign Name: Give it a descriptive name\n   - Audience Group: Select which audience group to target\n   - Email Template: Choose from existing templates or create new one\n   - Schedule: Set when to send (immediate or scheduled)\n4. **Configure campaign settings:**\n   - Subject line\n   - Preview text\n   - Sender information\n   - Tracking options\n5. **Review and save** the campaign\n\n**API Method:**\n```\nPOST /api/admin/campaign/campaigns\n{\n  \"name\": \"Campaign Name\",\n  \"audienceGroupId\": \"group-id\",\n  \"templateId\": \"template-id\",\n  \"scheduledAt\": \"2025-01-15T10:00:00Z\"\n}\n```\n\n**Required fields:** name, audienceGroupId, templateId\n**Optional fields:** scheduledAt, meta (for additional configuration)"}
{"instruction": "How do I create and manage email templates?", "input": "I need to create an email template", "output": "To create and manage email templates:\n\n**Creating a Template:**\n1. **Navigate to** `/admin/templates`\n2. **Click 'Create New Template'**\n3. **Fill in template details:**\n   - Template Name: Descriptive name\n   - Subject: Email subject line\n   - HTML Body: Rich HTML content\n   - Text Body: Plain text version\n   - Meta: Additional configuration\n4. **Save the template**\n\n**API Method:**\n```\nPOST /api/admin/campaign/templates\n{\n  \"name\": \"Template Name\",\n  \"subject\": \"Email Subject\",\n  \"htmlBody\": \"<h1>Hello {{name}}</h1><p>Content here</p>\",\n  \"textBody\": \"Hello {{name}}\\n\\nContent here\",\n  \"meta\": {\n    \"isActive\": true,\n    \"audienceGroup\": \"general\"\n  }\n}\n```\n\n**Template Variables:**\n- `{{name}}` - Recipient's name\n- `{{email}}` - Recipient's email\n- `{{firstName}}` - First name\n- `{{lastName}}` - Last name\n- `{{unsubscribeUrl}}` - Unsubscribe link\n\n**Managing Templates:**\n- **Edit:** PUT /api/admin/campaign/templates/[id]\n- **Delete:** DELETE /api/admin/campaign/templates/[id]\n- **List:** GET /api/admin/campaign/templates\n- **Get Details:** GET /api/admin/campaign/templates/[id]"}
{"instruction": "How do I manage audience groups and members?", "input": "I want to manage my audience", "output": "To manage audience groups and members:\n\n**Creating Audience Groups:**\n1. **Navigate to** `/admin/audiences`\n2. **Click 'Create New Group'**\n3. **Configure group settings:**\n   - Group Name: Unique identifier\n   - Description: What this group represents\n   - Meta: Rules and criteria for membership\n4. **Save the group**\n\n**API Method:**\n```\nPOST /api/admin/campaign/groups\n{\n  \"name\": \"Group Name\",\n  \"description\": \"Description of the group\",\n  \"meta\": {\n    \"rules\": {\n      \"industry\": \"technology\",\n      \"engagement\": \"high\"\n    }\n  }\n}\n```\n\n**Managing Members:**\n- **Add to Group:** POST /api/admin/campaign/members/add-to-group\n- **Move Between Groups:** POST /api/admin/campaign/members/move\n- **Export Data:** POST /api/admin/export\n\n**Member Status Types:**\n- `SUBSCRIBED` - Active member\n- `UNSUBSCRIBED` - Opted out\n- `BOUNCED` - Email bounced\n- `COMPLAINED` - Marked as spam\n\n**Audience Segmentation:**\nThe system automatically segments based on:\n- Industry type\n- Engagement level\n- Email domain\n- Geographic location\n- Behavioral patterns\n\n**Database Fields:**\n- `email` (unique)\n- `firstName`, `lastName`\n- `status` (enum)\n- `meta` (custom fields, tags)\n- `createdAt`, `updatedAt`"}
{"instruction": "How do I set up automation workflows?", "input": "I want to create automation rules", "output": "To set up automation workflows:\n\n**Creating Workflow Rules:**\n1. **Navigate to** `/admin/workflows`\n2. **Click 'Create New Workflow'**\n3. **Configure the rule:**\n   - Name: Descriptive name\n   - Trigger: When to activate (CAMPAIGN_SENT, RSVP_CONFIRMED, etc.)\n   - Conditions: Criteria that must be met\n   - Actions: What to do when triggered\n   - Enable/Disable: Toggle the rule\n4. **Save the workflow**\n\n**API Method:**\n```\nPOST /api/admin/workflows\n{\n  \"name\": \"Follow-up Campaign\",\n  \"trigger\": \"CAMPAIGN_SENT\",\n  \"conditions\": {\n    \"campaignId\": \"campaign-123\",\n    \"minOpenRate\": 0.2,\n    \"timeDelay\": \"24h\"\n  },\n  \"actions\": {\n    \"type\": \"SEND_EMAIL\",\n    \"templateId\": \"follow-up-template\",\n    \"audienceGroup\": \"engaged-users\"\n  },\n  \"isEnabled\": true\n}\n```\n\n**Available Triggers:**\n- `CAMPAIGN_SENT` - After campaign is sent\n- `RSVP_CONFIRMED` - When someone confirms RSVP\n- `EMAIL_OPENED` - When email is opened\n- `EMAIL_CLICKED` - When link is clicked\n- `USER_UNSUBSCRIBED` - When user unsubscribes\n\n**Available Actions:**\n- `SEND_EMAIL` - Send follow-up email\n- `ADD_TO_GROUP` - Add to audience group\n- `REMOVE_FROM_GROUP` - Remove from group\n- `UPDATE_MEMBER` - Update member data\n- `LOG_EVENT` - Log the event\n\n**Workflow Execution:**\n- Rules are checked automatically\n- Executions are logged in `WorkflowExecution` table\n- Status: PENDING, RUNNING, COMPLETED, FAILED\n- Failed executions can be retried"}
{"instruction": "How do I view analytics and generate reports?", "input": "I want to see campaign analytics", "output": "To view analytics and generate reports:\n\n**Campaign Analytics:**\n1. **Navigate to** `/admin/campaign/campaigns/[id]/overview`\n2. **View key metrics:**\n   - Open Rate: Percentage of emails opened\n   - Click Rate: Percentage of links clicked\n   - Bounce Rate: Percentage of emails bounced\n   - Unsubscribe Rate: Percentage who unsubscribed\n   - Conversion Rate: Percentage who took desired action\n\n**API Endpoints:**\n- `GET /api/admin/campaigns/analytics` - Overall campaign analytics\n- `GET /api/admin/analytics/visitors` - Website visitor analytics\n- `GET /api/admin/analytics/tracking-links` - Link performance\n\n**Sample Analytics Response:**\n```\n{\n  \"campaignId\": \"campaign-123\",\n  \"sent\": 1000,\n  \"delivered\": 950,\n  \"opened\": 285,\n  \"clicked\": 95,\n  \"bounced\": 50,\n  \"unsubscribed\": 5,\n  \"openRate\": 0.30,\n  \"clickRate\": 0.10,\n  \"bounceRate\": 0.05,\n  \"unsubscribeRate\": 0.005\n}\n```\n\n**Report Generation:**\n- **Monthly Reports:** Automated monthly summaries\n- **Campaign Reports:** Individual campaign performance\n- **Audience Reports:** Member engagement and growth\n- **Export Options:** CSV, PDF, JSON formats\n\n**Key Metrics to Track:**\n- **Engagement:** Open rates, click rates, time spent\n- **Deliverability:** Bounce rates, spam complaints\n- **Growth:** New subscribers, list growth rate\n- **Revenue:** Conversion rates, ROI (if applicable)\n\n**Database Tables:**\n- `CampaignSend` - Individual email sends\n- `CampaignSchedule` - Scheduled campaigns\n- `AudienceMember` - Member data and status\n- `WorkflowExecution` - Automation execution logs"}
{"instruction": "What is the technical architecture of the RSVP system?", "input": "", "output": "The RSVP system is built with the following architecture:\n\n**Frontend:**\n- **Framework:** Next.js 14 with React\n- **Styling:** Tailwind CSS\n- **Animations:** Framer Motion\n- **State Management:** React hooks (useState, useEffect)\n- **Authentication:** Session-based with cookies\n\n**Backend:**\n- **Runtime:** Node.js\n- **Framework:** Next.js API routes\n- **Database:** PostgreSQL with Prisma ORM\n- **Email Service:** Resend API\n- **Vector Database:** Weaviate (for RAG)\n- **AI Integration:** Gemini 2.5 Flash\n\n**Database:**\n- **Primary:** PostgreSQL (Neon)\n- **ORM:** Prisma\n- **Migrations:** Prisma migrate\n- **Schema:** Defined in `prisma/schema.prisma`\n\n**Key Components:**\n- **Admin Panel:** `/admin/*` routes\n- **RSVP Forms:** Public-facing forms\n- **AI Assistant:** Juniper AI system\n- **Email Templates:** HTML/Text templates\n- **Audience Management:** Segmentation and grouping\n- **Workflow Automation:** Rule-based triggers\n\n**File Structure:**\n```\nrsvp-app/\n├── src/\n│   ├── app/           # Next.js app router\n│   ├── components/    # React components\n│   ├── lib/          # Utilities and services\n│   └── prisma/       # Database schema\n├── public/           # Static assets\n└── docs/            # Documentation\n```\n\n**Environment Variables:**\n- `DATABASE_URL` - PostgreSQL connection\n- `RESEND_API_KEY` - Email service\n- `GEMINI_API_KEY` - AI service\n- `WEAVIATE_URL` - Vector database\n- `WEAVIATE_API_KEY` - Vector database auth\n\n**Deployment:**\n- **Platform:** Vercel (frontend)\n- **Database:** Neon (PostgreSQL)\n- **AI Service:** Railway (planned)\n- **Vector DB:** Weaviate Cloud"}
{"instruction": "How does the AI assistant (Juniper) work?", "input": "Tell me about Juniper", "output": "Juniper is the AI assistant for the RSVP system with the following capabilities:\n\n**Core Features:**\n- **Conversational Interface:** Natural language chat\n- **Real-time Execution:** Watch AI perform tasks live\n- **Tool Integration:** Direct database and API access\n- **Context Awareness:** Understands system state and data\n- **Error Handling:** Graceful failure and recovery\n\n**UI Components:**\n- **Floating Chat Bar:** Persistent bottom bar\n- **Resizable Chat Window:** Movable, resizable popup\n- **Conversation History:** Persistent chat memory\n- **Tool Execution Display:** Real-time progress indicators\n- **Entity Extraction:** Shows extracted information\n\n**Technical Implementation:**\n- **Agent Class:** `SLMAgent` in `/lib/agents/SLMAgent.ts`\n- **UI Components:** `FloatingChatBar`, `ChatWindow`\n- **Integration:** `JuniperAISystem` orchestrates everything\n- **Authentication:** Only available in admin area\n\n**Capabilities:**\n- **Campaign Management:** Create, schedule, pause, resume campaigns\n- **Template Management:** Create and edit email templates\n- **Audience Management:** Segment and manage audience groups\n- **Analytics:** View performance metrics and reports\n- **Automation:** Set up workflow rules and triggers\n- **System Monitoring:** Check system health and status\n\n**Response Format:**\n```\n{\n  \"message\": \"Natural language response\",\n  \"toolCalls\": [{\n    \"id\": \"tool_123\",\n    \"name\": \"create_campaign\",\n    \"parameters\": {...},\n    \"status\": \"completed\"\n  }],\n  \"confidence\": 0.95,\n  \"entities\": [{\n    \"type\": \"campaign_name\",\n    \"value\": \"Summer Sale\",\n    \"confidence\": 0.9\n  }]\n}\n```\n\n**Current Status:**\n- Uses pattern-matching (71% success rate)\n- **Planned:** Replace with fine-tuned Qwen2.5-3B model\n- **Goal:** 95%+ success rate with natural conversation"}
{"instruction": "How do I troubleshoot common issues?", "input": "I'm having problems with my campaign", "output": "Here are common troubleshooting steps for RSVP system issues:\n\n**Campaign Issues:**\n- **Campaign not sending:** Check status in database, verify audience group has members\n- **Low open rates:** Review subject lines, send times, audience targeting\n- **High bounce rates:** Check email list quality, verify email addresses\n- **Template not rendering:** Validate HTML, check for missing variables\n\n**Database Issues:**\n- **Connection errors:** Check DATABASE_URL environment variable\n- **Migration failures:** Run `npx prisma migrate reset` and `npx prisma migrate deploy`\n- **Schema mismatches:** Verify Prisma schema matches database\n\n**API Issues:**\n- **Authentication failures:** Check session cookies, verify admin login\n- **Rate limiting:** Implement proper throttling and retry logic\n- **CORS errors:** Verify allowed origins in API routes\n\n**Email Delivery Issues:**\n- **Resend API errors:** Check API key, verify sender domain\n- **Spam folder:** Improve email content, avoid spam triggers\n- **Deliverability:** Monitor bounce rates, maintain clean lists\n\n**AI Assistant Issues:**\n- **Pattern matching failures:** Check input format, improve regex patterns\n- **Tool execution errors:** Verify database connections, check API endpoints\n- **Context loss:** Implement proper conversation memory\n\n**Debugging Commands:**\n```\n# Check database connection\nnpx prisma db pull\n\n# View logs\nnpm run dev\n\n# Test email sending\ncurl -X POST /api/test-email\n\n# Check AI responses\ncurl -X POST /api/ai/chat\n```\n\n**Log Locations:**\n- **Application logs:** Console output during development\n- **Database logs:** Neon dashboard\n- **Email logs:** Resend dashboard\n- **AI logs:** Console output from SLMAgent"}


