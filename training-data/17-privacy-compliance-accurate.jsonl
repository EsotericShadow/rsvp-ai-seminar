{"instruction": "How does privacy and compliance work?", "input": "Explain GDPR/CCPA compliance and privacy features", "output": "I'll explain the complete privacy and compliance system. Here's how GDPR/CCPA compliance and privacy features work:\n\n**PRIVACY & COMPLIANCE SYSTEM**\n\n**1. PRIVACY POLICY MANAGEMENT**\n```typescript\n// Dynamic privacy policy generation\n// src/lib/privacy.ts\nexport type PrivacyPolicy = {\n  title: string;\n  lastUpdated: string;\n  sections: Array<{\n    heading: string;\n    paragraphs: string[];\n    bullets?: string[];\n  }>;\n  dataSharing: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  userRights: {\n    heading: string;\n    paragraphs: string[];\n    bullets: string[];\n  };\n  contact: {\n    heading: string;\n    paragraphs: string[];\n  };\n};\n\nconst fallbackPolicy: PrivacyPolicy = {\n  title: \"Privacy Policy\",\n  lastUpdated: \"2025-01-01\",\n  sections: [\n    {\n      heading: \"Information We Collect\",\n      paragraphs: [\n        \"We collect information you provide directly to us, such as when you RSVP for an event, create an account, or contact us for support.\"\n      ],\n      bullets: [\n        \"Contact Information (name, email, phone)\",\n        \"Event Preferences (attendance, dietary needs)\",\n        \"Communication Preferences\",\n        \"Referral Source\",\n        \"Learning Goals\"\n      ]\n    },\n    {\n      heading: \"Information We Collect Automatically\",\n      paragraphs: [\n        \"When you visit our website, we automatically collect a wide range of technical and behavioral information to help us understand how our site is used and to improve our services. This includes:\"\n      ],\n      bullets: [\n        \"**Identification:** A unique visitor ID and session ID, stored in cookies.\",\n        \"**Page Information:** The path and query string of the pages you visit, and the referrer URL.\",\n        \"**Marketing Information:** UTM parameters and ad click IDs (e.g., gclid, fbclid) from our marketing campaigns.\",\n        \"**Device & Browser Information:** User agent, browser type and version, operating system, device type, screen dimensions, viewport dimensions, device pixel ratio, and language preferences.\",\n        \"**Connection & Performance:** Network information (e.g., downlink, effective type, RTT), browser storage capacity, and detailed performance timings for page loads.\",\n        \"**User Interaction:** The maximum percentage of the page you have scrolled, counts of clicks, keypresses, and copy events, and a timeline of the page's visibility state.\",\n        \"**Geolocation:** Your approximate country, region, and city, derived from your IP address. Your full IP address is never stored; instead, we store a hashed version for security.\"\n      ]\n    }\n  ],\n  dataSharing: {\n    heading: \"How We Share Data\",\n    paragraphs: [\n      \"We do not sell, trade, or otherwise transfer your personal information to third parties without your consent, except as described in this policy.\"\n    ],\n    bullets: [\n      \"**Service Providers:** We may share information with trusted third-party service providers who assist us in operating our website, conducting our business, or servicing you.\",\n      \"**LeadMine Integration:** We share business contact information with our LeadMine service for customer relationship management.\",\n      \"**Email Services:** We use Resend and SendGrid for email delivery, which may process your email address and engagement data.\",\n      \"**Legal Requirements:** We may disclose information when required by law or to protect our rights, property, or safety.\"\n    ]\n  },\n  userRights: {\n    heading: \"Your Rights\",\n    paragraphs: [\n      \"Under GDPR and CCPA, you have certain rights regarding your personal information:\"\n    ],\n    bullets: [\n      \"**Access:** Request a copy of the personal information we hold about you.\",\n      \"**Rectification:** Request correction of inaccurate or incomplete information.\",\n      \"**Erasure:** Request deletion of your personal information.\",\n      \"**Portability:** Request transfer of your data to another service.\",\n      \"**Restriction:** Request limitation of processing of your information.\",\n      \"**Objection:** Object to processing of your information for certain purposes.\",\n      \"**Withdraw Consent:** Withdraw consent for data processing at any time.\"\n    ]\n  },\n  contact: {\n    heading: \"Contact Us\",\n    paragraphs: [\n      \"If you have any questions about this Privacy Policy or wish to exercise your rights, please contact us at:\",\n      \"Email: privacy@evergreenwebsolutions.ca\",\n      \"Address: Evergreen Web Solutions, Terrace, BC, Canada\"\n    ]\n  }\n};\n\nexport async function getPrivacyPolicy(): Promise<{\n  policy: PrivacyPolicy;\n  resolvedFrom: \"remote\" | \"fallback\";\n}> {\n  try {\n    // Try to fetch from remote source (e.g., CMS)\n    const remotePolicy = await fetchRemotePrivacyPolicy();\n    if (remotePolicy) {\n      return {\n        policy: remotePolicy,\n        resolvedFrom: \"remote\"\n      };\n    }\n  } catch (error) {\n    console.error('Failed to fetch remote privacy policy:', error);\n  }\n  \n  // Fallback to local policy\n  return {\n    policy: fallbackPolicy,\n    resolvedFrom: \"fallback\"\n  };\n}\n```\n\n**2. CONSENT MANAGEMENT**\n```typescript\n// Consent management system\n// src/lib/consent.ts\nexport type ConsentType = \n  | 'analytics'\n  | 'marketing'\n  | 'functional'\n  | 'necessary';\n\nexport type ConsentStatus = {\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  necessary: boolean; // Always true, cannot be disabled\n  timestamp: string;\n  version: string;\n};\n\nexport function getConsentStatus(): ConsentStatus {\n  if (typeof window === 'undefined') {\n    return {\n      analytics: false,\n      marketing: false,\n      functional: false,\n      necessary: true,\n      timestamp: new Date().toISOString(),\n      version: '1.0'\n    };\n  }\n  \n  const stored = localStorage.getItem('consent_status');\n  if (stored) {\n    try {\n      return JSON.parse(stored);\n    } catch {\n      // Invalid stored data, return default\n    }\n  }\n  \n  return {\n    analytics: false,\n    marketing: false,\n    functional: false,\n    necessary: true,\n    timestamp: new Date().toISOString(),\n    version: '1.0'\n  };\n}\n\nexport function setConsentStatus(consent: Partial<ConsentStatus>): void {\n  if (typeof window === 'undefined') return;\n  \n  const current = getConsentStatus();\n  const updated = {\n    ...current,\n    ...consent,\n    timestamp: new Date().toISOString(),\n    necessary: true // Always true\n  };\n  \n  localStorage.setItem('consent_status', JSON.stringify(updated));\n  \n  // Trigger consent change event\n  window.dispatchEvent(new CustomEvent('consentChanged', { detail: updated }));\n}\n\nexport function hasConsent(type: ConsentType): boolean {\n  const status = getConsentStatus();\n  return status[type] || false;\n}\n```\n\n**3. DATA SUBJECT RIGHTS**\n```typescript\n// Data subject rights implementation\n// src/lib/data-rights.ts\nexport async function handleDataSubjectRequest(\n  requestType: 'access' | 'rectification' | 'erasure' | 'portability' | 'restriction',\n  userEmail: string,\n  additionalData?: any\n): Promise<{\n  success: boolean;\n  data?: any;\n  error?: string;\n}> {\n  try {\n    switch (requestType) {\n      case 'access':\n        return await handleAccessRequest(userEmail);\n      case 'rectification':\n        return await handleRectificationRequest(userEmail, additionalData);\n      case 'erasure':\n        return await handleErasureRequest(userEmail);\n      case 'portability':\n        return await handlePortabilityRequest(userEmail);\n      case 'restriction':\n        return await handleRestrictionRequest(userEmail, additionalData);\n      default:\n        return { success: false, error: 'Invalid request type' };\n    }\n  } catch (error) {\n    console.error('Data subject request error:', error);\n    return { success: false, error: 'Request processing failed' };\n  }\n}\n\n// Access request - provide all data about the user\nasync function handleAccessRequest(userEmail: string) {\n  const userData = {\n    rsvp: await prisma.rsvp.findUnique({\n      where: { email: userEmail }\n    }),\n    visits: await prisma.visit.findMany({\n      where: { \n        // Find visits by email through RSVP\n        OR: [\n          { visitorId: { in: await getVisitorIdsForEmail(userEmail) } }\n        ]\n      }\n    }),\n    audienceMembers: await prisma.audienceMember.findMany({\n      where: { primaryEmail: userEmail }\n    }),\n    emailEvents: await prisma.emailEvent.findMany({\n      where: {\n        job: {\n          recipientEmail: userEmail\n        }\n      }\n    })\n  };\n  \n  return {\n    success: true,\n    data: {\n      personalData: userData,\n      dataCategories: [\n        'Contact Information',\n        'Event Preferences',\n        'Website Analytics',\n        'Email Engagement',\n        'Marketing Attribution'\n      ],\n      dataSources: [\n        'Direct input (RSVP form)',\n        'Automatic collection (website analytics)',\n        'Email service providers',\n        'LeadMine integration'\n      ],\n      retentionPeriods: {\n        'RSVP Data': '2 years after event',\n        'Analytics Data': '1 year',\n        'Email Data': '3 years',\n        'Marketing Data': '2 years'\n      }\n    }\n  };\n}\n\n// Rectification request - correct inaccurate data\nasync function handleRectificationRequest(userEmail: string, corrections: any) {\n  const updates = [];\n  \n  // Update RSVP data\n  if (corrections.rsvp) {\n    const rsvpUpdate = await prisma.rsvp.update({\n      where: { email: userEmail },\n      data: corrections.rsvp\n    });\n    updates.push('RSVP data updated');\n  }\n  \n  // Update audience member data\n  if (corrections.audience) {\n    const audienceUpdate = await prisma.audienceMember.updateMany({\n      where: { primaryEmail: userEmail },\n      data: corrections.audience\n    });\n    updates.push('Audience data updated');\n  }\n  \n  return {\n    success: true,\n    data: {\n      updates,\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n// Erasure request - delete all user data\nasync function handleErasureRequest(userEmail: string) {\n  const deletions = [];\n  \n  // Delete RSVP data\n  const rsvpDelete = await prisma.rsvp.deleteMany({\n    where: { email: userEmail }\n  });\n  if (rsvpDelete.count > 0) {\n    deletions.push(`${rsvpDelete.count} RSVP records deleted`);\n  }\n  \n  // Delete audience member data\n  const audienceDelete = await prisma.audienceMember.deleteMany({\n    where: { primaryEmail: userEmail }\n  });\n  if (audienceDelete.count > 0) {\n    deletions.push(`${audienceDelete.count} audience member records deleted`);\n  }\n  \n  // Anonymize visit data (keep for analytics but remove personal identifiers)\n  const visitAnonymize = await prisma.visit.updateMany({\n    where: {\n      visitorId: { in: await getVisitorIdsForEmail(userEmail) }\n    },\n    data: {\n      visitorId: 'anonymized',\n      sessionId: 'anonymized',\n      ipHash: 'anonymized'\n    }\n  });\n  if (visitAnonymize.count > 0) {\n    deletions.push(`${visitAnonymize.count} visit records anonymized`);\n  }\n  \n  return {\n    success: true,\n    data: {\n      deletions,\n      timestamp: new Date().toISOString()\n    }\n  };\n}\n\n// Portability request - export user data in machine-readable format\nasync function handlePortabilityRequest(userEmail: string) {\n  const userData = await handleAccessRequest(userEmail);\n  \n  // Format data for portability (JSON format)\n  const portableData = {\n    exportDate: new Date().toISOString(),\n    userEmail,\n    dataFormat: 'JSON',\n    data: userData.data\n  };\n  \n  return {\n    success: true,\n    data: portableData\n  };\n}\n```\n\n**4. DO NOT TRACK DETECTION**\n```typescript\n// Do Not Track and Global Privacy Control detection\n// src/components/AnalyticsBeacon.tsx\nconst hasDoNotTrack = () => {\n  if (typeof window === 'undefined') return false;\n  \n  const dnt = navigator.doNotTrack;\n  const gpc = (navigator as any).globalPrivacyControl;\n  const signals = [dnt, gpc].filter(Boolean);\n  \n  return signals.includes('1') || signals.includes('yes') || gpc === true;\n};\n\nexport default function AnalyticsBeacon() {\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (hasDoNotTrack()) return; // Respect Do Not Track\n\n    // Only collect analytics if user hasn't opted out\n    // ... analytics collection code\n  }, []);\n\n  return null;\n}\n```\n\n**5. DATA RETENTION POLICIES**\n```typescript\n// Data retention and cleanup\n// src/lib/data-retention.ts\nexport const dataRetentionPolicies = {\n  rsvp: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'delete'\n  },\n  visits: {\n    retentionPeriod: 1 * 365 * 24 * 60 * 60 * 1000, // 1 year\n    cleanupAction: 'anonymize'\n  },\n  emailEvents: {\n    retentionPeriod: 3 * 365 * 24 * 60 * 60 * 1000, // 3 years\n    cleanupAction: 'delete'\n  },\n  audienceMembers: {\n    retentionPeriod: 2 * 365 * 24 * 60 * 60 * 1000, // 2 years\n    cleanupAction: 'anonymize'\n  }\n};\n\nexport async function cleanupExpiredData(): Promise<{\n  cleaned: number;\n  errors: number;\n  errors: string[];\n}> {\n  const results = {\n    cleaned: 0,\n    errors: 0,\n    errors: [] as string[]\n  };\n\n  // Clean up RSVP data\n  try {\n    const rsvpCutoff = new Date(Date.now() - dataRetentionPolicies.rsvp.retentionPeriod);\n    const rsvpDelete = await prisma.rsvp.deleteMany({\n      where: {\n        createdAt: {\n          lt: rsvpCutoff\n        }\n      }\n    });\n    results.cleaned += rsvpDelete.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`RSVP cleanup failed: ${error.message}`);\n  }\n\n  // Anonymize visit data\n  try {\n    const visitCutoff = new Date(Date.now() - dataRetentionPolicies.visits.retentionPeriod);\n    const visitAnonymize = await prisma.visit.updateMany({\n      where: {\n        createdAt: {\n          lt: visitCutoff\n        }\n      },\n      data: {\n        visitorId: 'anonymized',\n        sessionId: 'anonymized',\n        ipHash: 'anonymized'\n      }\n    });\n    results.cleaned += visitAnonymize.count;\n  } catch (error) {\n    results.errors++;\n    results.errors.push(`Visit cleanup failed: ${error.message}`);\n  }\n\n  return results;\n}\n```\n\n**6. PRIVACY DASHBOARD**\n```typescript\n// Privacy dashboard for users\n// src/components/PrivacyDashboard.tsx\nexport default function PrivacyDashboard({ userEmail }: { userEmail: string }) {\n  const [consentStatus, setConsentStatus] = useState<ConsentStatus>(getConsentStatus());\n  const [userData, setUserData] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleDataRequest = async (requestType: string) => {\n    setLoading(true);\n    try {\n      const result = await fetch('/api/privacy/request', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          type: requestType,\n          email: userEmail\n        })\n      });\n      \n      const data = await result.json();\n      if (data.success) {\n        setUserData(data.data);\n      }\n    } catch (error) {\n      console.error('Data request failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConsentChange = (type: ConsentType, value: boolean) => {\n    setConsentStatus(prev => ({\n      ...prev,\n      [type]: value\n    }));\n    setConsentStatus({ [type]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Privacy Dashboard</h2>\n      \n      {/* Consent Management */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Consent Preferences</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Analytics</label>\n              <p className=\"text-sm text-gray-600\">Help us improve our website</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.analytics}\n              onChange={(e) => handleConsentChange('analytics', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <label className=\"font-medium\">Marketing</label>\n              <p className=\"text-sm text-gray-600\">Receive promotional emails</p>\n            </div>\n            <input\n              type=\"checkbox\"\n              checked={consentStatus.marketing}\n              onChange={(e) => handleConsentChange('marketing', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Data Rights */}\n      <div className=\"bg-white p-6 rounded-lg shadow\">\n        <h3 className=\"text-lg font-semibold mb-4\">Your Data Rights</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <button\n            onClick={() => handleDataRequest('access')}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Request My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('portability')}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Export My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('erasure')}\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Delete My Data'}\n          </button>\n          \n          <button\n            onClick={() => handleDataRequest('rectification')}\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700\"\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Correct My Data'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Display user data if requested */}\n      {userData && (\n        <div className=\"bg-white p-6 rounded-lg shadow\">\n          <h3 className=\"text-lg font-semibold mb-4\">Your Data</h3>\n          <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto\">\n            {JSON.stringify(userData, null, 2)}\n          </pre>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n**7. PRIVACY API ENDPOINTS**\n```typescript\n// Privacy API endpoints\n// src/app/api/privacy/request/route.ts\nexport async function POST(req: Request) {\n  try {\n    const { type, email, corrections } = await req.json();\n    \n    const result = await handleDataSubjectRequest(type, email, corrections);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Privacy request error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Request processing failed' },\n      { status: 500 }\n    );\n  }\n}\n\n// Privacy policy endpoint\n// src/app/api/privacy/policy/route.ts\nexport async function GET() {\n  try {\n    const policy = await getPrivacyPolicy();\n    return NextResponse.json(policy);\n  } catch (error) {\n    console.error('Privacy policy error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch privacy policy' },\n      { status: 500 }\n    );\n  }\n}\n```\n\nThis comprehensive privacy and compliance system provides GDPR/CCPA compliance with consent management, data subject rights, retention policies, and user privacy controls for your RSVP application."}

