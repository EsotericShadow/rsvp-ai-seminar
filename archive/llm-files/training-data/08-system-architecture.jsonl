{"instruction": "What is the technical architecture of the RSVP system?", "input": "", "output": "The RSVP system is built with the following architecture:\n\n**Frontend:**\n- **Framework:** Next.js 14 with React\n- **Styling:** Tailwind CSS\n- **Animations:** Framer Motion\n- **State Management:** React hooks (useState, useEffect)\n- **Authentication:** Session-based with cookies\n\n**Backend:**\n- **Runtime:** Node.js\n- **Framework:** Next.js API routes\n- **Database:** PostgreSQL with Prisma ORM\n- **Email Service:** Resend API\n- **Vector Database:** Weaviate (for RAG)\n- **AI Integration:** Gemini 2.5 Flash\n\n**Database:**\n- **Primary:** PostgreSQL (Neon)\n- **ORM:** Prisma\n- **Migrations:** Prisma migrate\n- **Schema:** Defined in `prisma/schema.prisma`\n\n**Key Components:**\n- **Admin Panel:** `/admin/*` routes\n- **RSVP Forms:** Public-facing forms\n- **AI Assistant:** Juniper AI system\n- **Email Templates:** HTML/Text templates\n- **Audience Management:** Segmentation and grouping\n- **Workflow Automation:** Rule-based triggers\n\n**File Structure:**\n```\nrsvp-app/\n├── src/\n│   ├── app/           # Next.js app router\n│   ├── components/    # React components\n│   ├── lib/          # Utilities and services\n│   └── prisma/       # Database schema\n├── public/           # Static assets\n└── docs/            # Documentation\n```\n\n**Environment Variables:**\n- `DATABASE_URL` - PostgreSQL connection\n- `RESEND_API_KEY` - Email service\n- `GEMINI_API_KEY` - AI service\n- `WEAVIATE_URL` - Vector database\n- `WEAVIATE_API_KEY` - Vector database auth\n\n**Deployment:**\n- **Platform:** Vercel (frontend)\n- **Database:** Neon (PostgreSQL)\n- **AI Service:** Railway (planned)\n- **Vector DB:** Weaviate Cloud"}


