{"instruction": "How does the email sending system work?", "input": "Explain the email sending process", "output": "I'll explain the complete email sending system in your RSVP application. Here's how it works:\n\n**EMAIL SENDING SYSTEM ARCHITECTURE**\n\n**1. Email Job System**\n\n**Database Tables:**\n- `EmailJob` - Individual email sending jobs\n- `EmailEvent` - Event tracking for each job\n- `CampaignSend` - Final send records\n- `CampaignSchedule` - Campaign scheduling\n- `CampaignTemplate` - Email templates\n- `AudienceGroup` - Target audiences\n\n**2. Email Sending Process**\n\n**Step 1: Schedule Creation**\n```javascript\n// Create campaign schedule\nconst schedule = await createSchedule({\n  name: \"AI Seminar Step 1\",\n  templateId: \"template-123\",\n  groupId: \"group-456\",\n  sendAt: \"2025-01-16T09:00:00Z\",\n  throttlePerMinute: 60,\n  timeZone: \"America/Vancouver\"\n});\n```\n\n**Step 2: Email Job Generation**\n```javascript\n// In runSchedule function\nconst emailJobsToCreate = [];\nfor (const member of members) {\n  emailJobsToCreate.push({\n    campaignId: campaign.id,\n    recipientEmail: member.primaryEmail,\n    recipientId: member.businessId,\n    sendAt: calculatedSendTime,\n    status: 'scheduled',\n    meta: {\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      groupId: schedule.groupId,\n      businessId: member.businessId,\n      inviteToken: member.inviteToken\n    }\n  });\n}\n\n// Create email jobs in database\nawait prisma.emailJob.createMany({\n  data: emailJobsToCreate\n});\n```\n\n**Step 3: Email Processing**\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/cron\n```\n\n**Request Body:**\n```json\n{\n  \"limit\": 50,\n  \"campaignId\": \"campaign-123\"\n}\n```\n\n**Processing Logic:**\n```javascript\n// Find due email jobs\nconst due = await prisma.emailJob.findMany({\n  where: { \n    campaignId, \n    status: \"scheduled\", \n    sendAt: { lte: now } \n  },\n  orderBy: { sendAt: \"asc\" },\n  take: limit\n});\n\n// Lock jobs for processing\nconst locked = [];\nfor (const job of due) {\n  const update = await prisma.emailJob.updateMany({\n    where: { id: job.id, status: \"scheduled\" },\n    data: { \n      status: \"processing\", \n      processingStartedAt: now \n    }\n  });\n  if (update.count === 1) locked.push(job.id);\n}\n\n// Send emails\nfor (const id of locked) {\n  try {\n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"send_attempt\", meta: { via: \"cron\" } }\n    });\n    \n    const result = await sendCampaignEmail(id);\n    \n    await prisma.emailJob.update({\n      where: { id },\n      data: { \n        status: \"sent\", \n        sentAt: new Date(), \n        attempts: { increment: 1 }, \n        error: null \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"sent\", meta: { via: \"cron\" } }\n    });\n    \n  } catch (error) {\n    await prisma.emailJob.update({\n      where: { id },\n      data: { \n        status: \"scheduled\", \n        sendAt: new Date(Date.now() + 10 * 60 * 1000), // 10m backoff\n        attempts: { increment: 1 }, \n        error: String(error?.message ?? error) \n      }\n    });\n    \n    await prisma.emailEvent.create({\n      data: { jobId: id, type: \"failed\", meta: { via: \"cron\" } }\n    });\n  }\n}\n```\n\n**3. Email Generation & Sending**\n\n**sendCampaignEmail Function:**\n```javascript\n// In email-sender.ts\nexport async function sendCampaignEmail(jobId: string) {\n  // Get email job with related data\n  const job = await prisma.emailJob.findUnique({\n    where: { id: jobId },\n    include: { events: true }\n  });\n  \n  // Get campaign and schedule info\n  const campaign = await prisma.campaign.findUnique({\n    where: { id: job.campaignId },\n    include: {\n      schedules: {\n        include: {\n          template: true,\n          group: {\n            include: {\n              members: {\n                where: { businessId: job.recipientId }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  const schedule = campaign.schedules.find(s => \n    s.group.members.some(m => m.businessId === job.recipientId)\n  );\n  \n  const member = schedule.group.members[0];\n  \n  // Prepare template context\n  const context = {\n    business_name: member.businessName || 'Valued Customer',\n    business_id: member.businessId,\n    invite_link: inviteLinkFromToken(member.inviteToken),\n    inviteToken: member.inviteToken\n  };\n  \n  // Process template content\n  const processedContent = schedule.template.htmlBody\n    .replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name)\n    .replace(/\\{\\{\\s*business_id\\s*\\}\\}/g, context.business_id)\n    .replace(/\\{\\{\\s*invite_link\\s*\\}\\}/g, context.invite_link);\n  \n  // Generate HTML and text using global template\n  const html = await generateEmailHTML({\n    subject: schedule.template.subject,\n    greeting: 'Hello!',\n    body: processedContent,\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link,\n    inviteToken: member.inviteToken,\n    businessName: context.business_name,\n    businessId: context.business_id\n  });\n  \n  const text = generateEmailText({\n    greeting: 'Hello!',\n    body: schedule.template.textBody || processedContent.replace(/<[^>]*>/g, ''),\n    ctaText: 'View details & RSVP',\n    ctaLink: context.invite_link\n  });\n  \n  // Send email via Resend\n  const emailResponse = await resend.emails.send({\n    from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n    to: [job.recipientEmail],\n    subject: schedule.template.subject.replace(/\\{\\{\\s*business_name\\s*\\}\\}/g, context.business_name),\n    html: html,\n    text: text\n  });\n  \n  if (emailResponse.error) {\n    throw new Error(`Resend error: ${emailResponse.error.message}`);\n  }\n  \n  // Create CampaignSend record\n  await prisma.campaignSend.create({\n    data: {\n      scheduleId: schedule.id,\n      groupId: schedule.groupId,\n      templateId: schedule.templateId,\n      businessId: member.businessId,\n      businessName: member.businessName,\n      email: job.recipientEmail,\n      inviteToken: member.inviteToken,\n      inviteLink: context.invite_link,\n      resendMessageId: emailResponse.data?.id,\n      status: 'SENT',\n      sentAt: new Date(),\n      meta: {\n        template: {\n          subject: schedule.template.subject,\n          html: html,\n          text: text,\n          content: processedContent\n        },\n        context\n      }\n    }\n  });\n  \n  // Update EmailJob\n  await prisma.emailJob.update({\n    where: { id: jobId },\n    data: {\n      status: 'sent',\n      sentAt: new Date(),\n      providerMessageId: emailResponse.data?.id,\n      attempts: { increment: 1 },\n      error: null\n    }\n  });\n  \n  // Send event to LeadMine\n  await postLeadMineEvent({\n    token: member.inviteToken,\n    businessId: member.businessId,\n    type: 'email_sent',\n    meta: {\n      campaignId: job.campaignId,\n      scheduleId: schedule.id,\n      templateId: schedule.templateId,\n      email: job.recipientEmail,\n      subject: schedule.template.subject,\n      messageId: emailResponse.data?.id,\n      sentAt: new Date().toISOString(),\n      inviteToken: member.inviteToken\n    }\n  });\n  \n  return {\n    success: true,\n    messageId: emailResponse.data?.id,\n    businessId: member.businessId,\n    businessName: member.businessName\n  };\n}\n```\n\n**4. Resend API Integration**\n\n**Configuration:**\n```javascript\n// Environment variables\nconst resendKey = process.env.RESEND_API_KEY?.trim();\nconst fromEmail = process.env.CAMPAIGN_FROM_EMAIL || 'Evergreen AI <gabriel.lacroix94@icloud.com>';\n\n// Resend client\nconst resend = new Resend(resendKey);\n```\n\n**Email Sending:**\n```javascript\nconst emailResponse = await resend.emails.send({\n  from: 'Gabriel Lacroix <gabriel@evergreenwebsolutions.ca>',\n  to: [job.recipientEmail],\n  subject: processedSubject,\n  html: finalHTML,\n  text: finalText\n});\n```\n\n**5. Tracking & Analytics**\n\n**Tracking Pixel:**\n```html\n<img src=\"/api/__pixel?token=${inviteToken}&eid=biz_${inviteToken}\" width=\"1\" height=\"1\" style=\"display:none;\" />\n```\n\n**Link Tracking:**\n```javascript\n// Generate tracking link\nconst trackingLink = inviteLinkFromToken(inviteToken);\n// Link format: https://rsvp.evergreenwebsolutions.ca/?eid=biz_${token}\n```\n\n**Engagement Tracking:**\n```javascript\n// Record email opens and RSVP clicks\nexport async function recordSendEngagement(params) {\n  const send = await prisma.campaignSend.findFirst({\n    where: { inviteToken: params.inviteToken },\n    orderBy: { sentAt: 'desc' }\n  });\n  \n  if (params.type === 'visit') {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { visitedAt: params.at ?? new Date() }\n    });\n  } else {\n    await prisma.campaignSend.update({\n      where: { id: send.id },\n      data: { rsvpAt: params.at ?? new Date() }\n    });\n  }\n}\n```\n\n**6. Error Handling & Retry Logic**\n\n**Retry Strategy:**\n- Failed emails are retried after 10 minutes\n- Maximum retry attempts tracked\n- Error messages stored for debugging\n- Dead letter queue for permanently failed emails\n\n**Error Types:**\n- **Resend API Errors**: Invalid API key, rate limits, invalid recipients\n- **Template Errors**: Missing variables, invalid HTML\n- **Database Errors**: Connection issues, constraint violations\n- **Network Errors**: Timeout, connection refused\n\n**7. Throttling & Rate Limiting**\n\n**Throttling Configuration:**\n- `throttlePerMinute`: Maximum emails per minute\n- `repeatIntervalMins`: Repeat interval for recurring campaigns\n- Smart window scheduling for optimal delivery\n\n**Rate Limiting:**\n- Respects Resend API limits\n- Implements exponential backoff\n- Monitors delivery rates\n- Adjusts sending speed based on success rates\n\n**8. Monitoring & Logging**\n\n**Email Events:**\n- `send_attempt`: Email sending started\n- `sent`: Email successfully sent\n- `failed`: Email sending failed\n- `bounced`: Email bounced back\n- `opened`: Email was opened\n- `clicked`: Link was clicked\n\n**Performance Metrics:**\n- Delivery rates\n- Open rates\n- Click rates\n- Bounce rates\n- Error rates\n- Processing times\n\nThis system provides reliable, scalable email delivery with comprehensive tracking and error handling."}

{"instruction": "How do I send a test email?", "input": "Send a test email to verify the system", "output": "I'll show you how to send a test email to verify your email system. Here are the different methods:\n\n**1. MANUAL EMAIL SENDING**\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/send\n```\n\n**Request Body:**\n```json\n{\n  \"templateId\": \"template-123\",\n  \"groupId\": \"group-456\",\n  \"name\": \"Test Email\",\n  \"throttlePerMinute\": 60,\n  \"timeZone\": \"America/Vancouver\",\n  \"previewOnly\": false,\n  \"limit\": 1\n}\n```\n\n**Response:**\n```json\n{\n  \"result\": {\n    \"scheduleId\": \"temp-schedule-789\",\n    \"processed\": 1,\n    \"sent\": 1,\n    \"previewOnly\": false,\n    \"results\": [\n      {\n        \"businessId\": \"business-123\",\n        \"email\": \"test@example.com\",\n        \"status\": \"sent\",\n        \"messageId\": \"resend-message-id-456\"\n      }\n    ]\n  }\n}\n```\n\n**2. PREVIEW MODE (NO ACTUAL SENDING)**\n\n**Request Body:**\n```json\n{\n  \"templateId\": \"template-123\",\n  \"groupId\": \"group-456\",\n  \"name\": \"Test Preview\",\n  \"previewOnly\": true,\n  \"limit\": 1\n}\n```\n\n**Response:**\n```json\n{\n  \"result\": {\n    \"scheduleId\": \"temp-schedule-789\",\n    \"processed\": 1,\n    \"sent\": 0,\n    \"previewOnly\": true,\n    \"results\": [\n      {\n        \"businessId\": \"business-123\",\n        \"email\": \"test@example.com\",\n        \"status\": \"preview\",\n        \"html\": \"<!DOCTYPE html>...\",\n        \"text\": \"Hello!\\n\\nThis is a test email...\",\n        \"subject\": \"Test Email Subject\"\n      }\n    ]\n  }\n}\n```\n\n**3. CAMPAIGN STEP TESTING**\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/[id]/send-next-batch\n```\n\n**Request Body:**\n```json\n{\n  \"limit\": 1\n}\n```\n\n**Response:**\n```json\n{\n  \"processed\": 1,\n  \"sent\": 1,\n  \"failed\": 0,\n  \"paused\": false\n}\n```\n\n**4. CRON JOB TESTING**\n\n**API Endpoint:**\n```\nPOST /api/admin/campaign/cron\n```\n\n**Request Body:**\n```json\n{\n  \"limit\": 1,\n  \"campaignId\": \"campaign-123\"\n}\n```\n\n**Response:**\n```json\n{\n  \"processed\": 1,\n  \"sent\": 1,\n  \"failed\": 0\n}\n```\n\n**5. TEST EMAIL SETUP**\n\n**Step 1: Create Test Template**\n```json\n{\n  \"name\": \"Test Template\",\n  \"subject\": \"Test Email - {{business_name}}\",\n  \"htmlBody\": \"<h1>Test Email</h1><p>Hello {{business_name}},</p><p>This is a test email to verify the system is working.</p><p>Business ID: {{business_id}}</p><p>Invite Link: {{invite_link}}</p>\",\n  \"textBody\": \"Test Email\\n\\nHello {{business_name}},\\n\\nThis is a test email to verify the system is working.\\n\\nBusiness ID: {{business_id}}\\nInvite Link: {{invite_link}}\"\n}\n```\n\n**Step 2: Create Test Audience Group**\n```json\n{\n  \"name\": \"Test Group\",\n  \"description\": \"Test audience for email verification\",\n  \"color\": \"#10b981\",\n  \"criteria\": \"test\",\n  \"meta\": {\n    \"test\": true,\n    \"created_for\": \"email_verification\"\n  }\n}\n```\n\n**Step 3: Add Test Member**\n```json\n{\n  \"businessId\": \"test-business-123\",\n  \"businessName\": \"Test Business\",\n  \"primaryEmail\": \"your-test-email@example.com\",\n  \"secondaryEmail\": null,\n  \"tags\": [\"test\"],\n  \"meta\": {\n    \"test\": true,\n    \"inviteToken\": \"test-token-123\"\n  }\n}\n```\n\n**6. EMAIL VERIFICATION CHECKLIST**\n\n**Before Sending:**\n- [ ] Resend API key is configured\n- [ ] From email address is verified\n- [ ] Template has valid HTML and text versions\n- [ ] Audience group has at least one member\n- [ ] Test email address is valid\n- [ ] Global template is accessible\n\n**After Sending:**\n- [ ] Check email delivery in Resend dashboard\n- [ ] Verify email content and formatting\n- [ ] Test tracking links work correctly\n- [ ] Check database records are created\n- [ ] Verify tracking pixel loads\n- [ ] Test unsubscribe link functionality\n\n**7. TROUBLESHOOTING COMMON ISSUES**\n\n**Email Not Delivered:**\n- Check Resend API key configuration\n- Verify from email address is authorized\n- Check recipient email address validity\n- Review Resend dashboard for delivery status\n- Check spam/junk folders\n\n**Template Rendering Issues:**\n- Verify template variables are properly formatted\n- Check global template is accessible\n- Test variable replacement with sample data\n- Validate HTML structure\n- Check CSS compatibility\n\n**Database Issues:**\n- Verify database connection\n- Check table permissions\n- Review error logs\n- Validate data types and constraints\n- Check foreign key relationships\n\n**8. TEST EMAIL MONITORING**\n\n**Check EmailJob Status:**\n```sql\nSELECT id, status, attempts, error, sentAt, createdAt \nFROM EmailJob \nWHERE recipientEmail = 'test@example.com' \nORDER BY createdAt DESC \nLIMIT 5;\n```\n\n**Check EmailEvent Logs:**\n```sql\nSELECT e.type, e.meta, e.createdAt \nFROM EmailEvent e \nJOIN EmailJob j ON e.jobId = j.id \nWHERE j.recipientEmail = 'test@example.com' \nORDER BY e.createdAt DESC;\n```\n\n**Check CampaignSend Records:**\n```sql\nSELECT id, status, sentAt, resendMessageId, meta \nFROM CampaignSend \nWHERE email = 'test@example.com' \nORDER BY sentAt DESC \nLIMIT 5;\n```\n\n**9. AUTOMATED TESTING**\n\n**Test Script Example:**\n```javascript\n// Test email sending functionality\nasync function testEmailSending() {\n  try {\n    // Send test email\n    const response = await fetch('/api/admin/campaign/send', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        templateId: 'test-template-id',\n        groupId: 'test-group-id',\n        name: 'Automated Test',\n        previewOnly: false,\n        limit: 1\n      })\n    });\n    \n    const result = await response.json();\n    \n    if (result.result.sent > 0) {\n      console.log('✅ Test email sent successfully');\n      console.log('Message ID:', result.result.results[0].messageId);\n    } else {\n      console.log('❌ Test email failed to send');\n      console.log('Error:', result.result.results[0].error);\n    }\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n```\n\n**10. PRODUCTION READINESS**\n\n**Before Going Live:**\n- [ ] Test with real email addresses\n- [ ] Verify deliverability rates\n- [ ] Test unsubscribe functionality\n- [ ] Check tracking and analytics\n- [ ] Validate error handling\n- [ ] Test rate limiting and throttling\n- [ ] Verify compliance with email regulations\n- [ ] Test with different email clients\n- [ ] Check mobile responsiveness\n- [ ] Validate accessibility features\n\nThis comprehensive testing approach ensures your email system is working correctly before sending to real recipients."}


